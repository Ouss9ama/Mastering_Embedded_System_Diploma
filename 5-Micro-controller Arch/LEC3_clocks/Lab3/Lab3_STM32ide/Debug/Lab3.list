
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000318  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  00001318  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  00001318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000318  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00001310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000314  08000314  00001314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000318  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000318  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000010a  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000a3  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000014f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00001538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f88  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000508  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cf1  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000066e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0000672c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002f8 	.word	0x080002f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002f8 	.word	0x080002f8

08000170 <main>:
#define RCC_CFGR *((volatile uint32_t*)(RCC_base + 0x04))
#define RCC_CR *((volatile uint32_t*)(RCC_base + 0x00))


int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	//enabling the HSI on:
	RCC_CR |= (1<<0);
 8000176:	4b34      	ldr	r3, [pc, #208]	@ (8000248 <main+0xd8>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a33      	ldr	r2, [pc, #204]	@ (8000248 <main+0xd8>)
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	6013      	str	r3, [r2, #0]

	//Set the PLL source to HSI/2
	RCC_CFGR &= ~(1<<16);
 8000182:	4b32      	ldr	r3, [pc, #200]	@ (800024c <main+0xdc>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a31      	ldr	r2, [pc, #196]	@ (800024c <main+0xdc>)
 8000188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800018c:	6013      	str	r3, [r2, #0]

	//PLL multiplication factor
	RCC_CFGR |= (0b0110 << 18); //4*8=32
 800018e:	4b2f      	ldr	r3, [pc, #188]	@ (800024c <main+0xdc>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a2e      	ldr	r2, [pc, #184]	@ (800024c <main+0xdc>)
 8000194:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8000198:	6013      	str	r3, [r2, #0]


	//enable the PLL
	RCC_CR |= (1 << 24);
 800019a:	4b2b      	ldr	r3, [pc, #172]	@ (8000248 <main+0xd8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a2a      	ldr	r2, [pc, #168]	@ (8000248 <main+0xd8>)
 80001a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001a4:	6013      	str	r3, [r2, #0]

	//set the sysclk source:
	RCC_CFGR &= ~(0b11 << 0); // Clear SW bits (bits 1:0)
 80001a6:	4b29      	ldr	r3, [pc, #164]	@ (800024c <main+0xdc>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a28      	ldr	r2, [pc, #160]	@ (800024c <main+0xdc>)
 80001ac:	f023 0303 	bic.w	r3, r3, #3
 80001b0:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b10 << 0);
 80001b2:	4b26      	ldr	r3, [pc, #152]	@ (800024c <main+0xdc>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a25      	ldr	r2, [pc, #148]	@ (800024c <main+0xdc>)
 80001b8:	f043 0302 	orr.w	r3, r3, #2
 80001bc:	6013      	str	r3, [r2, #0]
	 1011: SYSCLK divided by 16
	 1100: SYSCLK divided by 64
	 1101: SYSCLK divided by 128
	 1110: SYSCLK divided by 256
	 1111: SYSCLK divided by 512*/
	RCC_CFGR |= (0b0000 <<4);
 80001be:	4b23      	ldr	r3, [pc, #140]	@ (800024c <main+0xdc>)
 80001c0:	4a22      	ldr	r2, [pc, #136]	@ (800024c <main+0xdc>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	6013      	str	r3, [r2, #0]
	 0xx: HCLK not divided
	 100: HCLK divided by 2
	 101: HCLK divided by 4
	 110: HCLK divided by 8
	 111: HCLK divided by 16*/
	RCC_CFGR |= (0b100 <<8);
 80001c6:	4b21      	ldr	r3, [pc, #132]	@ (800024c <main+0xdc>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a20      	ldr	r2, [pc, #128]	@ (800024c <main+0xdc>)
 80001cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001d0:	6013      	str	r3, [r2, #0]
	 0xx: HCLK not divided
	 100: HCLK divided by 2
	 101: HCLK divided by 4
	 110: HCLK divided by 8
	 111: HCLK divided by 16*/
	RCC_CFGR |= (0b101 <<11);
 80001d2:	4b1e      	ldr	r3, [pc, #120]	@ (800024c <main+0xdc>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a1d      	ldr	r2, [pc, #116]	@ (800024c <main+0xdc>)
 80001d8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80001dc:	6013      	str	r3, [r2, #0]




	// init clock  for GPIO PORT A :
	RCC_APB2ENR |= 1<<2;
 80001de:	4b1c      	ldr	r3, [pc, #112]	@ (8000250 <main+0xe0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000250 <main+0xe0>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	6013      	str	r3, [r2, #0]
	// initiate the GPIO
	GPIO_CRH &=0Xff0fffff;
 80001ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000254 <main+0xe4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a19      	ldr	r2, [pc, #100]	@ (8000254 <main+0xe4>)
 80001f0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001f4:	6013      	str	r3, [r2, #0]
	GPIO_CRH |=0X00200000;
 80001f6:	4b17      	ldr	r3, [pc, #92]	@ (8000254 <main+0xe4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a16      	ldr	r2, [pc, #88]	@ (8000254 <main+0xe4>)
 80001fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000200:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOPA_ODR |= 1<<13; //set bit 13
 8000202:	4b15      	ldr	r3, [pc, #84]	@ (8000258 <main+0xe8>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a14      	ldr	r2, [pc, #80]	@ (8000258 <main+0xe8>)
 8000208:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800020c:	6013      	str	r3, [r2, #0]
		for( int i=0;i<5000;i++);
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e002      	b.n	800021a <main+0xaa>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3301      	adds	r3, #1
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf7      	ble.n	8000214 <main+0xa4>

		GPIOPA_ODR &= ~(1<<13);
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <main+0xe8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0b      	ldr	r2, [pc, #44]	@ (8000258 <main+0xe8>)
 800022a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800022e:	6013      	str	r3, [r2, #0]
		for(  int i=0;i<5000;i++);
 8000230:	2300      	movs	r3, #0
 8000232:	603b      	str	r3, [r7, #0]
 8000234:	e002      	b.n	800023c <main+0xcc>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	603b      	str	r3, [r7, #0]
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000242:	4293      	cmp	r3, r2
 8000244:	ddf7      	ble.n	8000236 <main+0xc6>
		GPIOPA_ODR |= 1<<13; //set bit 13
 8000246:	e7dc      	b.n	8000202 <main+0x92>
 8000248:	40021000 	.word	0x40021000
 800024c:	40021004 	.word	0x40021004
 8000250:	40021018 	.word	0x40021018
 8000254:	40010804 	.word	0x40010804
 8000258:	4001080c 	.word	0x4001080c

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	@ (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480c      	ldr	r0, [pc, #48]	@ (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490d      	ldr	r1, [pc, #52]	@ (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0d      	ldr	r2, [pc, #52]	@ (80002a0 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0a      	ldr	r4, [pc, #40]	@ (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ff6f 	bl	8000170 <main>

08000292 <LoopForever>:

LoopForever:
  b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a0:	08000318 	.word	0x08000318
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC1_2_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2600      	movs	r6, #0
 80002b4:	4d0c      	ldr	r5, [pc, #48]	@ (80002e8 <__libc_init_array+0x38>)
 80002b6:	4c0d      	ldr	r4, [pc, #52]	@ (80002ec <__libc_init_array+0x3c>)
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	42a6      	cmp	r6, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	f000 f81a 	bl	80002f8 <_init>
 80002c4:	2600      	movs	r6, #0
 80002c6:	4d0a      	ldr	r5, [pc, #40]	@ (80002f0 <__libc_init_array+0x40>)
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <__libc_init_array+0x44>)
 80002ca:	1b64      	subs	r4, r4, r5
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	42a6      	cmp	r6, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d8:	4798      	blx	r3
 80002da:	3601      	adds	r6, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e2:	4798      	blx	r3
 80002e4:	3601      	adds	r6, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr
