
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001024  08001024  00002024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800104c  0800104c  00002054  2**0
                  CONTENTS
  4 .ARM          00000000  0800104c  0800104c  00002054  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800104c  08001054  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800104c  0800104c  0000204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001050  08001050  00002050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08001054  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001054  00002060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011c5  00000000  00000000  0000207d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000609  00000000  00000000  00003242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000980  00000000  00000000  0000384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  000041d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00004368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000b51  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002304  00000000  00000000  00005009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097dc  00000000  00000000  0000730d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010ae9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000504  00000000  00000000  00010b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800100c 	.word	0x0800100c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800100c 	.word	0x0800100c

08000170 <my_wait>:

#include "lcd.h"

GPIO_PinConfig_t PinCfg;
void my_wait(unsigned int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0; i<x ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <my_wait+0x26>
	{
		for(j=0; j<255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <my_wait+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	@ 0xfe
 800018e:	d9f9      	bls.n	8000184 <my_wait+0x14>
	for(i=0; i<x ; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <my_wait+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_KICK>:

void LCD_KICK(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	//Set EN pin LOW (end of the pulse)
	MCAL_GPIO_Write_PIN(LCD_CONTROL, ENABLE_SWITCH, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001b6:	4807      	ldr	r0, [pc, #28]	@ (80001d4 <LCD_KICK+0x28>)
 80001b8:	f000 fe46 	bl	8000e48 <MCAL_GPIO_Write_PIN>
	//Wait for a short time (to ensure the LCD processes the signal)
	my_wait(10);
 80001bc:	200a      	movs	r0, #10
 80001be:	f7ff ffd7 	bl	8000170 <my_wait>
	//Set EN pin HIGH (start of the pulse)
	//ENABLE_SWITCH : PIN3, LCD_CONTROL: PORTB
	MCAL_GPIO_Write_PIN(LCD_CONTROL, ENABLE_SWITCH, GPIO_PIN_RESET);
 80001c2:	2200      	movs	r2, #0
 80001c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001c8:	4802      	ldr	r0, [pc, #8]	@ (80001d4 <LCD_KICK+0x28>)
 80001ca:	f000 fe3d 	bl	8000e48 <MCAL_GPIO_Write_PIN>

}  //The LCD expects the EN pin to transition from low (0) to high (1) and then back to low (0) . This transition is called an Enable pulse .
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800

080001d8 <LCD_WRITE_COMMAND>:
// it tells the LCD to process the data or command that has been sent to it.

void LCD_WRITE_COMMAND(unsigned char command)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	LCD_IS_BUSY();
 80001e2:	f000 f919 	bl	8000418 <LCD_IS_BUSY>
	//we put command to data port A
	MCAL_GPIO_Write_PORT(LCD_CONTROL, command);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	480b      	ldr	r0, [pc, #44]	@ (800021c <LCD_WRITE_COMMAND+0x44>)
 80001ee:	f000 fe42 	bl	8000e76 <MCAL_GPIO_Write_PORT>
	//we set LCD to Write & command mode
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001f8:	4808      	ldr	r0, [pc, #32]	@ (800021c <LCD_WRITE_COMMAND+0x44>)
 80001fa:	f000 fe25 	bl	8000e48 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RS_SWITCH, GPIO_PIN_RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000204:	4805      	ldr	r0, [pc, #20]	@ (800021c <LCD_WRITE_COMMAND+0x44>)
 8000206:	f000 fe1f 	bl	8000e48 <MCAL_GPIO_Write_PIN>
	my_wait(1);
 800020a:	2001      	movs	r0, #1
 800020c:	f7ff ffb0 	bl	8000170 <my_wait>
	LCD_KICK(); //send the pulse
 8000210:	f7ff ffcc 	bl	80001ac <LCD_KICK>
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40010800 	.word	0x40010800

08000220 <LCD_INIT>:



void LCD_INIT()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	my_wait(20);;
 8000224:	2014      	movs	r0, #20
 8000226:	f7ff ffa3 	bl	8000170 <my_wait>
	RCC_GPIOA_CLK_EN();
 800022a:	4b5e      	ldr	r3, [pc, #376]	@ (80003a4 <LCD_INIT+0x184>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a5d      	ldr	r2, [pc, #372]	@ (80003a4 <LCD_INIT+0x184>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6193      	str	r3, [r2, #24]

	//my_wait(20); //we will wait for LCD to power on

	//ENABLE_SWITCH, RS_SWITCH and RW_SWITCH are set to be output floating

	PinCfg.GPIO_PinNumber = ENABLE_SWITCH;
 8000236:	4b5c      	ldr	r3, [pc, #368]	@ (80003a8 <LCD_INIT+0x188>)
 8000238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800023c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023e:	4b5a      	ldr	r3, [pc, #360]	@ (80003a8 <LCD_INIT+0x188>)
 8000240:	2204      	movs	r2, #4
 8000242:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000244:	4b58      	ldr	r3, [pc, #352]	@ (80003a8 <LCD_INIT+0x188>)
 8000246:	2201      	movs	r2, #1
 8000248:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800024a:	4957      	ldr	r1, [pc, #348]	@ (80003a8 <LCD_INIT+0x188>)
 800024c:	4857      	ldr	r0, [pc, #348]	@ (80003ac <LCD_INIT+0x18c>)
 800024e:	f000 fd7f 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000252:	4b55      	ldr	r3, [pc, #340]	@ (80003a8 <LCD_INIT+0x188>)
 8000254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000258:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800025a:	4b53      	ldr	r3, [pc, #332]	@ (80003a8 <LCD_INIT+0x188>)
 800025c:	2204      	movs	r2, #4
 800025e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000260:	4b51      	ldr	r3, [pc, #324]	@ (80003a8 <LCD_INIT+0x188>)
 8000262:	2201      	movs	r2, #1
 8000264:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000266:	4950      	ldr	r1, [pc, #320]	@ (80003a8 <LCD_INIT+0x188>)
 8000268:	4850      	ldr	r0, [pc, #320]	@ (80003ac <LCD_INIT+0x18c>)
 800026a:	f000 fd71 	bl	8000d50 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = RW_SWITCH;
 800026e:	4b4e      	ldr	r3, [pc, #312]	@ (80003a8 <LCD_INIT+0x188>)
 8000270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000274:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000276:	4b4c      	ldr	r3, [pc, #304]	@ (80003a8 <LCD_INIT+0x188>)
 8000278:	2204      	movs	r2, #4
 800027a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800027c:	4b4a      	ldr	r3, [pc, #296]	@ (80003a8 <LCD_INIT+0x188>)
 800027e:	2201      	movs	r2, #1
 8000280:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000282:	4949      	ldr	r1, [pc, #292]	@ (80003a8 <LCD_INIT+0x188>)
 8000284:	4849      	ldr	r0, [pc, #292]	@ (80003ac <LCD_INIT+0x18c>)
 8000286:	f000 fd63 	bl	8000d50 <MCAL_GPIO_Init>


	//my_wait(20);

	//PIN (0 ---> 7) PORTA set to output MODE
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800028a:	4b47      	ldr	r3, [pc, #284]	@ (80003a8 <LCD_INIT+0x188>)
 800028c:	2201      	movs	r2, #1
 800028e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000290:	4b45      	ldr	r3, [pc, #276]	@ (80003a8 <LCD_INIT+0x188>)
 8000292:	2204      	movs	r2, #4
 8000294:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000296:	4b44      	ldr	r3, [pc, #272]	@ (80003a8 <LCD_INIT+0x188>)
 8000298:	2201      	movs	r2, #1
 800029a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800029c:	4942      	ldr	r1, [pc, #264]	@ (80003a8 <LCD_INIT+0x188>)
 800029e:	4843      	ldr	r0, [pc, #268]	@ (80003ac <LCD_INIT+0x18c>)
 80002a0:	f000 fd56 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80002a4:	4b40      	ldr	r3, [pc, #256]	@ (80003a8 <LCD_INIT+0x188>)
 80002a6:	2202      	movs	r2, #2
 80002a8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002aa:	4b3f      	ldr	r3, [pc, #252]	@ (80003a8 <LCD_INIT+0x188>)
 80002ac:	2204      	movs	r2, #4
 80002ae:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002b0:	4b3d      	ldr	r3, [pc, #244]	@ (80003a8 <LCD_INIT+0x188>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80002b6:	493c      	ldr	r1, [pc, #240]	@ (80003a8 <LCD_INIT+0x188>)
 80002b8:	483c      	ldr	r0, [pc, #240]	@ (80003ac <LCD_INIT+0x18c>)
 80002ba:	f000 fd49 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80002be:	4b3a      	ldr	r3, [pc, #232]	@ (80003a8 <LCD_INIT+0x188>)
 80002c0:	2204      	movs	r2, #4
 80002c2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002c4:	4b38      	ldr	r3, [pc, #224]	@ (80003a8 <LCD_INIT+0x188>)
 80002c6:	2204      	movs	r2, #4
 80002c8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002ca:	4b37      	ldr	r3, [pc, #220]	@ (80003a8 <LCD_INIT+0x188>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80002d0:	4935      	ldr	r1, [pc, #212]	@ (80003a8 <LCD_INIT+0x188>)
 80002d2:	4836      	ldr	r0, [pc, #216]	@ (80003ac <LCD_INIT+0x18c>)
 80002d4:	f000 fd3c 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80002d8:	4b33      	ldr	r3, [pc, #204]	@ (80003a8 <LCD_INIT+0x188>)
 80002da:	2208      	movs	r2, #8
 80002dc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002de:	4b32      	ldr	r3, [pc, #200]	@ (80003a8 <LCD_INIT+0x188>)
 80002e0:	2204      	movs	r2, #4
 80002e2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002e4:	4b30      	ldr	r3, [pc, #192]	@ (80003a8 <LCD_INIT+0x188>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80002ea:	492f      	ldr	r1, [pc, #188]	@ (80003a8 <LCD_INIT+0x188>)
 80002ec:	482f      	ldr	r0, [pc, #188]	@ (80003ac <LCD_INIT+0x18c>)
 80002ee:	f000 fd2f 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	@ (80003a8 <LCD_INIT+0x188>)
 80002f4:	2210      	movs	r2, #16
 80002f6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	@ (80003a8 <LCD_INIT+0x188>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	@ (80003a8 <LCD_INIT+0x188>)
 8000300:	2201      	movs	r2, #1
 8000302:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000304:	4928      	ldr	r1, [pc, #160]	@ (80003a8 <LCD_INIT+0x188>)
 8000306:	4829      	ldr	r0, [pc, #164]	@ (80003ac <LCD_INIT+0x18c>)
 8000308:	f000 fd22 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800030c:	4b26      	ldr	r3, [pc, #152]	@ (80003a8 <LCD_INIT+0x188>)
 800030e:	2220      	movs	r2, #32
 8000310:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000312:	4b25      	ldr	r3, [pc, #148]	@ (80003a8 <LCD_INIT+0x188>)
 8000314:	2204      	movs	r2, #4
 8000316:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000318:	4b23      	ldr	r3, [pc, #140]	@ (80003a8 <LCD_INIT+0x188>)
 800031a:	2201      	movs	r2, #1
 800031c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800031e:	4922      	ldr	r1, [pc, #136]	@ (80003a8 <LCD_INIT+0x188>)
 8000320:	4822      	ldr	r0, [pc, #136]	@ (80003ac <LCD_INIT+0x18c>)
 8000322:	f000 fd15 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000326:	4b20      	ldr	r3, [pc, #128]	@ (80003a8 <LCD_INIT+0x188>)
 8000328:	2240      	movs	r2, #64	@ 0x40
 800032a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800032c:	4b1e      	ldr	r3, [pc, #120]	@ (80003a8 <LCD_INIT+0x188>)
 800032e:	2204      	movs	r2, #4
 8000330:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000332:	4b1d      	ldr	r3, [pc, #116]	@ (80003a8 <LCD_INIT+0x188>)
 8000334:	2201      	movs	r2, #1
 8000336:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000338:	491b      	ldr	r1, [pc, #108]	@ (80003a8 <LCD_INIT+0x188>)
 800033a:	481c      	ldr	r0, [pc, #112]	@ (80003ac <LCD_INIT+0x18c>)
 800033c:	f000 fd08 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000340:	4b19      	ldr	r3, [pc, #100]	@ (80003a8 <LCD_INIT+0x188>)
 8000342:	2280      	movs	r2, #128	@ 0x80
 8000344:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000346:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <LCD_INIT+0x188>)
 8000348:	2204      	movs	r2, #4
 800034a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800034c:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <LCD_INIT+0x188>)
 800034e:	2201      	movs	r2, #1
 8000350:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000352:	4915      	ldr	r1, [pc, #84]	@ (80003a8 <LCD_INIT+0x188>)
 8000354:	4815      	ldr	r0, [pc, #84]	@ (80003ac <LCD_INIT+0x18c>)
 8000356:	f000 fcfb 	bl	8000d50 <MCAL_GPIO_Init>

	MCAL_GPIO_Write_PIN(LCD_CONTROL, ENABLE_SWITCH, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000360:	4812      	ldr	r0, [pc, #72]	@ (80003ac <LCD_INIT+0x18c>)
 8000362:	f000 fd71 	bl	8000e48 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RS_SWITCH, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800036c:	480f      	ldr	r0, [pc, #60]	@ (80003ac <LCD_INIT+0x18c>)
 800036e:	f000 fd6b 	bl	8000e48 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LCD_INIT+0x18c>)
 800037a:	f000 fd65 	bl	8000e48 <MCAL_GPIO_Write_PIN>

	my_wait(15);
 800037e:	200f      	movs	r0, #15
 8000380:	f7ff fef6 	bl	8000170 <my_wait>


	LCD_clear_screen(); // we clear the display
 8000384:	f000 f83e 	bl	8000404 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000388:	2038      	movs	r0, #56	@ 0x38
 800038a:	f7ff ff25 	bl	80001d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800038e:	2006      	movs	r0, #6
 8000390:	f7ff ff22 	bl	80001d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
 8000394:	2080      	movs	r0, #128	@ 0x80
 8000396:	f7ff ff1f 	bl	80001d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800039a:	200f      	movs	r0, #15
 800039c:	f7ff ff1c 	bl	80001d8 <LCD_WRITE_COMMAND>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	2000001c 	.word	0x2000001c
 80003ac:	40010800 	.word	0x40010800

080003b0 <LCD_GO_TO_XY>:



void LCD_GO_TO_XY(int line, int pos){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]


	//line:row, column pos 0-15 for the first row, column pos 0-15 for the second row
	if(line == 1){ // we check if the target line is the 1st line
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d10d      	bne.n	80003dc <LCD_GO_TO_XY+0x2c>
		if(pos < 16 && pos >=0){ //ensure the pos is within the range 0-15
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	2b0f      	cmp	r3, #15
 80003c4:	dc1a      	bgt.n	80003fc <LCD_GO_TO_XY+0x4c>
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	db17      	blt.n	80003fc <LCD_GO_TO_XY+0x4c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + pos);//we send command to the cursor to move it to pos
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	3b80      	subs	r3, #128	@ 0x80
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff feff 	bl	80001d8 <LCD_WRITE_COMMAND>
	else if(line == 2){// we check if the target line is the 2nd row
		if(pos < 16 && pos >=0){//ensure the pos is within the range 0-15
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + pos);//we send command to the cursor to move it to pos
		}
	}
}
 80003da:	e00f      	b.n	80003fc <LCD_GO_TO_XY+0x4c>
	else if(line == 2){// we check if the target line is the 2nd row
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d10c      	bne.n	80003fc <LCD_GO_TO_XY+0x4c>
		if(pos < 16 && pos >=0){//ensure the pos is within the range 0-15
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	dc09      	bgt.n	80003fc <LCD_GO_TO_XY+0x4c>
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	db06      	blt.n	80003fc <LCD_GO_TO_XY+0x4c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + pos);//we send command to the cursor to move it to pos
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	3b40      	subs	r3, #64	@ 0x40
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff feee 	bl	80001d8 <LCD_WRITE_COMMAND>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <LCD_clear_screen>:



void LCD_clear_screen()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000408:	2001      	movs	r0, #1
 800040a:	f7ff fee5 	bl	80001d8 <LCD_WRITE_COMMAND>
	my_wait(2);
 800040e:	2002      	movs	r0, #2
 8000410:	f7ff feae 	bl	8000170 <my_wait>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <LCD_IS_BUSY>:

void LCD_IS_BUSY()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
	//a. set the PORTA (0--->7)to receive data on the micro controller as input

	GPIO_PinConfig_t PinCfg;
	//PIN (0 ---> 7) PORTA set to INPUT MODE
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800041e:	2301      	movs	r3, #1
 8000420:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000422:	2301      	movs	r3, #1
 8000424:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4859      	ldr	r0, [pc, #356]	@ (8000590 <LCD_IS_BUSY+0x178>)
 800042c:	f000 fc90 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000430:	2302      	movs	r3, #2
 8000432:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000434:	2301      	movs	r3, #1
 8000436:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4854      	ldr	r0, [pc, #336]	@ (8000590 <LCD_IS_BUSY+0x178>)
 800043e:	f000 fc87 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000442:	2304      	movs	r3, #4
 8000444:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000446:	2301      	movs	r3, #1
 8000448:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	4850      	ldr	r0, [pc, #320]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000450:	f000 fc7e 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000454:	2308      	movs	r3, #8
 8000456:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000458:	2301      	movs	r3, #1
 800045a:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4619      	mov	r1, r3
 8000460:	484b      	ldr	r0, [pc, #300]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000462:	f000 fc75 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000466:	2310      	movs	r3, #16
 8000468:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800046a:	2301      	movs	r3, #1
 800046c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4619      	mov	r1, r3
 8000472:	4847      	ldr	r0, [pc, #284]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000474:	f000 fc6c 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000478:	2320      	movs	r3, #32
 800047a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800047c:	2301      	movs	r3, #1
 800047e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4842      	ldr	r0, [pc, #264]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000486:	f000 fc63 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800048a:	2340      	movs	r3, #64	@ 0x40
 800048c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800048e:	2301      	movs	r3, #1
 8000490:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	483e      	ldr	r0, [pc, #248]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000498:	f000 fc5a 	bl	8000d50 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80004a0:	2301      	movs	r3, #1
 80004a2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4839      	ldr	r0, [pc, #228]	@ (8000590 <LCD_IS_BUSY+0x178>)
 80004aa:	f000 fc51 	bl	8000d50 <MCAL_GPIO_Init>



	//b. put the LCD in read mode (RW on)
	//MCU reads data from LCD
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b4:	4836      	ldr	r0, [pc, #216]	@ (8000590 <LCD_IS_BUSY+0x178>)
 80004b6:	f000 fcc7 	bl	8000e48 <MCAL_GPIO_Write_PIN>

	//c. put the LCD in command mode (RS off)
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RS_SWITCH, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004c0:	4833      	ldr	r0, [pc, #204]	@ (8000590 <LCD_IS_BUSY+0x178>)
 80004c2:	f000 fcc1 	bl	8000e48 <MCAL_GPIO_Write_PIN>

	LCD_KICK();  // Send Enable pulse to read busy flag
 80004c6:	f7ff fe71 	bl	80001ac <LCD_KICK>

	//DDR_LCD_PORT = 0xFF;// we return the LCD port to output
	//
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80004ca:	2301      	movs	r3, #1
 80004cc:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ce:	2304      	movs	r3, #4
 80004d0:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80004d2:	2301      	movs	r3, #1
 80004d4:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4619      	mov	r1, r3
 80004da:	482d      	ldr	r0, [pc, #180]	@ (8000590 <LCD_IS_BUSY+0x178>)
 80004dc:	f000 fc38 	bl	8000d50 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80004e0:	2302      	movs	r3, #2
 80004e2:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004e4:	2304      	movs	r3, #4
 80004e6:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	4827      	ldr	r0, [pc, #156]	@ (8000590 <LCD_IS_BUSY+0x178>)
 80004f2:	f000 fc2d 	bl	8000d50 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80004f6:	2304      	movs	r3, #4
 80004f8:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004fa:	2304      	movs	r3, #4
 80004fc:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80004fe:	2301      	movs	r3, #1
 8000500:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4619      	mov	r1, r3
 8000506:	4822      	ldr	r0, [pc, #136]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000508:	f000 fc22 	bl	8000d50 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800050c:	2308      	movs	r3, #8
 800050e:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000510:	2304      	movs	r3, #4
 8000512:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000514:	2301      	movs	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4619      	mov	r1, r3
 800051c:	481c      	ldr	r0, [pc, #112]	@ (8000590 <LCD_IS_BUSY+0x178>)
 800051e:	f000 fc17 	bl	8000d50 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000522:	2310      	movs	r3, #16
 8000524:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000526:	2304      	movs	r3, #4
 8000528:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4619      	mov	r1, r3
 8000532:	4817      	ldr	r0, [pc, #92]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000534:	f000 fc0c 	bl	8000d50 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000538:	2320      	movs	r3, #32
 800053a:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800053c:	2304      	movs	r3, #4
 800053e:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000540:	2301      	movs	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	4811      	ldr	r0, [pc, #68]	@ (8000590 <LCD_IS_BUSY+0x178>)
 800054a:	f000 fc01 	bl	8000d50 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800054e:	2340      	movs	r3, #64	@ 0x40
 8000550:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000552:	2304      	movs	r3, #4
 8000554:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	480c      	ldr	r0, [pc, #48]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000560:	f000 fbf6 	bl	8000d50 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000568:	2304      	movs	r3, #4
 800056a:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800056c:	2301      	movs	r3, #1
 800056e:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000576:	f000 fbeb 	bl	8000d50 <MCAL_GPIO_Init>

	//LCD_CONTROL &= ~(1<<RW_SWITCH); // set write mode, the MCU writes to the LCD.
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <LCD_IS_BUSY+0x178>)
 8000582:	f000 fc61 	bl	8000e48 <MCAL_GPIO_Write_PIN>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40010800 	.word	0x40010800

08000594 <LCD_WRITE_CHAR>:




void LCD_WRITE_CHAR(unsigned char data)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	LCD_IS_BUSY();
 800059e:	f7ff ff3b 	bl	8000418 <LCD_IS_BUSY>
	MCAL_GPIO_Write_PORT(LCD_CONTROL, data);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <LCD_WRITE_CHAR+0x44>)
 80005aa:	f000 fc64 	bl	8000e76 <MCAL_GPIO_Write_PORT>
	//we set the LCD to write mode
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <LCD_WRITE_CHAR+0x44>)
 80005b6:	f000 fc47 	bl	8000e48 <MCAL_GPIO_Write_PIN>
	// but this time we send data
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RS_SWITCH, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <LCD_WRITE_CHAR+0x44>)
 80005c2:	f000 fc41 	bl	8000e48 <MCAL_GPIO_Write_PIN>
    my_wait(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff fdd2 	bl	8000170 <my_wait>
	LCD_KICK(); //send pulse
 80005cc:	f7ff fdee 	bl	80001ac <LCD_KICK>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40010800 	.word	0x40010800

080005dc <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(char* data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	int counter = 0; //the counter we used here keeps track of how many characters have been written
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
	while(*data >0)
 80005e8:	e01c      	b.n	8000624 <LCD_WRITE_STRING+0x48>
	{ //our loop is on as long as the current character is not '\0' (end of string)
		counter ++;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*data++);// write the character and move to the next one
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffcb 	bl	8000594 <LCD_WRITE_CHAR>
		if(counter == 16)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b10      	cmp	r3, #16
 8000602:	d104      	bne.n	800060e <LCD_WRITE_STRING+0x32>
		{
			//if 16 char have been written we move to the second row

			LCD_GO_TO_XY(2, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	2002      	movs	r0, #2
 8000608:	f7ff fed2 	bl	80003b0 <LCD_GO_TO_XY>
 800060c:	e00a      	b.n	8000624 <LCD_WRITE_STRING+0x48>
		}
		else if(counter == 32)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b20      	cmp	r3, #32
 8000612:	d107      	bne.n	8000624 <LCD_WRITE_STRING+0x48>
		{//if 32 char have been written we clear the screen and start all over again from the first row
			LCD_clear_screen();
 8000614:	f7ff fef6 	bl	8000404 <LCD_clear_screen>
			LCD_GO_TO_XY(1,0);
 8000618:	2100      	movs	r1, #0
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fec8 	bl	80003b0 <LCD_GO_TO_XY>
			counter = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
	while(*data >0)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1de      	bne.n	80005ea <LCD_WRITE_STRING+0xe>
		}
	}

}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <Enable_NVIC>:

/********************************************************************************************************************************************/
/*GENERIC FUNCTIONS*/
/********************************************************************************************************************************************/

void Enable_NVIC (uint16_t IRQ){
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d854      	bhi.n	80006f2 <Enable_NVIC+0xba>
 8000648:	a201      	add	r2, pc, #4	@ (adr r2, 8000650 <Enable_NVIC+0x18>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000691 	.word	0x08000691
 8000654:	0800069f 	.word	0x0800069f
 8000658:	080006ad 	.word	0x080006ad
 800065c:	080006bb 	.word	0x080006bb
 8000660:	080006c9 	.word	0x080006c9
 8000664:	080006d7 	.word	0x080006d7
 8000668:	080006d7 	.word	0x080006d7
 800066c:	080006d7 	.word	0x080006d7
 8000670:	080006d7 	.word	0x080006d7
 8000674:	080006d7 	.word	0x080006d7
 8000678:	080006e5 	.word	0x080006e5
 800067c:	080006e5 	.word	0x080006e5
 8000680:	080006e5 	.word	0x080006e5
 8000684:	080006e5 	.word	0x080006e5
 8000688:	080006e5 	.word	0x080006e5
 800068c:	080006e5 	.word	0x080006e5
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000690:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <Enable_NVIC+0xc4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <Enable_NVIC+0xc4>)
 8000696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800069a:	6013      	str	r3, [r2, #0]
		break;
 800069c:	e029      	b.n	80006f2 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <Enable_NVIC+0xc4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a16      	ldr	r2, [pc, #88]	@ (80006fc <Enable_NVIC+0xc4>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	6013      	str	r3, [r2, #0]
		break;
 80006aa:	e022      	b.n	80006f2 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <Enable_NVIC+0xc4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <Enable_NVIC+0xc4>)
 80006b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b6:	6013      	str	r3, [r2, #0]
		break;
 80006b8:	e01b      	b.n	80006f2 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <Enable_NVIC+0xc4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0f      	ldr	r2, [pc, #60]	@ (80006fc <Enable_NVIC+0xc4>)
 80006c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006c4:	6013      	str	r3, [r2, #0]
		break;
 80006c6:	e014      	b.n	80006f2 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <Enable_NVIC+0xc4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <Enable_NVIC+0xc4>)
 80006ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006d2:	6013      	str	r3, [r2, #0]
		break;
 80006d4:	e00d      	b.n	80006f2 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_9_Enable;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <Enable_NVIC+0xc4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <Enable_NVIC+0xc4>)
 80006dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80006e0:	6013      	str	r3, [r2, #0]
		break;
 80006e2:	e006      	b.n	80006f2 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_15_Enable;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <Enable_NVIC+0xc8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <Enable_NVIC+0xc8>)
 80006ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ee:	6013      	str	r3, [r2, #0]
		break;
 80006f0:	bf00      	nop
	}
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000e104 	.word	0xe000e104

08000704 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ){
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d854      	bhi.n	80007be <Disable_NVIC+0xba>
 8000714:	a201      	add	r2, pc, #4	@ (adr r2, 800071c <Disable_NVIC+0x18>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	0800075d 	.word	0x0800075d
 8000720:	0800076b 	.word	0x0800076b
 8000724:	08000779 	.word	0x08000779
 8000728:	08000787 	.word	0x08000787
 800072c:	08000795 	.word	0x08000795
 8000730:	080007a3 	.word	0x080007a3
 8000734:	080007a3 	.word	0x080007a3
 8000738:	080007a3 	.word	0x080007a3
 800073c:	080007a3 	.word	0x080007a3
 8000740:	080007a3 	.word	0x080007a3
 8000744:	080007b1 	.word	0x080007b1
 8000748:	080007b1 	.word	0x080007b1
 800074c:	080007b1 	.word	0x080007b1
 8000750:	080007b1 	.word	0x080007b1
 8000754:	080007b1 	.word	0x080007b1
 8000758:	080007b1 	.word	0x080007b1
	case 0:
		NVIC_IRQ6_EXTI0_disable;
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <Disable_NVIC+0xc4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a19      	ldr	r2, [pc, #100]	@ (80007c8 <Disable_NVIC+0xc4>)
 8000762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000766:	6013      	str	r3, [r2, #0]
		break;
 8000768:	e029      	b.n	80007be <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_disable;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <Disable_NVIC+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <Disable_NVIC+0xc4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6013      	str	r3, [r2, #0]
		break;
 8000776:	e022      	b.n	80007be <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_disable;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <Disable_NVIC+0xc4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <Disable_NVIC+0xc4>)
 800077e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000782:	6013      	str	r3, [r2, #0]
		break;
 8000784:	e01b      	b.n	80007be <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_disable;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <Disable_NVIC+0xc4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0f      	ldr	r2, [pc, #60]	@ (80007c8 <Disable_NVIC+0xc4>)
 800078c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000790:	6013      	str	r3, [r2, #0]
		break;
 8000792:	e014      	b.n	80007be <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_disable;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <Disable_NVIC+0xc4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <Disable_NVIC+0xc4>)
 800079a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800079e:	6013      	str	r3, [r2, #0]
		break;
 80007a0:	e00d      	b.n	80007be <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_9_disable;
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <Disable_NVIC+0xc4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <Disable_NVIC+0xc4>)
 80007a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007ac:	6013      	str	r3, [r2, #0]
		break;
 80007ae:	e006      	b.n	80007be <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_15_disable;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <Disable_NVIC+0xc8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <Disable_NVIC+0xc8>)
 80007b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ba:	6013      	str	r3, [r2, #0]
		break;
 80007bc:	bf00      	nop
	}
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	e000e180 	.word	0xe000e180
 80007cc:	e000e184 	.word	0xe000e184

080007d0 <Update_EXTI>:



void Update_EXTI(EXTI_PinCnfig_t* EXTI_Config){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	//1-Configure the GPIO To be alternative function input -> floating input

	GPIO_PinConfig_t PinCfg;
	//update the GPIO PIN to be floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	891b      	ldrh	r3, [r3, #8]
 80007dc:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80007de:	2301      	movs	r3, #1
 80007e0:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_PORT, &PinCfg);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f107 0208 	add.w	r2, r7, #8
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 faaf 	bl	8000d50 <MCAL_GPIO_Init>
	//==========================================================

	//2-update the AFIO to map between EXTI line with port coresponding port (A, B, C, D)
	uint8_t AFIO_EXTICR_INDEX = EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number / 4; // to know EXTI LINE  belong to which register from the for
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_POSITION = (EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number % 4) * 4; // to get the exact position (4 bit) of EXLI line in the register
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	73bb      	strb	r3, [r7, #14]
	//clear the 4 bit
	(AFIO->EXITCR[AFIO_EXTICR_INDEX]) &= ~(0xF<< AFIO_EXTICR_POSITION);
 800080c:	4a5f      	ldr	r2, [pc, #380]	@ (800098c <Update_EXTI+0x1bc>)
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	3302      	adds	r3, #2
 8000812:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	210f      	movs	r1, #15
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	495a      	ldr	r1, [pc, #360]	@ (800098c <Update_EXTI+0x1bc>)
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	4002      	ands	r2, r0
 8000828:	3302      	adds	r3, #2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//ENABLE THE the 4 bit of the line in the selected port
	(AFIO->EXITCR[AFIO_EXTICR_INDEX]) |= ((AFIO_GPIO_EXTI_MAPPING(EXTI_Config->EXTI_PIN.GPIO_PORT) & 0xF) << AFIO_EXTICR_POSITION);
 800082e:	4a57      	ldr	r2, [pc, #348]	@ (800098c <Update_EXTI+0x1bc>)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	3302      	adds	r3, #2
 8000834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4954      	ldr	r1, [pc, #336]	@ (8000990 <Update_EXTI+0x1c0>)
 800083e:	428b      	cmp	r3, r1
 8000840:	d016      	beq.n	8000870 <Update_EXTI+0xa0>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	4953      	ldr	r1, [pc, #332]	@ (8000994 <Update_EXTI+0x1c4>)
 8000848:	428b      	cmp	r3, r1
 800084a:	d00f      	beq.n	800086c <Update_EXTI+0x9c>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4951      	ldr	r1, [pc, #324]	@ (8000998 <Update_EXTI+0x1c8>)
 8000852:	428b      	cmp	r3, r1
 8000854:	d008      	beq.n	8000868 <Update_EXTI+0x98>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4950      	ldr	r1, [pc, #320]	@ (800099c <Update_EXTI+0x1cc>)
 800085c:	428b      	cmp	r3, r1
 800085e:	d101      	bne.n	8000864 <Update_EXTI+0x94>
 8000860:	2303      	movs	r3, #3
 8000862:	e006      	b.n	8000872 <Update_EXTI+0xa2>
 8000864:	2300      	movs	r3, #0
 8000866:	e004      	b.n	8000872 <Update_EXTI+0xa2>
 8000868:	2302      	movs	r3, #2
 800086a:	e002      	b.n	8000872 <Update_EXTI+0xa2>
 800086c:	2301      	movs	r3, #1
 800086e:	e000      	b.n	8000872 <Update_EXTI+0xa2>
 8000870:	2300      	movs	r3, #0
 8000872:	7bb9      	ldrb	r1, [r7, #14]
 8000874:	408b      	lsls	r3, r1
 8000876:	4618      	mov	r0, r3
 8000878:	4944      	ldr	r1, [pc, #272]	@ (800098c <Update_EXTI+0x1bc>)
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	4302      	orrs	r2, r0
 800087e:	3302      	adds	r3, #2
 8000880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==========================================================
	//3- update the rising and falling Edge

	(EXTI->RTSR) &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number); //CLEARING THE RISING REG OF THE LINE
 8000884:	4b46      	ldr	r3, [pc, #280]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	8812      	ldrh	r2, [r2, #0]
 800088c:	4611      	mov	r1, r2
 800088e:	2201      	movs	r2, #1
 8000890:	408a      	lsls	r2, r1
 8000892:	43d2      	mvns	r2, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a42      	ldr	r2, [pc, #264]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000898:	400b      	ands	r3, r1
 800089a:	6093      	str	r3, [r2, #8]
	(EXTI->FTSR) &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number); // CLEARING THE FALLING REG OF THE LINE
 800089c:	4b40      	ldr	r3, [pc, #256]	@ (80009a0 <Update_EXTI+0x1d0>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	43d2      	mvns	r2, r2
 80008ac:	4611      	mov	r1, r2
 80008ae:	4a3c      	ldr	r2, [pc, #240]	@ (80009a0 <Update_EXTI+0x1d0>)
 80008b0:	400b      	ands	r3, r1
 80008b2:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case ==  EXTI_Trigger_Rising)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7b1b      	ldrb	r3, [r3, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10b      	bne.n	80008d4 <Update_EXTI+0x104>
	{

		(EXTI->RTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 80008bc:	4b38      	ldr	r3, [pc, #224]	@ (80009a0 <Update_EXTI+0x1d0>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	4611      	mov	r1, r2
 80008c6:	2201      	movs	r2, #1
 80008c8:	408a      	lsls	r2, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	4a34      	ldr	r2, [pc, #208]	@ (80009a0 <Update_EXTI+0x1d0>)
 80008ce:	430b      	orrs	r3, r1
 80008d0:	6093      	str	r3, [r2, #8]
 80008d2:	e029      	b.n	8000928 <Update_EXTI+0x158>

	}else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7b1b      	ldrb	r3, [r3, #12]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d10b      	bne.n	80008f4 <Update_EXTI+0x124>
	{
		(EXTI->FTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 80008dc:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <Update_EXTI+0x1d0>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	8812      	ldrh	r2, [r2, #0]
 80008e4:	4611      	mov	r1, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	408a      	lsls	r2, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a2c      	ldr	r2, [pc, #176]	@ (80009a0 <Update_EXTI+0x1d0>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	60d3      	str	r3, [r2, #12]
 80008f2:	e019      	b.n	8000928 <Update_EXTI+0x158>

	}else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Ris_Fall)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7b1b      	ldrb	r3, [r3, #12]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d115      	bne.n	8000928 <Update_EXTI+0x158>
	{
		(EXTI->RTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 80008fc:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <Update_EXTI+0x1d0>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	8812      	ldrh	r2, [r2, #0]
 8000904:	4611      	mov	r1, r2
 8000906:	2201      	movs	r2, #1
 8000908:	408a      	lsls	r2, r1
 800090a:	4611      	mov	r1, r2
 800090c:	4a24      	ldr	r2, [pc, #144]	@ (80009a0 <Update_EXTI+0x1d0>)
 800090e:	430b      	orrs	r3, r1
 8000910:	6093      	str	r3, [r2, #8]
		(EXTI->FTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	8812      	ldrh	r2, [r2, #0]
 800091a:	4611      	mov	r1, r2
 800091c:	2201      	movs	r2, #1
 800091e:	408a      	lsls	r2, r1
 8000920:	4611      	mov	r1, r2
 8000922:	4a1f      	ldr	r2, [pc, #124]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000924:	430b      	orrs	r3, r1
 8000926:	60d3      	str	r3, [r2, #12]
	}

	//==========================================================
	//4- update IRQ HANDLING CALLBACK

	GPtr_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number] = EXTI_Config->Ptr_IRQ_CALLBACK;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <Update_EXTI+0x1d4>)
 8000934:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//==========================================================
	//5- Enable/disable the IRQ & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7b5b      	ldrb	r3, [r3, #13]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d110      	bne.n	8000962 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	8812      	ldrh	r2, [r2, #0]
 8000948:	4611      	mov	r1, r2
 800094a:	2201      	movs	r2, #1
 800094c:	408a      	lsls	r2, r1
 800094e:	4611      	mov	r1, r2
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000952:	430b      	orrs	r3, r1
 8000954:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe6c 	bl	8000638 <Enable_NVIC>
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);

	}


}
 8000960:	e010      	b.n	8000984 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	8812      	ldrh	r2, [r2, #0]
 800096a:	4611      	mov	r1, r2
 800096c:	2201      	movs	r2, #1
 800096e:	408a      	lsls	r2, r1
 8000970:	43d2      	mvns	r2, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <Update_EXTI+0x1d0>)
 8000976:	400b      	ands	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fec0 	bl	8000704 <Disable_NVIC>
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40010000 	.word	0x40010000
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40011000 	.word	0x40011000
 800099c:	40011400 	.word	0x40011400
 80009a0:	40010400 	.word	0x40010400
 80009a4:	20000020 	.word	0x20000020

080009a8 <MCAL_EXTI_GPIO_INIT>:
 * Note		     : -STM32F103C6 MCU has GPIO A, B, C, D, E Modules,
                   -STM32F103C6 MCU has GPIO A,B,C,D,E modules but LQFP48 A,B AND PART OF C & D exported as external pins of MCU
                   - Mendatory to enable the RCC clock for AFIO & GPIO
  ========================================================================================================================================*/
void MCAL_EXTI_GPIO_INIT(EXTI_PinCnfig_t* EXIT_Config)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXIT_Config);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff0d 	bl	80007d0 <Update_EXTI>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <EXTI0_IRQHandler>:

/************************************************************************************************/
/**********************************     ISR FUNCTIONS         ***********************************/
/************************************************************************************************/
void EXTI0_IRQHandler (void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<0);
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <EXTI0_IRQHandler+0x1c>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <EXTI0_IRQHandler+0x1c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[0]();
 80009d0:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <EXTI0_IRQHandler+0x20>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4798      	blx	r3

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010400 	.word	0x40010400
 80009e0:	20000020 	.word	0x20000020

080009e4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<1);
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <EXTI1_IRQHandler+0x1c>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <EXTI1_IRQHandler+0x1c>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[1]();
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <EXTI1_IRQHandler+0x20>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	4798      	blx	r3
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010400 	.word	0x40010400
 8000a04:	20000020 	.word	0x20000020

08000a08 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<2);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <EXTI2_IRQHandler+0x1c>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <EXTI2_IRQHandler+0x1c>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[2]();
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <EXTI2_IRQHandler+0x20>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4798      	blx	r3
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40010400 	.word	0x40010400
 8000a28:	20000020 	.word	0x20000020

08000a2c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<3);
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <EXTI3_IRQHandler+0x1c>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	4a04      	ldr	r2, [pc, #16]	@ (8000a48 <EXTI3_IRQHandler+0x1c>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[3]();
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <EXTI3_IRQHandler+0x20>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	4798      	blx	r3
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010400 	.word	0x40010400
 8000a4c:	20000020 	.word	0x20000020

08000a50 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<4);
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <EXTI4_IRQHandler+0x1c>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <EXTI4_IRQHandler+0x1c>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[4]();
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <EXTI4_IRQHandler+0x20>)
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	4798      	blx	r3
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40010400 	.word	0x40010400
 8000a70:	20000020 	.word	0x20000020

08000a74 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5); GPtr_IRQ_CALLBACK[5]();}
 8000a78:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d008      	beq.n	8000a96 <EXTI9_5_IRQHandler+0x22>
 8000a84:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000a8a:	f043 0320 	orr.w	r3, r3, #32
 8000a8e:	6153      	str	r3, [r2, #20]
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <EXTI9_5_IRQHandler+0xa4>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6); GPtr_IRQ_CALLBACK[6]();}
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d008      	beq.n	8000ab4 <EXTI9_5_IRQHandler+0x40>
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <EXTI9_5_IRQHandler+0xa4>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7); GPtr_IRQ_CALLBACK[7]();}
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d008      	beq.n	8000ad2 <EXTI9_5_IRQHandler+0x5e>
 8000ac0:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aca:	6153      	str	r3, [r2, #20]
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <EXTI9_5_IRQHandler+0xa4>)
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8); GPtr_IRQ_CALLBACK[8]();}
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d008      	beq.n	8000af0 <EXTI9_5_IRQHandler+0x7c>
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <EXTI9_5_IRQHandler+0xa4>)
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9); GPtr_IRQ_CALLBACK[9]();}
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d008      	beq.n	8000b0e <EXTI9_5_IRQHandler+0x9a>
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <EXTI9_5_IRQHandler+0xa0>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b06:	6153      	str	r3, [r2, #20]
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <EXTI9_5_IRQHandler+0xa4>)
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b0c:	4798      	blx	r3
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010400 	.word	0x40010400
 8000b18:	20000020 	.word	0x20000020

08000b1c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10); GPtr_IRQ_CALLBACK[10]();}
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <EXTI15_10_IRQHandler+0x22>
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b36:	6153      	str	r3, [r2, #20]
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <EXTI15_10_IRQHandler+0xc0>)
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b3c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11); GPtr_IRQ_CALLBACK[11]();}
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d008      	beq.n	8000b5c <EXTI15_10_IRQHandler+0x40>
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a22      	ldr	r2, [pc, #136]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <EXTI15_10_IRQHandler+0xc0>)
 8000b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b5a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12); GPtr_IRQ_CALLBACK[12]();}
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d008      	beq.n	8000b7a <EXTI15_10_IRQHandler+0x5e>
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b72:	6153      	str	r3, [r2, #20]
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <EXTI15_10_IRQHandler+0xc0>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13); GPtr_IRQ_CALLBACK[13]();}
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d008      	beq.n	8000b98 <EXTI15_10_IRQHandler+0x7c>
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a13      	ldr	r2, [pc, #76]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <EXTI15_10_IRQHandler+0xc0>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b96:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14); GPtr_IRQ_CALLBACK[14]();}
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d008      	beq.n	8000bb6 <EXTI15_10_IRQHandler+0x9a>
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bae:	6153      	str	r3, [r2, #20]
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <EXTI15_10_IRQHandler+0xc0>)
 8000bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15); GPtr_IRQ_CALLBACK[15]();}
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d008      	beq.n	8000bd4 <EXTI15_10_IRQHandler+0xb8>
 8000bc2:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <EXTI15_10_IRQHandler+0xbc>)
 8000bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b03      	ldr	r3, [pc, #12]	@ (8000bdc <EXTI15_10_IRQHandler+0xc0>)
 8000bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bd2:	4798      	blx	r3
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010400 	.word	0x40010400
 8000bdc:	20000020 	.word	0x20000020

08000be0 <Get_CRLH_Position>:

/********************************************************************************************************************************************/
                                              /*GENERIC FUNCTIONS*/
/********************************************************************************************************************************************/

uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000bf0:	f000 80a5 	beq.w	8000d3e <Get_CRLH_Position+0x15e>
 8000bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000bf8:	f300 80a3 	bgt.w	8000d42 <Get_CRLH_Position+0x162>
 8000bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c00:	f000 809b 	beq.w	8000d3a <Get_CRLH_Position+0x15a>
 8000c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c08:	f300 809b 	bgt.w	8000d42 <Get_CRLH_Position+0x162>
 8000c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c10:	f000 8091 	beq.w	8000d36 <Get_CRLH_Position+0x156>
 8000c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c18:	f300 8093 	bgt.w	8000d42 <Get_CRLH_Position+0x162>
 8000c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c20:	f000 8087 	beq.w	8000d32 <Get_CRLH_Position+0x152>
 8000c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c28:	f300 808b 	bgt.w	8000d42 <Get_CRLH_Position+0x162>
 8000c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c30:	d07d      	beq.n	8000d2e <Get_CRLH_Position+0x14e>
 8000c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c36:	f300 8084 	bgt.w	8000d42 <Get_CRLH_Position+0x162>
 8000c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c3e:	d074      	beq.n	8000d2a <Get_CRLH_Position+0x14a>
 8000c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c44:	dc7d      	bgt.n	8000d42 <Get_CRLH_Position+0x162>
 8000c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c4a:	d06c      	beq.n	8000d26 <Get_CRLH_Position+0x146>
 8000c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c50:	dc77      	bgt.n	8000d42 <Get_CRLH_Position+0x162>
 8000c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c56:	d064      	beq.n	8000d22 <Get_CRLH_Position+0x142>
 8000c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c5c:	dc71      	bgt.n	8000d42 <Get_CRLH_Position+0x162>
 8000c5e:	2b80      	cmp	r3, #128	@ 0x80
 8000c60:	d05d      	beq.n	8000d1e <Get_CRLH_Position+0x13e>
 8000c62:	2b80      	cmp	r3, #128	@ 0x80
 8000c64:	dc6d      	bgt.n	8000d42 <Get_CRLH_Position+0x162>
 8000c66:	2b20      	cmp	r3, #32
 8000c68:	dc48      	bgt.n	8000cfc <Get_CRLH_Position+0x11c>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	dd69      	ble.n	8000d42 <Get_CRLH_Position+0x162>
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	2b1f      	cmp	r3, #31
 8000c72:	d866      	bhi.n	8000d42 <Get_CRLH_Position+0x162>
 8000c74:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <Get_CRLH_Position+0x9c>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000d03 	.word	0x08000d03
 8000c80:	08000d07 	.word	0x08000d07
 8000c84:	08000d43 	.word	0x08000d43
 8000c88:	08000d0b 	.word	0x08000d0b
 8000c8c:	08000d43 	.word	0x08000d43
 8000c90:	08000d43 	.word	0x08000d43
 8000c94:	08000d43 	.word	0x08000d43
 8000c98:	08000d0f 	.word	0x08000d0f
 8000c9c:	08000d43 	.word	0x08000d43
 8000ca0:	08000d43 	.word	0x08000d43
 8000ca4:	08000d43 	.word	0x08000d43
 8000ca8:	08000d43 	.word	0x08000d43
 8000cac:	08000d43 	.word	0x08000d43
 8000cb0:	08000d43 	.word	0x08000d43
 8000cb4:	08000d43 	.word	0x08000d43
 8000cb8:	08000d13 	.word	0x08000d13
 8000cbc:	08000d43 	.word	0x08000d43
 8000cc0:	08000d43 	.word	0x08000d43
 8000cc4:	08000d43 	.word	0x08000d43
 8000cc8:	08000d43 	.word	0x08000d43
 8000ccc:	08000d43 	.word	0x08000d43
 8000cd0:	08000d43 	.word	0x08000d43
 8000cd4:	08000d43 	.word	0x08000d43
 8000cd8:	08000d43 	.word	0x08000d43
 8000cdc:	08000d43 	.word	0x08000d43
 8000ce0:	08000d43 	.word	0x08000d43
 8000ce4:	08000d43 	.word	0x08000d43
 8000ce8:	08000d43 	.word	0x08000d43
 8000cec:	08000d43 	.word	0x08000d43
 8000cf0:	08000d43 	.word	0x08000d43
 8000cf4:	08000d43 	.word	0x08000d43
 8000cf8:	08000d17 	.word	0x08000d17
 8000cfc:	2b40      	cmp	r3, #64	@ 0x40
 8000cfe:	d00c      	beq.n	8000d1a <Get_CRLH_Position+0x13a>
 8000d00:	e01f      	b.n	8000d42 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e01e      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	e01c      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	e01a      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	e018      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000d12:	2310      	movs	r3, #16
 8000d14:	e016      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000d16:	2314      	movs	r3, #20
 8000d18:	e014      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000d1a:	2318      	movs	r3, #24
 8000d1c:	e012      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000d1e:	231c      	movs	r3, #28
 8000d20:	e010      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e00e      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000d26:	2304      	movs	r3, #4
 8000d28:	e00c      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	e00a      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	e008      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000d32:	2310      	movs	r3, #16
 8000d34:	e006      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000d36:	2314      	movs	r3, #20
 8000d38:	e004      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000d3a:	2318      	movs	r3, #24
 8000d3c:	e002      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000d3e:	231c      	movs	r3, #28
 8000d40:	e000      	b.n	8000d44 <Get_CRLH_Position+0x164>
		break;
	default:
		return 0;
 8000d42:	2300      	movs	r3, #0
	}
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <MCAL_GPIO_Init>:
 * @param [in]  : GPIOx(x can be A-...-E depending on the device used to selected)
 * @param [in]  : PinConfig pointer  to a GPIO_PinConfig_t structure that contains the config info for the selected GPIO peripheral
 * @retval 	 : None
 * Note		 : STM32F103C6 MCU has GPIO A,B,C,D,E modules but LQFP48 A,B AND PART OF C & D exported as external pins of MCU
  ========================================================================================================================================*/
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]

	// (GPIOx_CRL) Configuration Register Low (configures the lower 8 pins of the GPIO port 0---->7)
	// (GPIOx_CRL) Configuration Register High (configures the higher 8 pins of the GPIO port 8---->15)
	volatile uint32_t* Config_Register = NULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
	uint8_t PIN_Config = 0; //will hold the final 4-bit value that will be written to the CRL or CRH
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75fb      	strb	r3, [r7, #23]
	uint8_t position = Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff3a 	bl	8000be0 <Get_CRLH_Position>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]

	// Select the correct configuration register (CRL or CRH)
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	2bff      	cmp	r3, #255	@ 0xff
 8000d76:	d801      	bhi.n	8000d7c <MCAL_GPIO_Init+0x2c>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	e001      	b.n	8000d80 <MCAL_GPIO_Init+0x30>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	613b      	str	r3, [r7, #16]

	/*Clear MODEx[1:0] and CNFx[1:0]*/
	(*Config_Register) &= ~(0xf <<position);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	210f      	movs	r1, #15
 8000d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8e:	43d2      	mvns	r2, r2
 8000d90:	401a      	ands	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	789b      	ldrb	r3, [r3, #2]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d00b      	beq.n	8000db6 <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d007      	beq.n	8000db6 <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	789b      	ldrb	r3, [r3, #2]
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d003      	beq.n	8000db6 <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	789b      	ldrb	r3, [r3, #2]
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000db2:	2b07      	cmp	r3, #7
 8000db4:	d10e      	bne.n	8000dd4 <MCAL_GPIO_Init+0x84>
	{
		/*SETS MODEx[1:0] and CNFx[1:0]*/
		PIN_Config = ((((PinConfig->GPIO_MODE -4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	789b      	ldrb	r3, [r3, #2]
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	78db      	ldrb	r3, [r3, #3]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	75fb      	strb	r3, [r7, #23]
 8000dd2:	e02c      	b.n	8000e2e <MCAL_GPIO_Init+0xde>

	}
	//if pin is input
	else //MODE = 00 BY DEFUALT
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d003      	beq.n	8000de4 <MCAL_GPIO_Init+0x94>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d107      	bne.n	8000df4 <MCAL_GPIO_Init+0xa4>
		{
			/*SETS MODEx[00] and CNFx[1:0]*/
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0f);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	789b      	ldrb	r3, [r3, #2]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	75fb      	strb	r3, [r7, #23]
 8000df2:	e01c      	b.n	8000e2e <MCAL_GPIO_Init+0xde>

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	789b      	ldrb	r3, [r3, #2]
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d102      	bne.n	8000e02 <MCAL_GPIO_Init+0xb2>
		{
			/*SETS MODEx[00] and CNFx[1:0]*/
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0f);
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	75fb      	strb	r3, [r7, #23]
 8000e00:	e015      	b.n	8000e2e <MCAL_GPIO_Init+0xde>
		}
		else
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | (0x0)) & 0x0f);
 8000e02:	2308      	movs	r3, #8
 8000e04:	75fb      	strb	r3, [r7, #23]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d107      	bne.n	8000e1e <MCAL_GPIO_Init+0xce>
			{
				//incase of pull-up PxODR set to 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	8812      	ldrh	r2, [r2, #0]
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	e007      	b.n	8000e2e <MCAL_GPIO_Init+0xde>
			}else
			{
				//incase of pull-down PxODR clears
				GPIOx->ODR &= ~ (PinConfig->GPIO_PinNumber);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	8812      	ldrh	r2, [r2, #0]
 8000e26:	43d2      	mvns	r2, r2
 8000e28:	401a      	ands	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60da      	str	r2, [r3, #12]
			}
		}

	}
	//write on the CRL or CRH
	(*Config_Register) |= (PIN_Config << position);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	7df9      	ldrb	r1, [r7, #23]
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <MCAL_GPIO_Write_PIN>:
 * @param [in]   : GPIOx(x can be A-...-E depending on the device used to selected)
 * @param [in]   : PinNumber (set according number according to @ref GPIO_PINS_define)
 * @retval 	     : None
 * Note		     : None
 ========================================================================================================================================*/
void MCAL_GPIO_Write_PIN(GPIO_TypeDef* GPIOx,uint16_t PinNumber, uint8_t Value){
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	707b      	strb	r3, [r7, #1]

	if(Value!= GPIO_PIN_RESET){
 8000e58:	787b      	ldrb	r3, [r7, #1]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <MCAL_GPIO_Write_PIN+0x1e>
		//GPIOx->ODR |= PinNumber;

		/*************Or we can use the the BSRR & BRR register***********/

		GPIOx->BSRR = (uint32_t)PinNumber;
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	611a      	str	r2, [r3, #16]
		}else
		{
		GPIOx->BRR = (uint32_t)PinNumber;
		}

	}
 8000e64:	e002      	b.n	8000e6c <MCAL_GPIO_Write_PIN+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	615a      	str	r2, [r3, #20]
	}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <MCAL_GPIO_Write_PORT>:
 * @param [in]    : GPIOx(x can be A-...-E depending on the device used to selected)
 * @param [in]    : Value to be set in the port
 * @retval 	     : None
 * Note		     : None
========================================================================================================================================*/
void MCAL_GPIO_Write_PORT(GPIO_TypeDef* GPIOx,uint16_t Value){
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t) Value;
 8000e82:	887a      	ldrh	r2, [r7, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60da      	str	r2, [r3, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <my_delay>:

unsigned int IRQ_FALG = 0;


void my_delay(int x)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<x ; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	e00b      	b.n	8000eb8 <my_delay+0x26>
	{
		for(j=0; j<255; j++);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	e002      	b.n	8000eac <my_delay+0x1a>
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eb0:	d9f9      	bls.n	8000ea6 <my_delay+0x14>
	for(i=0; i<x ; i++)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d3ef      	bcc.n	8000ea0 <my_delay+0xe>
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <EXTI9PB9_CALLBACK>:

void EXTI9PB9_CALLBACK(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	IRQ_FALG = 1;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <EXTI9PB9_CALLBACK+0x1c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ OF EXTI9 IS OCCURING");
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <EXTI9PB9_CALLBACK+0x20>)
 8000ed8:	f7ff fb80 	bl	80005dc <LCD_WRITE_STRING>
	my_delay(1000);
 8000edc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee0:	f7ff ffd7 	bl	8000e92 <my_delay>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000005c 	.word	0x2000005c
 8000eec:	08001024 	.word	0x08001024

08000ef0 <main>:

int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

	//Enable the clocks
	RCC_GPIOA_CLK_EN();
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <main+0x70>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <main+0x70>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <main+0x70>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a16      	ldr	r2, [pc, #88]	@ (8000f60 <main+0x70>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <main+0x70>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <main+0x70>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000f1a:	f7ff f981 	bl	8000220 <LCD_INIT>
	LCD_clear_screen();
 8000f1e:	f7ff fa71 	bl	8000404 <LCD_clear_screen>

	EXTI_PinCnfig_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI9_PB9;
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <main+0x74>)
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_Rising;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.Ptr_IRQ_CALLBACK = EXTI9PB9_CALLBACK ;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <main+0x78>)
 8000f34:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_ENABLE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_INIT(&EXTI_CFG);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fd32 	bl	80009a8 <MCAL_EXTI_GPIO_INIT>

	IRQ_FALG = 1;
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <main+0x7c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]

	while(1)
	{
		if (IRQ_FALG)
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <main+0x7c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0fb      	beq.n	8000f4a <main+0x5a>
		{
			LCD_clear_screen();
 8000f52:	f7ff fa57 	bl	8000404 <LCD_clear_screen>
			IRQ_FALG = 0;
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <main+0x7c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		if (IRQ_FALG)
 8000f5c:	e7f5      	b.n	8000f4a <main+0x5a>
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000
 8000f64:	08001040 	.word	0x08001040
 8000f68:	08000ecd 	.word	0x08000ecd
 8000f6c:	2000005c 	.word	0x2000005c

08000f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f000 f811 	bl	8000fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff ffa5 	bl	8000ef0 <main>

08000fa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fb4:	08001054 	.word	0x08001054
  ldr r2, =_sbss
 8000fb8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fbc:	20000060 	.word	0x20000060

08000fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_2_IRQHandler>
	...

08000fc4 <__libc_init_array>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	4d0c      	ldr	r5, [pc, #48]	@ (8000ffc <__libc_init_array+0x38>)
 8000fca:	4c0d      	ldr	r4, [pc, #52]	@ (8001000 <__libc_init_array+0x3c>)
 8000fcc:	1b64      	subs	r4, r4, r5
 8000fce:	10a4      	asrs	r4, r4, #2
 8000fd0:	42a6      	cmp	r6, r4
 8000fd2:	d109      	bne.n	8000fe8 <__libc_init_array+0x24>
 8000fd4:	f000 f81a 	bl	800100c <_init>
 8000fd8:	2600      	movs	r6, #0
 8000fda:	4d0a      	ldr	r5, [pc, #40]	@ (8001004 <__libc_init_array+0x40>)
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <__libc_init_array+0x44>)
 8000fde:	1b64      	subs	r4, r4, r5
 8000fe0:	10a4      	asrs	r4, r4, #2
 8000fe2:	42a6      	cmp	r6, r4
 8000fe4:	d105      	bne.n	8000ff2 <__libc_init_array+0x2e>
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fec:	4798      	blx	r3
 8000fee:	3601      	adds	r6, #1
 8000ff0:	e7ee      	b.n	8000fd0 <__libc_init_array+0xc>
 8000ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff6:	4798      	blx	r3
 8000ff8:	3601      	adds	r6, #1
 8000ffa:	e7f2      	b.n	8000fe2 <__libc_init_array+0x1e>
 8000ffc:	0800104c 	.word	0x0800104c
 8001000:	0800104c 	.word	0x0800104c
 8001004:	0800104c 	.word	0x0800104c
 8001008:	08001050 	.word	0x08001050

0800100c <_init>:
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100e:	bf00      	nop
 8001010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001012:	bc08      	pop	{r3}
 8001014:	469e      	mov	lr, r3
 8001016:	4770      	bx	lr

08001018 <_fini>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr
