
Atmel_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f55  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000800  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a0  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046a  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000484  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  7a:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <set_DDR_output>:

void set_DDR_output(volatile uint8_t *DDRx, uint8_t pin){
	*DDRx |= (1 << pin);
}
void set_DDR_input(volatile uint8_t *DDRx, uint8_t pin){
	*DDRx &= ~(1 << pin);
  82:	fc 01       	movw	r30, r24
  84:	40 81       	ld	r20, Z
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <set_DDR_output+0xe>
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	6a 95       	dec	r22
  92:	e2 f7       	brpl	.-8      	; 0x8c <set_DDR_output+0xa>
  94:	24 2b       	or	r18, r20
  96:	20 83       	st	Z, r18
  98:	08 95       	ret

0000009a <set_PORT_high>:
}
void set_PORT_high(volatile uint8_t *PORTx, uint8_t pin){
	*PORTx |= (1 << pin);
  9a:	fc 01       	movw	r30, r24
  9c:	40 81       	ld	r20, Z
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <set_PORT_high+0xe>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <set_PORT_high+0xa>
  ac:	24 2b       	or	r18, r20
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <set_PORT_low>:
}
void set_PORT_low(volatile uint8_t *PORTx, uint8_t pin){
  b2:	fc 01       	movw	r30, r24
	*PORTx &= ~(1 << pin);
  b4:	90 81       	ld	r25, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <set_PORT_low+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <set_PORT_low+0xa>
  c4:	20 95       	com	r18
  c6:	29 23       	and	r18, r25
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret

000000cc <LCD_KICK>:
	 
	 // Step 4: Restore control pins to write mode
	 set_PORT_low(LCD_CTRL_PORT,RW);
	 
	 // Step 5: Reconfigure D7 as output for normal operation
	 set_DDR_output(LCD_DATA_DDR,7);
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	88 e3       	ldi	r24, 0x38	; 56
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 4d 00 	call	0x9a	; 0x9a <set_PORT_high>
  d6:	00 00       	nop
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 59 00 	call	0xb2	; 0xb2 <set_PORT_low>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_KICK+0x18>
  e4:	08 95       	ret

000000e6 <LCD_WRITE_COMMAND>:
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);// Entry mode: increment cursor, no shift
	 LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
	 
}

void LCD_WRITE_COMMAND(uint8_t command){
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
	set_PORT_low(LCD_CTRL_PORT,RS); // RS = 0 (Command mode)
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 59 00 	call	0xb2	; 0xb2 <set_PORT_low>
	set_PORT_low(LCD_CTRL_PORT,RW);  // RW = 0 (Write mode)
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	88 e3       	ldi	r24, 0x38	; 56
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 59 00 	call	0xb2	; 0xb2 <set_PORT_low>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (command & 0xF0); //// Send higher nibble
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	9c 2f       	mov	r25, r28
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	89 2b       	or	r24, r25
 108:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK(); 
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_KICK>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (command << 4 ); //// Send lower nibble	
 10e:	2b b3       	in	r18, 0x1b	; 27
 110:	30 e1       	ldi	r19, 0x10	; 16
 112:	c3 9f       	mul	r28, r19
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	92 2f       	mov	r25, r18
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	89 2b       	or	r24, r25
 11e:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK(); 
 120:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_KICK>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	83 ef       	ldi	r24, 0xF3	; 243
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_WRITE_COMMAND+0x42>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_WRITE_COMMAND+0x48>
 12e:	00 00       	nop
	_delay_ms(2);
}
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <LCD_CLEAR>:


#include <util/delay.h>

void LCD_CLEAR(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WRITE_COMMAND>
 13a:	08 95       	ret

0000013c <LCD_INIT>:
	 set_DDR_output(LCD_DATA_DDR,7);
	
}
void LCD_INIT(void){
	// Step 1: Configure control pins (RS, RW, EN) as output
	set_DDR_output(LCD_CTRL_DDR, RS);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	87 e3       	ldi	r24, 0x37	; 55
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 41 00 	call	0x82	; 0x82 <set_DDR_output>
	set_DDR_output(LCD_CTRL_DDR, RW);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	87 e3       	ldi	r24, 0x37	; 55
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 41 00 	call	0x82	; 0x82 <set_DDR_output>
	set_DDR_output(LCD_CTRL_DDR, EN);
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	87 e3       	ldi	r24, 0x37	; 55
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 41 00 	call	0x82	; 0x82 <set_DDR_output>
	// Step 2: Configure data pins (D4-D7) as output
	*LCD_DATA_DDR = 0XF0; 
 15a:	80 ef       	ldi	r24, 0xF0	; 240
 15c:	8a bb       	out	0x1a, r24	; 26
 15e:	83 ed       	ldi	r24, 0xD3	; 211
 160:	90 e3       	ldi	r25, 0x30	; 48
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_INIT+0x26>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_INIT+0x2c>
 168:	00 00       	nop
	// Step 3: Wait for LCD to power up
	_delay_ms(50);
	// Step 4: Switch to 4-bit mode
	LCD_WRITE_COMMAND(0x02);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WRITE_COMMAND>
 170:	81 ee       	ldi	r24, 0xE1	; 225
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_INIT+0x38>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_INIT+0x3e>
 17a:	00 00       	nop
	_delay_ms(5);
	// Step 5: Configure the LCD
	 LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);// 4-bit mode, 2 lines, 5x8 font
 17c:	88 e2       	ldi	r24, 0x28	; 40
 17e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);// Display on, cursor on, blink on
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WRITE_COMMAND>
	 LCD_CLEAR();
 188:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_CLEAR>
	  
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);// Entry mode: increment cursor, no shift
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WRITE_COMMAND>
 198:	08 95       	ret

0000019a <LCD_GO_TO_XY>:
}

void LCD_GO_TO_XY(int line, int pos){
	//we have two lines (2 row) and 0-15 position
	uint8_t position;
	if(line == 1)
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	19 f4       	brne	.+6      	; 0x1a4 <LCD_GO_TO_XY+0xa>
	{
		position = LCD_BEGIN_AT_FIRST_ROW + pos;
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	86 0f       	add	r24, r22
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <LCD_GO_TO_XY+0xe>
	}else
	{
		position = LCD_BEGIN_AT_SECOND_ROW + pos;
 1a4:	80 ec       	ldi	r24, 0xC0	; 192
 1a6:	86 0f       	add	r24, r22
	}
	LCD_WRITE_COMMAND(position);
 1a8:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WRITE_COMMAND>
 1ac:	08 95       	ret

000001ae <LCD_WRITE_CHAR>:
	}

void LCD_WRITE_CHAR(uint8_t data){
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	// Step 1: Set RS = 1 (Data Mode), RW = 0 (Write Mode)
	set_PORT_high(LCD_CTRL_PORT,RS);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 4d 00 	call	0x9a	; 0x9a <set_PORT_high>
	set_PORT_low(LCD_CTRL_PORT,RW);
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	88 e3       	ldi	r24, 0x38	; 56
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 59 00 	call	0xb2	; 0xb2 <set_PORT_low>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (data & 0xF0); //// Send higher nibble
 1c6:	8b b3       	in	r24, 0x1b	; 27
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	9c 2f       	mov	r25, r28
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	89 2b       	or	r24, r25
 1d0:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 1d2:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_KICK>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (data << 4 ); //// Send lower nibble
 1d6:	2b b3       	in	r18, 0x1b	; 27
 1d8:	30 e1       	ldi	r19, 0x10	; 16
 1da:	c3 9f       	mul	r28, r19
 1dc:	c0 01       	movw	r24, r0
 1de:	11 24       	eor	r1, r1
 1e0:	92 2f       	mov	r25, r18
 1e2:	9f 70       	andi	r25, 0x0F	; 15
 1e4:	89 2b       	or	r24, r25
 1e6:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 1e8:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_KICK>
 1ec:	83 ef       	ldi	r24, 0xF3	; 243
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_WRITE_CHAR+0x42>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_WRITE_CHAR+0x48>
 1f6:	00 00       	nop
	_delay_ms(2);
}
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* data){
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	fc 01       	movw	r30, r24
	int counter = 0; //the counter we used here keeps track of how many characters have been written
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
	while(*data != '\0'){ //our loop is on as long as the current character is not '\0' (end of string)
 20a:	28 c0       	rjmp	.+80     	; 0x25c <LCD_WRITE_STRING+0x60>
		counter ++;
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	2f eb       	ldi	r18, 0xBF	; 191
 210:	84 ed       	ldi	r24, 0xD4	; 212
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <LCD_WRITE_STRING+0x18>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_WRITE_STRING+0x22>
 21e:	00 00       	nop
		_delay_ms(600);
		LCD_WRITE_CHAR(*data++);// write the character and move to the next one
 220:	8f 01       	movw	r16, r30
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	1f 4f       	sbci	r17, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_WRITE_CHAR>
		if(counter == 16){ //if 16 char have been written we move to the second row
 22c:	c0 31       	cpi	r28, 0x10	; 16
 22e:	d1 05       	cpc	r29, r1
 230:	39 f4       	brne	.+14     	; 0x240 <LCD_WRITE_STRING+0x44>
			LCD_GO_TO_XY(2, 0);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_GO_TO_XY>
 23e:	0d c0       	rjmp	.+26     	; 0x25a <LCD_WRITE_STRING+0x5e>
		}
		else if(counter == 32){//if 32 char have been written we clear the screen and start all over again from the first row
 240:	c0 32       	cpi	r28, 0x20	; 32
 242:	d1 05       	cpc	r29, r1
 244:	51 f4       	brne	.+20     	; 0x25a <LCD_WRITE_STRING+0x5e>
			LCD_CLEAR();
 246:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_CLEAR>
			LCD_GO_TO_XY(1,0);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_GO_TO_XY>
			counter = 0;
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	f8 01       	movw	r30, r16
	_delay_ms(2);
}

void LCD_WRITE_STRING(char* data){
	int counter = 0; //the counter we used here keeps track of how many characters have been written
	while(*data != '\0'){ //our loop is on as long as the current character is not '\0' (end of string)
 25c:	80 81       	ld	r24, Z
 25e:	81 11       	cpse	r24, r1
 260:	d5 cf       	rjmp	.-86     	; 0x20c <LCD_WRITE_STRING+0x10>
			LCD_CLEAR();
			LCD_GO_TO_XY(1,0);
			counter = 0;
		}
	}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
 
int main(void)
{
     LCD_INIT();
 26c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_INIT>
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	85 ea       	ldi	r24, 0xA5	; 165
 274:	9e e0       	ldi	r25, 0x0E	; 14
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0xa>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x14>
 280:	00 00       	nop
	  _delay_ms(600);
	 LCD_CLEAR();
 282:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_CLEAR>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	80 e7       	ldi	r24, 0x70	; 112
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x20>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x2a>
 296:	00 00       	nop
	 _delay_ms(100);
	  LCD_WRITE_STRING("Learn In Depth");
 298:	80 e6       	ldi	r24, 0x60	; 96
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_WRITE_STRING>
	  LCD_GO_TO_XY(2,0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_GO_TO_XY>
	  LCD_WRITE_STRING("ATMEGA32 DRIVERS");
 2ac:	8f e6       	ldi	r24, 0x6F	; 111
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_WRITE_STRING>
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0x48>

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
