
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ee8  08000ee8  00001ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef4  08000ef4  00001efc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ef4  08000ef4  00001efc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ef4  08000efc  00001efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef4  08000ef4  00001ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ef8  08000ef8  00001ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000efc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000efc  00002060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011aa  00000000  00000000  00001f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000609  00000000  00000000  000030cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000998  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00004070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00004208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000b51  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000023d5  00000000  00000000  00004ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000993a  00000000  00000000  0000727e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000508  00000000  00000000  00010bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ed0 	.word	0x08000ed0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ed0 	.word	0x08000ed0

08000170 <my_wait>:

#include "lcd.h"

GPIO_PinConfig_t PinCfg;
void my_wait(unsigned int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0; i<x ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <my_wait+0x26>
	{
		for(j=0; j<255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <my_wait+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	@ 0xfe
 800018e:	d9f9      	bls.n	8000184 <my_wait+0x14>
	for(i=0; i<x ; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <my_wait+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_KICK>:

void LCD_KICK(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	//Set EN pin LOW (end of the pulse)
	MCAL_GPIO_Write_PIN(LCD_CONTROL, ENABLE_SWITCH, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001b6:	4807      	ldr	r0, [pc, #28]	@ (80001d4 <LCD_KICK+0x28>)
 80001b8:	f000 fdcb 	bl	8000d52 <MCAL_GPIO_Write_PIN>
	//Wait for a short time (to ensure the LCD processes the signal)
	my_wait(10);
 80001bc:	200a      	movs	r0, #10
 80001be:	f7ff ffd7 	bl	8000170 <my_wait>
	//Set EN pin HIGH (start of the pulse)
	//ENABLE_SWITCH : PIN3, LCD_CONTROL: PORTB
	MCAL_GPIO_Write_PIN(LCD_CONTROL, ENABLE_SWITCH, GPIO_PIN_RESET);
 80001c2:	2200      	movs	r2, #0
 80001c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001c8:	4802      	ldr	r0, [pc, #8]	@ (80001d4 <LCD_KICK+0x28>)
 80001ca:	f000 fdc2 	bl	8000d52 <MCAL_GPIO_Write_PIN>

}  //The LCD expects the EN pin to transition from low (0) to high (1) and then back to low (0) . This transition is called an Enable pulse .
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800

080001d8 <LCD_WRITE_COMMAND>:
// it tells the LCD to process the data or command that has been sent to it.

void LCD_WRITE_COMMAND(unsigned char command)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	LCD_IS_BUSY();
 80001e2:	f000 f8ef 	bl	80003c4 <LCD_IS_BUSY>
	//we put command to data port A
	MCAL_GPIO_Write_PORT(LCD_CONTROL, command);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	480b      	ldr	r0, [pc, #44]	@ (800021c <LCD_WRITE_COMMAND+0x44>)
 80001ee:	f000 fdc7 	bl	8000d80 <MCAL_GPIO_Write_PORT>
	//we set LCD to Write & command mode
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001f8:	4808      	ldr	r0, [pc, #32]	@ (800021c <LCD_WRITE_COMMAND+0x44>)
 80001fa:	f000 fdaa 	bl	8000d52 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RS_SWITCH, GPIO_PIN_RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000204:	4805      	ldr	r0, [pc, #20]	@ (800021c <LCD_WRITE_COMMAND+0x44>)
 8000206:	f000 fda4 	bl	8000d52 <MCAL_GPIO_Write_PIN>
	my_wait(1);
 800020a:	2001      	movs	r0, #1
 800020c:	f7ff ffb0 	bl	8000170 <my_wait>
	LCD_KICK(); //send the pulse
 8000210:	f7ff ffcc 	bl	80001ac <LCD_KICK>
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40010800 	.word	0x40010800

08000220 <LCD_INIT>:



void LCD_INIT()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	my_wait(20);;
 8000224:	2014      	movs	r0, #20
 8000226:	f7ff ffa3 	bl	8000170 <my_wait>
	RCC_GPIOA_CLK_EN();
 800022a:	4b5e      	ldr	r3, [pc, #376]	@ (80003a4 <LCD_INIT+0x184>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a5d      	ldr	r2, [pc, #372]	@ (80003a4 <LCD_INIT+0x184>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6193      	str	r3, [r2, #24]

	//my_wait(20); //we will wait for LCD to power on

	//ENABLE_SWITCH, RS_SWITCH and RW_SWITCH are set to be output floating

	PinCfg.GPIO_PinNumber = ENABLE_SWITCH;
 8000236:	4b5c      	ldr	r3, [pc, #368]	@ (80003a8 <LCD_INIT+0x188>)
 8000238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800023c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023e:	4b5a      	ldr	r3, [pc, #360]	@ (80003a8 <LCD_INIT+0x188>)
 8000240:	2204      	movs	r2, #4
 8000242:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000244:	4b58      	ldr	r3, [pc, #352]	@ (80003a8 <LCD_INIT+0x188>)
 8000246:	2201      	movs	r2, #1
 8000248:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800024a:	4957      	ldr	r1, [pc, #348]	@ (80003a8 <LCD_INIT+0x188>)
 800024c:	4857      	ldr	r0, [pc, #348]	@ (80003ac <LCD_INIT+0x18c>)
 800024e:	f000 fd03 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000252:	4b55      	ldr	r3, [pc, #340]	@ (80003a8 <LCD_INIT+0x188>)
 8000254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000258:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800025a:	4b53      	ldr	r3, [pc, #332]	@ (80003a8 <LCD_INIT+0x188>)
 800025c:	2204      	movs	r2, #4
 800025e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000260:	4b51      	ldr	r3, [pc, #324]	@ (80003a8 <LCD_INIT+0x188>)
 8000262:	2201      	movs	r2, #1
 8000264:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000266:	4950      	ldr	r1, [pc, #320]	@ (80003a8 <LCD_INIT+0x188>)
 8000268:	4850      	ldr	r0, [pc, #320]	@ (80003ac <LCD_INIT+0x18c>)
 800026a:	f000 fcf5 	bl	8000c58 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = RW_SWITCH;
 800026e:	4b4e      	ldr	r3, [pc, #312]	@ (80003a8 <LCD_INIT+0x188>)
 8000270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000274:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000276:	4b4c      	ldr	r3, [pc, #304]	@ (80003a8 <LCD_INIT+0x188>)
 8000278:	2204      	movs	r2, #4
 800027a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800027c:	4b4a      	ldr	r3, [pc, #296]	@ (80003a8 <LCD_INIT+0x188>)
 800027e:	2201      	movs	r2, #1
 8000280:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000282:	4949      	ldr	r1, [pc, #292]	@ (80003a8 <LCD_INIT+0x188>)
 8000284:	4849      	ldr	r0, [pc, #292]	@ (80003ac <LCD_INIT+0x18c>)
 8000286:	f000 fce7 	bl	8000c58 <MCAL_GPIO_Init>


	//my_wait(20);

	//PIN (0 ---> 7) PORTA set to output MODE
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800028a:	4b47      	ldr	r3, [pc, #284]	@ (80003a8 <LCD_INIT+0x188>)
 800028c:	2201      	movs	r2, #1
 800028e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000290:	4b45      	ldr	r3, [pc, #276]	@ (80003a8 <LCD_INIT+0x188>)
 8000292:	2204      	movs	r2, #4
 8000294:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000296:	4b44      	ldr	r3, [pc, #272]	@ (80003a8 <LCD_INIT+0x188>)
 8000298:	2201      	movs	r2, #1
 800029a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800029c:	4942      	ldr	r1, [pc, #264]	@ (80003a8 <LCD_INIT+0x188>)
 800029e:	4843      	ldr	r0, [pc, #268]	@ (80003ac <LCD_INIT+0x18c>)
 80002a0:	f000 fcda 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80002a4:	4b40      	ldr	r3, [pc, #256]	@ (80003a8 <LCD_INIT+0x188>)
 80002a6:	2202      	movs	r2, #2
 80002a8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002aa:	4b3f      	ldr	r3, [pc, #252]	@ (80003a8 <LCD_INIT+0x188>)
 80002ac:	2204      	movs	r2, #4
 80002ae:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002b0:	4b3d      	ldr	r3, [pc, #244]	@ (80003a8 <LCD_INIT+0x188>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80002b6:	493c      	ldr	r1, [pc, #240]	@ (80003a8 <LCD_INIT+0x188>)
 80002b8:	483c      	ldr	r0, [pc, #240]	@ (80003ac <LCD_INIT+0x18c>)
 80002ba:	f000 fccd 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80002be:	4b3a      	ldr	r3, [pc, #232]	@ (80003a8 <LCD_INIT+0x188>)
 80002c0:	2204      	movs	r2, #4
 80002c2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002c4:	4b38      	ldr	r3, [pc, #224]	@ (80003a8 <LCD_INIT+0x188>)
 80002c6:	2204      	movs	r2, #4
 80002c8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002ca:	4b37      	ldr	r3, [pc, #220]	@ (80003a8 <LCD_INIT+0x188>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80002d0:	4935      	ldr	r1, [pc, #212]	@ (80003a8 <LCD_INIT+0x188>)
 80002d2:	4836      	ldr	r0, [pc, #216]	@ (80003ac <LCD_INIT+0x18c>)
 80002d4:	f000 fcc0 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80002d8:	4b33      	ldr	r3, [pc, #204]	@ (80003a8 <LCD_INIT+0x188>)
 80002da:	2208      	movs	r2, #8
 80002dc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002de:	4b32      	ldr	r3, [pc, #200]	@ (80003a8 <LCD_INIT+0x188>)
 80002e0:	2204      	movs	r2, #4
 80002e2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002e4:	4b30      	ldr	r3, [pc, #192]	@ (80003a8 <LCD_INIT+0x188>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80002ea:	492f      	ldr	r1, [pc, #188]	@ (80003a8 <LCD_INIT+0x188>)
 80002ec:	482f      	ldr	r0, [pc, #188]	@ (80003ac <LCD_INIT+0x18c>)
 80002ee:	f000 fcb3 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	@ (80003a8 <LCD_INIT+0x188>)
 80002f4:	2210      	movs	r2, #16
 80002f6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	@ (80003a8 <LCD_INIT+0x188>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	@ (80003a8 <LCD_INIT+0x188>)
 8000300:	2201      	movs	r2, #1
 8000302:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000304:	4928      	ldr	r1, [pc, #160]	@ (80003a8 <LCD_INIT+0x188>)
 8000306:	4829      	ldr	r0, [pc, #164]	@ (80003ac <LCD_INIT+0x18c>)
 8000308:	f000 fca6 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800030c:	4b26      	ldr	r3, [pc, #152]	@ (80003a8 <LCD_INIT+0x188>)
 800030e:	2220      	movs	r2, #32
 8000310:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000312:	4b25      	ldr	r3, [pc, #148]	@ (80003a8 <LCD_INIT+0x188>)
 8000314:	2204      	movs	r2, #4
 8000316:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000318:	4b23      	ldr	r3, [pc, #140]	@ (80003a8 <LCD_INIT+0x188>)
 800031a:	2201      	movs	r2, #1
 800031c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800031e:	4922      	ldr	r1, [pc, #136]	@ (80003a8 <LCD_INIT+0x188>)
 8000320:	4822      	ldr	r0, [pc, #136]	@ (80003ac <LCD_INIT+0x18c>)
 8000322:	f000 fc99 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000326:	4b20      	ldr	r3, [pc, #128]	@ (80003a8 <LCD_INIT+0x188>)
 8000328:	2240      	movs	r2, #64	@ 0x40
 800032a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800032c:	4b1e      	ldr	r3, [pc, #120]	@ (80003a8 <LCD_INIT+0x188>)
 800032e:	2204      	movs	r2, #4
 8000330:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000332:	4b1d      	ldr	r3, [pc, #116]	@ (80003a8 <LCD_INIT+0x188>)
 8000334:	2201      	movs	r2, #1
 8000336:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000338:	491b      	ldr	r1, [pc, #108]	@ (80003a8 <LCD_INIT+0x188>)
 800033a:	481c      	ldr	r0, [pc, #112]	@ (80003ac <LCD_INIT+0x18c>)
 800033c:	f000 fc8c 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000340:	4b19      	ldr	r3, [pc, #100]	@ (80003a8 <LCD_INIT+0x188>)
 8000342:	2280      	movs	r2, #128	@ 0x80
 8000344:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000346:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <LCD_INIT+0x188>)
 8000348:	2204      	movs	r2, #4
 800034a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800034c:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <LCD_INIT+0x188>)
 800034e:	2201      	movs	r2, #1
 8000350:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000352:	4915      	ldr	r1, [pc, #84]	@ (80003a8 <LCD_INIT+0x188>)
 8000354:	4815      	ldr	r0, [pc, #84]	@ (80003ac <LCD_INIT+0x18c>)
 8000356:	f000 fc7f 	bl	8000c58 <MCAL_GPIO_Init>

	MCAL_GPIO_Write_PIN(LCD_CONTROL, ENABLE_SWITCH, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000360:	4812      	ldr	r0, [pc, #72]	@ (80003ac <LCD_INIT+0x18c>)
 8000362:	f000 fcf6 	bl	8000d52 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RS_SWITCH, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800036c:	480f      	ldr	r0, [pc, #60]	@ (80003ac <LCD_INIT+0x18c>)
 800036e:	f000 fcf0 	bl	8000d52 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LCD_INIT+0x18c>)
 800037a:	f000 fcea 	bl	8000d52 <MCAL_GPIO_Write_PIN>

	my_wait(15);
 800037e:	200f      	movs	r0, #15
 8000380:	f7ff fef6 	bl	8000170 <my_wait>


	LCD_clear_screen(); // we clear the display
 8000384:	f000 f814 	bl	80003b0 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000388:	2038      	movs	r0, #56	@ 0x38
 800038a:	f7ff ff25 	bl	80001d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800038e:	2006      	movs	r0, #6
 8000390:	f7ff ff22 	bl	80001d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
 8000394:	2080      	movs	r0, #128	@ 0x80
 8000396:	f7ff ff1f 	bl	80001d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800039a:	200f      	movs	r0, #15
 800039c:	f7ff ff1c 	bl	80001d8 <LCD_WRITE_COMMAND>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	2000001c 	.word	0x2000001c
 80003ac:	40010800 	.word	0x40010800

080003b0 <LCD_clear_screen>:
}



void LCD_clear_screen()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff ff0f 	bl	80001d8 <LCD_WRITE_COMMAND>
	my_wait(2);
 80003ba:	2002      	movs	r0, #2
 80003bc:	f7ff fed8 	bl	8000170 <my_wait>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <LCD_IS_BUSY>:

void LCD_IS_BUSY()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
	//a. set the PORTA (0--->7)to receive data on the micro controller as input

	GPIO_PinConfig_t PinCfg;
	//PIN (0 ---> 7) PORTA set to INPUT MODE
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80003ca:	2301      	movs	r3, #1
 80003cc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003ce:	2301      	movs	r3, #1
 80003d0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4619      	mov	r1, r3
 80003d6:	4859      	ldr	r0, [pc, #356]	@ (800053c <LCD_IS_BUSY+0x178>)
 80003d8:	f000 fc3e 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80003dc:	2302      	movs	r3, #2
 80003de:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003e0:	2301      	movs	r3, #1
 80003e2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4619      	mov	r1, r3
 80003e8:	4854      	ldr	r0, [pc, #336]	@ (800053c <LCD_IS_BUSY+0x178>)
 80003ea:	f000 fc35 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80003ee:	2304      	movs	r3, #4
 80003f0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003f2:	2301      	movs	r3, #1
 80003f4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	4850      	ldr	r0, [pc, #320]	@ (800053c <LCD_IS_BUSY+0x178>)
 80003fc:	f000 fc2c 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000400:	2308      	movs	r3, #8
 8000402:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000404:	2301      	movs	r3, #1
 8000406:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4619      	mov	r1, r3
 800040c:	484b      	ldr	r0, [pc, #300]	@ (800053c <LCD_IS_BUSY+0x178>)
 800040e:	f000 fc23 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000412:	2310      	movs	r3, #16
 8000414:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000416:	2301      	movs	r3, #1
 8000418:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	4847      	ldr	r0, [pc, #284]	@ (800053c <LCD_IS_BUSY+0x178>)
 8000420:	f000 fc1a 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000424:	2320      	movs	r3, #32
 8000426:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000428:	2301      	movs	r3, #1
 800042a:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	4842      	ldr	r0, [pc, #264]	@ (800053c <LCD_IS_BUSY+0x178>)
 8000432:	f000 fc11 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000436:	2340      	movs	r3, #64	@ 0x40
 8000438:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800043a:	2301      	movs	r3, #1
 800043c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4619      	mov	r1, r3
 8000442:	483e      	ldr	r0, [pc, #248]	@ (800053c <LCD_IS_BUSY+0x178>)
 8000444:	f000 fc08 	bl	8000c58 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800044c:	2301      	movs	r3, #1
 800044e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4619      	mov	r1, r3
 8000454:	4839      	ldr	r0, [pc, #228]	@ (800053c <LCD_IS_BUSY+0x178>)
 8000456:	f000 fbff 	bl	8000c58 <MCAL_GPIO_Init>



	//b. put the LCD in read mode (RW on)
	//MCU reads data from LCD
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000460:	4836      	ldr	r0, [pc, #216]	@ (800053c <LCD_IS_BUSY+0x178>)
 8000462:	f000 fc76 	bl	8000d52 <MCAL_GPIO_Write_PIN>

	//c. put the LCD in command mode (RS off)
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RS_SWITCH, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800046c:	4833      	ldr	r0, [pc, #204]	@ (800053c <LCD_IS_BUSY+0x178>)
 800046e:	f000 fc70 	bl	8000d52 <MCAL_GPIO_Write_PIN>

	LCD_KICK();  // Send Enable pulse to read busy flag
 8000472:	f7ff fe9b 	bl	80001ac <LCD_KICK>

	//DDR_LCD_PORT = 0xFF;// we return the LCD port to output
	//
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000476:	2301      	movs	r3, #1
 8000478:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800047a:	2304      	movs	r3, #4
 800047c:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800047e:	2301      	movs	r3, #1
 8000480:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	482d      	ldr	r0, [pc, #180]	@ (800053c <LCD_IS_BUSY+0x178>)
 8000488:	f000 fbe6 	bl	8000c58 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800048c:	2302      	movs	r3, #2
 800048e:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000490:	2304      	movs	r3, #4
 8000492:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000494:	2301      	movs	r3, #1
 8000496:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	4827      	ldr	r0, [pc, #156]	@ (800053c <LCD_IS_BUSY+0x178>)
 800049e:	f000 fbdb 	bl	8000c58 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80004a2:	2304      	movs	r3, #4
 80004a4:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a6:	2304      	movs	r3, #4
 80004a8:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80004aa:	2301      	movs	r3, #1
 80004ac:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4822      	ldr	r0, [pc, #136]	@ (800053c <LCD_IS_BUSY+0x178>)
 80004b4:	f000 fbd0 	bl	8000c58 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80004b8:	2308      	movs	r3, #8
 80004ba:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004bc:	2304      	movs	r3, #4
 80004be:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80004c0:	2301      	movs	r3, #1
 80004c2:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	481c      	ldr	r0, [pc, #112]	@ (800053c <LCD_IS_BUSY+0x178>)
 80004ca:	f000 fbc5 	bl	8000c58 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80004ce:	2310      	movs	r3, #16
 80004d0:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004d2:	2304      	movs	r3, #4
 80004d4:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80004d6:	2301      	movs	r3, #1
 80004d8:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4817      	ldr	r0, [pc, #92]	@ (800053c <LCD_IS_BUSY+0x178>)
 80004e0:	f000 fbba 	bl	8000c58 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80004e4:	2320      	movs	r3, #32
 80004e6:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004e8:	2304      	movs	r3, #4
 80004ea:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80004ec:	2301      	movs	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4811      	ldr	r0, [pc, #68]	@ (800053c <LCD_IS_BUSY+0x178>)
 80004f6:	f000 fbaf 	bl	8000c58 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80004fa:	2340      	movs	r3, #64	@ 0x40
 80004fc:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004fe:	2304      	movs	r3, #4
 8000500:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000502:	2301      	movs	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	480c      	ldr	r0, [pc, #48]	@ (800053c <LCD_IS_BUSY+0x178>)
 800050c:	f000 fba4 	bl	8000c58 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	80bb      	strh	r3, [r7, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000514:	2304      	movs	r3, #4
 8000516:	71bb      	strb	r3, [r7, #6]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000518:	2301      	movs	r3, #1
 800051a:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CONTROL,&PinCfg);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4806      	ldr	r0, [pc, #24]	@ (800053c <LCD_IS_BUSY+0x178>)
 8000522:	f000 fb99 	bl	8000c58 <MCAL_GPIO_Init>

	//LCD_CONTROL &= ~(1<<RW_SWITCH); // set write mode, the MCU writes to the LCD.
	MCAL_GPIO_Write_PIN(LCD_CONTROL, RW_SWITCH, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800052c:	4803      	ldr	r0, [pc, #12]	@ (800053c <LCD_IS_BUSY+0x178>)
 800052e:	f000 fc10 	bl	8000d52 <MCAL_GPIO_Write_PIN>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010800 	.word	0x40010800

08000540 <Enable_NVIC>:

/********************************************************************************************************************************************/
/*GENERIC FUNCTIONS*/
/********************************************************************************************************************************************/

void Enable_NVIC (uint16_t IRQ){
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d854      	bhi.n	80005fa <Enable_NVIC+0xba>
 8000550:	a201      	add	r2, pc, #4	@ (adr r2, 8000558 <Enable_NVIC+0x18>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000599 	.word	0x08000599
 800055c:	080005a7 	.word	0x080005a7
 8000560:	080005b5 	.word	0x080005b5
 8000564:	080005c3 	.word	0x080005c3
 8000568:	080005d1 	.word	0x080005d1
 800056c:	080005df 	.word	0x080005df
 8000570:	080005df 	.word	0x080005df
 8000574:	080005df 	.word	0x080005df
 8000578:	080005df 	.word	0x080005df
 800057c:	080005df 	.word	0x080005df
 8000580:	080005ed 	.word	0x080005ed
 8000584:	080005ed 	.word	0x080005ed
 8000588:	080005ed 	.word	0x080005ed
 800058c:	080005ed 	.word	0x080005ed
 8000590:	080005ed 	.word	0x080005ed
 8000594:	080005ed 	.word	0x080005ed
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <Enable_NVIC+0xc4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a19      	ldr	r2, [pc, #100]	@ (8000604 <Enable_NVIC+0xc4>)
 800059e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a2:	6013      	str	r3, [r2, #0]
		break;
 80005a4:	e029      	b.n	80005fa <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <Enable_NVIC+0xc4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <Enable_NVIC+0xc4>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b0:	6013      	str	r3, [r2, #0]
		break;
 80005b2:	e022      	b.n	80005fa <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <Enable_NVIC+0xc4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <Enable_NVIC+0xc4>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005be:	6013      	str	r3, [r2, #0]
		break;
 80005c0:	e01b      	b.n	80005fa <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <Enable_NVIC+0xc4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000604 <Enable_NVIC+0xc4>)
 80005c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005cc:	6013      	str	r3, [r2, #0]
		break;
 80005ce:	e014      	b.n	80005fa <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <Enable_NVIC+0xc4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <Enable_NVIC+0xc4>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005da:	6013      	str	r3, [r2, #0]
		break;
 80005dc:	e00d      	b.n	80005fa <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_9_Enable;
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <Enable_NVIC+0xc4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <Enable_NVIC+0xc4>)
 80005e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005e8:	6013      	str	r3, [r2, #0]
		break;
 80005ea:	e006      	b.n	80005fa <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_15_Enable;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <Enable_NVIC+0xc8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <Enable_NVIC+0xc8>)
 80005f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005f6:	6013      	str	r3, [r2, #0]
		break;
 80005f8:	bf00      	nop
	}
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000e104 	.word	0xe000e104

0800060c <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d854      	bhi.n	80006c6 <Disable_NVIC+0xba>
 800061c:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <Disable_NVIC+0x18>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000665 	.word	0x08000665
 8000628:	08000673 	.word	0x08000673
 800062c:	08000681 	.word	0x08000681
 8000630:	0800068f 	.word	0x0800068f
 8000634:	0800069d 	.word	0x0800069d
 8000638:	080006ab 	.word	0x080006ab
 800063c:	080006ab 	.word	0x080006ab
 8000640:	080006ab 	.word	0x080006ab
 8000644:	080006ab 	.word	0x080006ab
 8000648:	080006ab 	.word	0x080006ab
 800064c:	080006b9 	.word	0x080006b9
 8000650:	080006b9 	.word	0x080006b9
 8000654:	080006b9 	.word	0x080006b9
 8000658:	080006b9 	.word	0x080006b9
 800065c:	080006b9 	.word	0x080006b9
 8000660:	080006b9 	.word	0x080006b9
	case 0:
		NVIC_IRQ6_EXTI0_disable;
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <Disable_NVIC+0xc4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a19      	ldr	r2, [pc, #100]	@ (80006d0 <Disable_NVIC+0xc4>)
 800066a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800066e:	6013      	str	r3, [r2, #0]
		break;
 8000670:	e029      	b.n	80006c6 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_disable;
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <Disable_NVIC+0xc4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <Disable_NVIC+0xc4>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067c:	6013      	str	r3, [r2, #0]
		break;
 800067e:	e022      	b.n	80006c6 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_disable;
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <Disable_NVIC+0xc4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Disable_NVIC+0xc4>)
 8000686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800068a:	6013      	str	r3, [r2, #0]
		break;
 800068c:	e01b      	b.n	80006c6 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_disable;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <Disable_NVIC+0xc4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a0f      	ldr	r2, [pc, #60]	@ (80006d0 <Disable_NVIC+0xc4>)
 8000694:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000698:	6013      	str	r3, [r2, #0]
		break;
 800069a:	e014      	b.n	80006c6 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_disable;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <Disable_NVIC+0xc4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0b      	ldr	r2, [pc, #44]	@ (80006d0 <Disable_NVIC+0xc4>)
 80006a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006a6:	6013      	str	r3, [r2, #0]
		break;
 80006a8:	e00d      	b.n	80006c6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_9_disable;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <Disable_NVIC+0xc4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <Disable_NVIC+0xc4>)
 80006b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80006b4:	6013      	str	r3, [r2, #0]
		break;
 80006b6:	e006      	b.n	80006c6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_15_disable;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <Disable_NVIC+0xc8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <Disable_NVIC+0xc8>)
 80006be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006c2:	6013      	str	r3, [r2, #0]
		break;
 80006c4:	bf00      	nop
	}
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	e000e180 	.word	0xe000e180
 80006d4:	e000e184 	.word	0xe000e184

080006d8 <Update_EXTI>:



void Update_EXTI(EXTI_PinCnfig_t* EXTI_Config){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	//1-Configure the GPIO To be alternative function input -> floating input

	GPIO_PinConfig_t PinCfg;
	//update the GPIO PIN to be floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	891b      	ldrh	r3, [r3, #8]
 80006e4:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80006e6:	2301      	movs	r3, #1
 80006e8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_PORT, &PinCfg);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f107 0208 	add.w	r2, r7, #8
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 faaf 	bl	8000c58 <MCAL_GPIO_Init>
	//==========================================================

	//2-update the AFIO to map between EXTI line with port coresponding port (A, B, C, D)
	uint8_t AFIO_EXTICR_INDEX = EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number / 4; // to know EXTI LINE  belong to which register from the for
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	089b      	lsrs	r3, r3, #2
 8000700:	b29b      	uxth	r3, r3
 8000702:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_POSITION = (EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number % 4) * 4; // to get the exact position (4 bit) of EXLI line in the register
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0303 	and.w	r3, r3, #3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	73bb      	strb	r3, [r7, #14]
	//clear the 4 bit
	(AFIO->EXITCR[AFIO_EXTICR_INDEX]) &= ~(0xF<< AFIO_EXTICR_POSITION);
 8000714:	4a5f      	ldr	r2, [pc, #380]	@ (8000894 <Update_EXTI+0x1bc>)
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	3302      	adds	r3, #2
 800071a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	210f      	movs	r1, #15
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	495a      	ldr	r1, [pc, #360]	@ (8000894 <Update_EXTI+0x1bc>)
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	4002      	ands	r2, r0
 8000730:	3302      	adds	r3, #2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//ENABLE THE the 4 bit of the line in the selected port
	(AFIO->EXITCR[AFIO_EXTICR_INDEX]) |= ((AFIO_GPIO_EXTI_MAPPING(EXTI_Config->EXTI_PIN.GPIO_PORT) & 0xF) << AFIO_EXTICR_POSITION);
 8000736:	4a57      	ldr	r2, [pc, #348]	@ (8000894 <Update_EXTI+0x1bc>)
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	3302      	adds	r3, #2
 800073c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4954      	ldr	r1, [pc, #336]	@ (8000898 <Update_EXTI+0x1c0>)
 8000746:	428b      	cmp	r3, r1
 8000748:	d016      	beq.n	8000778 <Update_EXTI+0xa0>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4953      	ldr	r1, [pc, #332]	@ (800089c <Update_EXTI+0x1c4>)
 8000750:	428b      	cmp	r3, r1
 8000752:	d00f      	beq.n	8000774 <Update_EXTI+0x9c>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4951      	ldr	r1, [pc, #324]	@ (80008a0 <Update_EXTI+0x1c8>)
 800075a:	428b      	cmp	r3, r1
 800075c:	d008      	beq.n	8000770 <Update_EXTI+0x98>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4950      	ldr	r1, [pc, #320]	@ (80008a4 <Update_EXTI+0x1cc>)
 8000764:	428b      	cmp	r3, r1
 8000766:	d101      	bne.n	800076c <Update_EXTI+0x94>
 8000768:	2303      	movs	r3, #3
 800076a:	e006      	b.n	800077a <Update_EXTI+0xa2>
 800076c:	2300      	movs	r3, #0
 800076e:	e004      	b.n	800077a <Update_EXTI+0xa2>
 8000770:	2302      	movs	r3, #2
 8000772:	e002      	b.n	800077a <Update_EXTI+0xa2>
 8000774:	2301      	movs	r3, #1
 8000776:	e000      	b.n	800077a <Update_EXTI+0xa2>
 8000778:	2300      	movs	r3, #0
 800077a:	7bb9      	ldrb	r1, [r7, #14]
 800077c:	408b      	lsls	r3, r1
 800077e:	4618      	mov	r0, r3
 8000780:	4944      	ldr	r1, [pc, #272]	@ (8000894 <Update_EXTI+0x1bc>)
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4302      	orrs	r2, r0
 8000786:	3302      	adds	r3, #2
 8000788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==========================================================
	//3- update the rising and falling Edge

	(EXTI->RTSR) &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number); //CLEARING THE RISING REG OF THE LINE
 800078c:	4b46      	ldr	r3, [pc, #280]	@ (80008a8 <Update_EXTI+0x1d0>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	8812      	ldrh	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	2201      	movs	r2, #1
 8000798:	408a      	lsls	r2, r1
 800079a:	43d2      	mvns	r2, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a42      	ldr	r2, [pc, #264]	@ (80008a8 <Update_EXTI+0x1d0>)
 80007a0:	400b      	ands	r3, r1
 80007a2:	6093      	str	r3, [r2, #8]
	(EXTI->FTSR) &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number); // CLEARING THE FALLING REG OF THE LINE
 80007a4:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <Update_EXTI+0x1d0>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	8812      	ldrh	r2, [r2, #0]
 80007ac:	4611      	mov	r1, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	408a      	lsls	r2, r1
 80007b2:	43d2      	mvns	r2, r2
 80007b4:	4611      	mov	r1, r2
 80007b6:	4a3c      	ldr	r2, [pc, #240]	@ (80008a8 <Update_EXTI+0x1d0>)
 80007b8:	400b      	ands	r3, r1
 80007ba:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case ==  EXTI_Trigger_Rising)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7b1b      	ldrb	r3, [r3, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10b      	bne.n	80007dc <Update_EXTI+0x104>
	{

		(EXTI->RTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 80007c4:	4b38      	ldr	r3, [pc, #224]	@ (80008a8 <Update_EXTI+0x1d0>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	8812      	ldrh	r2, [r2, #0]
 80007cc:	4611      	mov	r1, r2
 80007ce:	2201      	movs	r2, #1
 80007d0:	408a      	lsls	r2, r1
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a34      	ldr	r2, [pc, #208]	@ (80008a8 <Update_EXTI+0x1d0>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6093      	str	r3, [r2, #8]
 80007da:	e029      	b.n	8000830 <Update_EXTI+0x158>

	}else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7b1b      	ldrb	r3, [r3, #12]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d10b      	bne.n	80007fc <Update_EXTI+0x124>
	{
		(EXTI->FTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <Update_EXTI+0x1d0>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	8812      	ldrh	r2, [r2, #0]
 80007ec:	4611      	mov	r1, r2
 80007ee:	2201      	movs	r2, #1
 80007f0:	408a      	lsls	r2, r1
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a2c      	ldr	r2, [pc, #176]	@ (80008a8 <Update_EXTI+0x1d0>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	60d3      	str	r3, [r2, #12]
 80007fa:	e019      	b.n	8000830 <Update_EXTI+0x158>

	}else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Ris_Fall)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7b1b      	ldrb	r3, [r3, #12]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d115      	bne.n	8000830 <Update_EXTI+0x158>
	{
		(EXTI->RTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 8000804:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <Update_EXTI+0x1d0>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	4611      	mov	r1, r2
 800080e:	2201      	movs	r2, #1
 8000810:	408a      	lsls	r2, r1
 8000812:	4611      	mov	r1, r2
 8000814:	4a24      	ldr	r2, [pc, #144]	@ (80008a8 <Update_EXTI+0x1d0>)
 8000816:	430b      	orrs	r3, r1
 8000818:	6093      	str	r3, [r2, #8]
		(EXTI->FTSR) |= (1 << EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <Update_EXTI+0x1d0>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	8812      	ldrh	r2, [r2, #0]
 8000822:	4611      	mov	r1, r2
 8000824:	2201      	movs	r2, #1
 8000826:	408a      	lsls	r2, r1
 8000828:	4611      	mov	r1, r2
 800082a:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <Update_EXTI+0x1d0>)
 800082c:	430b      	orrs	r3, r1
 800082e:	60d3      	str	r3, [r2, #12]
	}

	//==========================================================
	//4- update IRQ HANDLING CALLBACK

	GPtr_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number] = EXTI_Config->Ptr_IRQ_CALLBACK;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <Update_EXTI+0x1d4>)
 800083c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//==========================================================
	//5- Enable/disable the IRQ & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b5b      	ldrb	r3, [r3, #13]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d110      	bne.n	800086a <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <Update_EXTI+0x1d0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	8812      	ldrh	r2, [r2, #0]
 8000850:	4611      	mov	r1, r2
 8000852:	2201      	movs	r2, #1
 8000854:	408a      	lsls	r2, r1
 8000856:	4611      	mov	r1, r2
 8000858:	4a13      	ldr	r2, [pc, #76]	@ (80008a8 <Update_EXTI+0x1d0>)
 800085a:	430b      	orrs	r3, r1
 800085c:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe6c 	bl	8000540 <Enable_NVIC>
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);

	}


}
 8000868:	e010      	b.n	800088c <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <Update_EXTI+0x1d0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	8812      	ldrh	r2, [r2, #0]
 8000872:	4611      	mov	r1, r2
 8000874:	2201      	movs	r2, #1
 8000876:	408a      	lsls	r2, r1
 8000878:	43d2      	mvns	r2, r2
 800087a:	4611      	mov	r1, r2
 800087c:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <Update_EXTI+0x1d0>)
 800087e:	400b      	ands	r3, r1
 8000880:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_INPUT_Line_Number);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fec0 	bl	800060c <Disable_NVIC>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40010000 	.word	0x40010000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00
 80008a0:	40011000 	.word	0x40011000
 80008a4:	40011400 	.word	0x40011400
 80008a8:	40010400 	.word	0x40010400
 80008ac:	20000020 	.word	0x20000020

080008b0 <MCAL_EXTI_GPIO_INIT>:
 * Note		     : -STM32F103C6 MCU has GPIO A, B, C, D, E Modules,
                   -STM32F103C6 MCU has GPIO A,B,C,D,E modules but LQFP48 A,B AND PART OF C & D exported as external pins of MCU
                   - Mendatory to enable the RCC clock for AFIO & GPIO
  ========================================================================================================================================*/
void MCAL_EXTI_GPIO_INIT(EXTI_PinCnfig_t* EXIT_Config)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXIT_Config);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff0d 	bl	80006d8 <Update_EXTI>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <EXTI0_IRQHandler>:

/************************************************************************************************/
/**********************************     ISR FUNCTIONS         ***********************************/
/************************************************************************************************/
void EXTI0_IRQHandler (void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<0);
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <EXTI0_IRQHandler+0x1c>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <EXTI0_IRQHandler+0x1c>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[0]();
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <EXTI0_IRQHandler+0x20>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4798      	blx	r3

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010400 	.word	0x40010400
 80008e8:	20000020 	.word	0x20000020

080008ec <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<1);
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <EXTI1_IRQHandler+0x1c>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <EXTI1_IRQHandler+0x1c>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[1]();
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <EXTI1_IRQHandler+0x20>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4798      	blx	r3
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010400 	.word	0x40010400
 800090c:	20000020 	.word	0x20000020

08000910 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<2);
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <EXTI2_IRQHandler+0x1c>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	4a04      	ldr	r2, [pc, #16]	@ (800092c <EXTI2_IRQHandler+0x1c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[2]();
 8000920:	4b03      	ldr	r3, [pc, #12]	@ (8000930 <EXTI2_IRQHandler+0x20>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	4798      	blx	r3
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010400 	.word	0x40010400
 8000930:	20000020 	.word	0x20000020

08000934 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<3);
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <EXTI3_IRQHandler+0x1c>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <EXTI3_IRQHandler+0x1c>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[3]();
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <EXTI3_IRQHandler+0x20>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	4798      	blx	r3
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010400 	.word	0x40010400
 8000954:	20000020 	.word	0x20000020

08000958 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<4);
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <EXTI4_IRQHandler+0x1c>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <EXTI4_IRQHandler+0x1c>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[4]();
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <EXTI4_IRQHandler+0x20>)
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	4798      	blx	r3
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010400 	.word	0x40010400
 8000978:	20000020 	.word	0x20000020

0800097c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5); GPtr_IRQ_CALLBACK[5]();}
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	2b00      	cmp	r3, #0
 800098a:	d008      	beq.n	800099e <EXTI9_5_IRQHandler+0x22>
 800098c:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	4a22      	ldr	r2, [pc, #136]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	6153      	str	r3, [r2, #20]
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <EXTI9_5_IRQHandler+0xa4>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6); GPtr_IRQ_CALLBACK[6]();}
 800099e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d008      	beq.n	80009bc <EXTI9_5_IRQHandler+0x40>
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <EXTI9_5_IRQHandler+0xa4>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7); GPtr_IRQ_CALLBACK[7]();}
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d008      	beq.n	80009da <EXTI9_5_IRQHandler+0x5e>
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4a13      	ldr	r2, [pc, #76]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d2:	6153      	str	r3, [r2, #20]
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <EXTI9_5_IRQHandler+0xa4>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8); GPtr_IRQ_CALLBACK[8]();}
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d008      	beq.n	80009f8 <EXTI9_5_IRQHandler+0x7c>
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <EXTI9_5_IRQHandler+0xa4>)
 80009f4:	6a1b      	ldr	r3, [r3, #32]
 80009f6:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9); GPtr_IRQ_CALLBACK[9]();}
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d008      	beq.n	8000a16 <EXTI9_5_IRQHandler+0x9a>
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <EXTI9_5_IRQHandler+0xa0>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0e:	6153      	str	r3, [r2, #20]
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <EXTI9_5_IRQHandler+0xa4>)
 8000a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a14:	4798      	blx	r3
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010400 	.word	0x40010400
 8000a20:	20000020 	.word	0x20000020

08000a24 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10); GPtr_IRQ_CALLBACK[10]();}
 8000a28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <EXTI15_10_IRQHandler+0x22>
 8000a34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	4a29      	ldr	r2, [pc, #164]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3e:	6153      	str	r3, [r2, #20]
 8000a40:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <EXTI15_10_IRQHandler+0xc0>)
 8000a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a44:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11); GPtr_IRQ_CALLBACK[11]();}
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d008      	beq.n	8000a64 <EXTI15_10_IRQHandler+0x40>
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a22      	ldr	r2, [pc, #136]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <EXTI15_10_IRQHandler+0xc0>)
 8000a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a62:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12); GPtr_IRQ_CALLBACK[12]();}
 8000a64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d008      	beq.n	8000a82 <EXTI15_10_IRQHandler+0x5e>
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a7a:	6153      	str	r3, [r2, #20]
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <EXTI15_10_IRQHandler+0xc0>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13); GPtr_IRQ_CALLBACK[13]();}
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <EXTI15_10_IRQHandler+0x7c>
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000a94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <EXTI15_10_IRQHandler+0xc0>)
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a9e:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14); GPtr_IRQ_CALLBACK[14]();}
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d008      	beq.n	8000abe <EXTI15_10_IRQHandler+0x9a>
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab6:	6153      	str	r3, [r2, #20]
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <EXTI15_10_IRQHandler+0xc0>)
 8000aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000abc:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15); GPtr_IRQ_CALLBACK[15]();}
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d008      	beq.n	8000adc <EXTI15_10_IRQHandler+0xb8>
 8000aca:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <EXTI15_10_IRQHandler+0xbc>)
 8000ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <EXTI15_10_IRQHandler+0xc0>)
 8000ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ada:	4798      	blx	r3
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010400 	.word	0x40010400
 8000ae4:	20000020 	.word	0x20000020

08000ae8 <Get_CRLH_Position>:

/********************************************************************************************************************************************/
                                              /*GENERIC FUNCTIONS*/
/********************************************************************************************************************************************/

uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000af8:	f000 80a5 	beq.w	8000c46 <Get_CRLH_Position+0x15e>
 8000afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b00:	f300 80a3 	bgt.w	8000c4a <Get_CRLH_Position+0x162>
 8000b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b08:	f000 809b 	beq.w	8000c42 <Get_CRLH_Position+0x15a>
 8000b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b10:	f300 809b 	bgt.w	8000c4a <Get_CRLH_Position+0x162>
 8000b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b18:	f000 8091 	beq.w	8000c3e <Get_CRLH_Position+0x156>
 8000b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b20:	f300 8093 	bgt.w	8000c4a <Get_CRLH_Position+0x162>
 8000b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b28:	f000 8087 	beq.w	8000c3a <Get_CRLH_Position+0x152>
 8000b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b30:	f300 808b 	bgt.w	8000c4a <Get_CRLH_Position+0x162>
 8000b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b38:	d07d      	beq.n	8000c36 <Get_CRLH_Position+0x14e>
 8000b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b3e:	f300 8084 	bgt.w	8000c4a <Get_CRLH_Position+0x162>
 8000b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b46:	d074      	beq.n	8000c32 <Get_CRLH_Position+0x14a>
 8000b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b4c:	dc7d      	bgt.n	8000c4a <Get_CRLH_Position+0x162>
 8000b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b52:	d06c      	beq.n	8000c2e <Get_CRLH_Position+0x146>
 8000b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b58:	dc77      	bgt.n	8000c4a <Get_CRLH_Position+0x162>
 8000b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b5e:	d064      	beq.n	8000c2a <Get_CRLH_Position+0x142>
 8000b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b64:	dc71      	bgt.n	8000c4a <Get_CRLH_Position+0x162>
 8000b66:	2b80      	cmp	r3, #128	@ 0x80
 8000b68:	d05d      	beq.n	8000c26 <Get_CRLH_Position+0x13e>
 8000b6a:	2b80      	cmp	r3, #128	@ 0x80
 8000b6c:	dc6d      	bgt.n	8000c4a <Get_CRLH_Position+0x162>
 8000b6e:	2b20      	cmp	r3, #32
 8000b70:	dc48      	bgt.n	8000c04 <Get_CRLH_Position+0x11c>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	dd69      	ble.n	8000c4a <Get_CRLH_Position+0x162>
 8000b76:	3b01      	subs	r3, #1
 8000b78:	2b1f      	cmp	r3, #31
 8000b7a:	d866      	bhi.n	8000c4a <Get_CRLH_Position+0x162>
 8000b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <Get_CRLH_Position+0x9c>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000c0b 	.word	0x08000c0b
 8000b88:	08000c0f 	.word	0x08000c0f
 8000b8c:	08000c4b 	.word	0x08000c4b
 8000b90:	08000c13 	.word	0x08000c13
 8000b94:	08000c4b 	.word	0x08000c4b
 8000b98:	08000c4b 	.word	0x08000c4b
 8000b9c:	08000c4b 	.word	0x08000c4b
 8000ba0:	08000c17 	.word	0x08000c17
 8000ba4:	08000c4b 	.word	0x08000c4b
 8000ba8:	08000c4b 	.word	0x08000c4b
 8000bac:	08000c4b 	.word	0x08000c4b
 8000bb0:	08000c4b 	.word	0x08000c4b
 8000bb4:	08000c4b 	.word	0x08000c4b
 8000bb8:	08000c4b 	.word	0x08000c4b
 8000bbc:	08000c4b 	.word	0x08000c4b
 8000bc0:	08000c1b 	.word	0x08000c1b
 8000bc4:	08000c4b 	.word	0x08000c4b
 8000bc8:	08000c4b 	.word	0x08000c4b
 8000bcc:	08000c4b 	.word	0x08000c4b
 8000bd0:	08000c4b 	.word	0x08000c4b
 8000bd4:	08000c4b 	.word	0x08000c4b
 8000bd8:	08000c4b 	.word	0x08000c4b
 8000bdc:	08000c4b 	.word	0x08000c4b
 8000be0:	08000c4b 	.word	0x08000c4b
 8000be4:	08000c4b 	.word	0x08000c4b
 8000be8:	08000c4b 	.word	0x08000c4b
 8000bec:	08000c4b 	.word	0x08000c4b
 8000bf0:	08000c4b 	.word	0x08000c4b
 8000bf4:	08000c4b 	.word	0x08000c4b
 8000bf8:	08000c4b 	.word	0x08000c4b
 8000bfc:	08000c4b 	.word	0x08000c4b
 8000c00:	08000c1f 	.word	0x08000c1f
 8000c04:	2b40      	cmp	r3, #64	@ 0x40
 8000c06:	d00c      	beq.n	8000c22 <Get_CRLH_Position+0x13a>
 8000c08:	e01f      	b.n	8000c4a <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e01e      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	e01c      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000c12:	2308      	movs	r3, #8
 8000c14:	e01a      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000c16:	230c      	movs	r3, #12
 8000c18:	e018      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	e016      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000c1e:	2314      	movs	r3, #20
 8000c20:	e014      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000c22:	2318      	movs	r3, #24
 8000c24:	e012      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000c26:	231c      	movs	r3, #28
 8000c28:	e010      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e00e      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e00c      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000c32:	2308      	movs	r3, #8
 8000c34:	e00a      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000c36:	230c      	movs	r3, #12
 8000c38:	e008      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	e006      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000c3e:	2314      	movs	r3, #20
 8000c40:	e004      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000c42:	2318      	movs	r3, #24
 8000c44:	e002      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000c46:	231c      	movs	r3, #28
 8000c48:	e000      	b.n	8000c4c <Get_CRLH_Position+0x164>
		break;
	default:
		return 0;
 8000c4a:	2300      	movs	r3, #0
	}
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <MCAL_GPIO_Init>:
 * @param [in]  : GPIOx(x can be A-...-E depending on the device used to selected)
 * @param [in]  : PinConfig pointer  to a GPIO_PinConfig_t structure that contains the config info for the selected GPIO peripheral
 * @retval 	 : None
 * Note		 : STM32F103C6 MCU has GPIO A,B,C,D,E modules but LQFP48 A,B AND PART OF C & D exported as external pins of MCU
  ========================================================================================================================================*/
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]

	// (GPIOx_CRL) Configuration Register Low (configures the lower 8 pins of the GPIO port 0---->7)
	// (GPIOx_CRL) Configuration Register High (configures the higher 8 pins of the GPIO port 8---->15)
	volatile uint32_t* Config_Register = NULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
	uint8_t PIN_Config = 0; //will hold the final 4-bit value that will be written to the CRL or CRH
 8000c66:	2300      	movs	r3, #0
 8000c68:	75fb      	strb	r3, [r7, #23]
	uint8_t position = Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff3a 	bl	8000ae8 <Get_CRLH_Position>
 8000c74:	4603      	mov	r3, r0
 8000c76:	73fb      	strb	r3, [r7, #15]

	// Select the correct configuration register (CRL or CRH)
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	2bff      	cmp	r3, #255	@ 0xff
 8000c7e:	d801      	bhi.n	8000c84 <MCAL_GPIO_Init+0x2c>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	e001      	b.n	8000c88 <MCAL_GPIO_Init+0x30>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3304      	adds	r3, #4
 8000c88:	613b      	str	r3, [r7, #16]

	/*Clear MODEx[1:0] and CNFx[1:0]*/
	(*Config_Register) &= ~(0xf <<position);
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	210f      	movs	r1, #15
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	43d2      	mvns	r2, r2
 8000c98:	401a      	ands	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d00b      	beq.n	8000cbe <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d007      	beq.n	8000cbe <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	789b      	ldrb	r3, [r3, #2]
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d003      	beq.n	8000cbe <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	789b      	ldrb	r3, [r3, #2]
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	d10f      	bne.n	8000cde <MCAL_GPIO_Init+0x86>
	{
		/*SETS MODEx[1:0] and CNFx[1:0]*/
		PIN_Config = ((((PinConfig->GPIO_MODE -4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	789b      	ldrb	r3, [r3, #2]
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	78db      	ldrb	r3, [r3, #3]
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	75fb      	strb	r3, [r7, #23]
 8000cdc:	e02c      	b.n	8000d38 <MCAL_GPIO_Init+0xe0>

	}
	//if pin is input
	else //MODE = 00 BY DEFUALT
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	789b      	ldrb	r3, [r3, #2]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d003      	beq.n	8000cee <MCAL_GPIO_Init+0x96>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d107      	bne.n	8000cfe <MCAL_GPIO_Init+0xa6>
		{
			/*SETS MODEx[00] and CNFx[1:0]*/
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0f);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	789b      	ldrb	r3, [r3, #2]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	75fb      	strb	r3, [r7, #23]
 8000cfc:	e01c      	b.n	8000d38 <MCAL_GPIO_Init+0xe0>

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	789b      	ldrb	r3, [r3, #2]
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d102      	bne.n	8000d0c <MCAL_GPIO_Init+0xb4>
		{
			/*SETS MODEx[00] and CNFx[1:0]*/
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0f);
 8000d06:	2304      	movs	r3, #4
 8000d08:	75fb      	strb	r3, [r7, #23]
 8000d0a:	e015      	b.n	8000d38 <MCAL_GPIO_Init+0xe0>
		}
		else
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | (0x0)) & 0x0f);
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	75fb      	strb	r3, [r7, #23]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	789b      	ldrb	r3, [r3, #2]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d107      	bne.n	8000d28 <MCAL_GPIO_Init+0xd0>
			{
				//incase of pull-up PxODR set to 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	8812      	ldrh	r2, [r2, #0]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	e007      	b.n	8000d38 <MCAL_GPIO_Init+0xe0>
			}else
			{
				//incase of pull-down PxODR clears
				GPIOx->ODR &= ~ (PinConfig->GPIO_PinNumber);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60da      	str	r2, [r3, #12]
			}
		}

	}
	//write on the CRL or CRH
	(*Config_Register) |= (PIN_Config << position);
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	7df9      	ldrb	r1, [r7, #23]
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	431a      	orrs	r2, r3
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	601a      	str	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <MCAL_GPIO_Write_PIN>:
 * @param [in]   : GPIOx(x can be A-...-E depending on the device used to selected)
 * @param [in]   : PinNumber (set according number according to @ref GPIO_PINS_define)
 * @retval 	     : None
 * Note		     : None
 ========================================================================================================================================*/
void MCAL_GPIO_Write_PIN(GPIO_TypeDef* GPIOx,uint16_t PinNumber, uint8_t Value){
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	807b      	strh	r3, [r7, #2]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	707b      	strb	r3, [r7, #1]

	if(Value!= GPIO_PIN_RESET){
 8000d62:	787b      	ldrb	r3, [r7, #1]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <MCAL_GPIO_Write_PIN+0x1e>
		//GPIOx->ODR |= PinNumber;

		/*************Or we can use the the BSRR & BRR register***********/

		GPIOx->BSRR = (uint32_t)PinNumber;
 8000d68:	887a      	ldrh	r2, [r7, #2]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	611a      	str	r2, [r3, #16]
		}else
		{
		GPIOx->BRR = (uint32_t)PinNumber;
		}

	}
 8000d6e:	e002      	b.n	8000d76 <MCAL_GPIO_Write_PIN+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000d70:	887a      	ldrh	r2, [r7, #2]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	615a      	str	r2, [r3, #20]
	}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <MCAL_GPIO_Write_PORT>:
 * @param [in]    : GPIOx(x can be A-...-E depending on the device used to selected)
 * @param [in]    : Value to be set in the port
 * @retval 	     : None
 * Note		     : None
========================================================================================================================================*/
void MCAL_GPIO_Write_PORT(GPIO_TypeDef* GPIOx,uint16_t Value){
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t) Value;
 8000d8c:	887a      	ldrh	r2, [r7, #2]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60da      	str	r2, [r3, #12]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <EXTI9PB9_CALLBACK>:
	{
		for(j=0; j<255; j++);
	}
}

void EXTI9PB9_CALLBACK(){
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	IRQ_FALG = 1;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <EXTI9PB9_CALLBACK+0x14>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000005c 	.word	0x2000005c

08000db4 <main>:

int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0

	//Enable the clocks
	RCC_GPIOA_CLK_EN();
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <main+0x70>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a19      	ldr	r2, [pc, #100]	@ (8000e24 <main+0x70>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <main+0x70>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <main+0x70>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <main+0x70>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a13      	ldr	r2, [pc, #76]	@ (8000e24 <main+0x70>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000dde:	f7ff fa1f 	bl	8000220 <LCD_INIT>
	LCD_clear_screen();
 8000de2:	f7ff fae5 	bl	80003b0 <LCD_clear_screen>

	EXTI_PinCnfig_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI9_PB9;
 8000de6:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <main+0x74>)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_Rising;
 8000df2:	2300      	movs	r3, #0
 8000df4:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.Ptr_IRQ_CALLBACK = EXTI9PB9_CALLBACK ;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <main+0x78>)
 8000df8:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_ENABLE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_INIT(&EXTI_CFG);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fd54 	bl	80008b0 <MCAL_EXTI_GPIO_INIT>

	IRQ_FALG = 1;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <main+0x7c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]

	while(1)
	{
		if (IRQ_FALG)
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <main+0x7c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0fb      	beq.n	8000e0e <main+0x5a>
		{
			LCD_clear_screen();
 8000e16:	f7ff facb 	bl	80003b0 <LCD_clear_screen>
			IRQ_FALG = 0;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <main+0x7c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
		if (IRQ_FALG)
 8000e20:	e7f5      	b.n	8000e0e <main+0x5a>
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	08000ee8 	.word	0x08000ee8
 8000e2c:	08000d9d 	.word	0x08000d9d
 8000e30:	2000005c 	.word	0x2000005c

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	@ (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	@ (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e62:	f000 f811 	bl	8000e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff ffa5 	bl	8000db4 <main>

08000e6a <LoopForever>:

LoopForever:
  b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e78:	08000efc 	.word	0x08000efc
  ldr r2, =_sbss
 8000e7c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e80:	20000060 	.word	0x20000060

08000e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_2_IRQHandler>
	...

08000e88 <__libc_init_array>:
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4d0c      	ldr	r5, [pc, #48]	@ (8000ec0 <__libc_init_array+0x38>)
 8000e8e:	4c0d      	ldr	r4, [pc, #52]	@ (8000ec4 <__libc_init_array+0x3c>)
 8000e90:	1b64      	subs	r4, r4, r5
 8000e92:	10a4      	asrs	r4, r4, #2
 8000e94:	42a6      	cmp	r6, r4
 8000e96:	d109      	bne.n	8000eac <__libc_init_array+0x24>
 8000e98:	f000 f81a 	bl	8000ed0 <_init>
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	4d0a      	ldr	r5, [pc, #40]	@ (8000ec8 <__libc_init_array+0x40>)
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <__libc_init_array+0x44>)
 8000ea2:	1b64      	subs	r4, r4, r5
 8000ea4:	10a4      	asrs	r4, r4, #2
 8000ea6:	42a6      	cmp	r6, r4
 8000ea8:	d105      	bne.n	8000eb6 <__libc_init_array+0x2e>
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
 8000eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb0:	4798      	blx	r3
 8000eb2:	3601      	adds	r6, #1
 8000eb4:	e7ee      	b.n	8000e94 <__libc_init_array+0xc>
 8000eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eba:	4798      	blx	r3
 8000ebc:	3601      	adds	r6, #1
 8000ebe:	e7f2      	b.n	8000ea6 <__libc_init_array+0x1e>
 8000ec0:	08000ef4 	.word	0x08000ef4
 8000ec4:	08000ef4 	.word	0x08000ef4
 8000ec8:	08000ef4 	.word	0x08000ef4
 8000ecc:	08000ef8 	.word	0x08000ef8

08000ed0 <_init>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr

08000edc <_fini>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	bf00      	nop
 8000ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ee2:	bc08      	pop	{r3}
 8000ee4:	469e      	mov	lr, r3
 8000ee6:	4770      	bx	lr
