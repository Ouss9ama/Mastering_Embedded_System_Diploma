
Lab2_Atmega32_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_1>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_2>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  64:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_interrupts>:
 }

 //initialize the external interrupts
 void init_interrupts(void){
	 // Configure INT0 (PD2): Trigger on any logical change
	 MCUCR |= (1<<ISC00);// Set ISC00 bit any logical change
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	85 bf       	out	0x35, r24	; 53
	 GICR |= (1<<INT0);//Enable INT0 interrupt
  72:	8b b7       	in	r24, 0x3b	; 59
  74:	80 64       	ori	r24, 0x40	; 64
  76:	8b bf       	out	0x3b, r24	; 59
	 
	 // Configure INT1 (PD3): Trigger on rising edge
	 MCUCR |= (1<<ISC10); //(rising edge)
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	85 bf       	out	0x35, r24	; 53
	 MCUCR |= (1<<ISC11);
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	88 60       	ori	r24, 0x08	; 8
  82:	85 bf       	out	0x35, r24	; 53
	 GICR |= (1 << INT1); // Enable INT1 interrupt
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8b bf       	out	0x3b, r24	; 59
	 
	 // Configure INT2 (PB2): Trigger on falling edge
	 MCUCSR &= ~(1 << ISC2); // Clear ISC2 bit (falling edge)
  8a:	84 b7       	in	r24, 0x34	; 52
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	84 bf       	out	0x34, r24	; 52
	 GICR |= (1 << INT2);    // Enable INT2 interrupt
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 62       	ori	r24, 0x20	; 32
  94:	8b bf       	out	0x3b, r24	; 59
  96:	08 95       	ret

00000098 <main>:


 int main(void)
 {
	 //configure PD5 as an output (LED0)
	 DDRD |= (1<<PD5);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	81 bb       	out	0x11, r24	; 17
	 //configure PD6 as an output (LED1)
	 DDRD |= (1<<PD6);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	81 bb       	out	0x11, r24	; 17
	 //configure PD7 as an output (LED2)
	 DDRD |= (1<<PD7);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	81 bb       	out	0x11, r24	; 17
	 // Configure PD2 as input (INT0)
	 DDRD &= ~(1 << PD2);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	81 bb       	out	0x11, r24	; 17
	 // Configure PD3 as input (INT1)
	 DDRD &= ~(1 << PD3);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	87 7f       	andi	r24, 0xF7	; 247
  b4:	81 bb       	out	0x11, r24	; 17
	 // Configure PB2 as input (INT2)
	 DDRB &= ~(1 << PB2);
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	87 bb       	out	0x17, r24	; 23
	 
	 //initialize the external interrupts
	 init_interrupts();
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <init_interrupts>
	 
	 //ENABLE GLOBALE INERRUPT
	 sei(); //SREG |= (1 << 7);
  c0:	78 94       	sei
	 
	 while (1)
	 {
		 PORTD &= ~(1<<PD5);// turn off LED0 by default
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	82 bb       	out	0x12, r24	; 18
		 PORTD &= ~(1<<PD6);//turn off LED1 by default
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	8f 7b       	andi	r24, 0xBF	; 191
  cc:	82 bb       	out	0x12, r24	; 18
		 PORTD &= ~(1<<PD7);//turn off LED2 by default
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 77       	andi	r24, 0x7F	; 127
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	f6 cf       	rjmp	.-20     	; 0xc2 <main+0x2a>

000000d6 <__vector_1>:
	 MCUCSR &= ~(1 << ISC2); // Clear ISC2 bit (falling edge)
	 GICR |= (1 << INT2);    // Enable INT2 interrupt
 }

 //ISR for INT0 (PD2): Any logical change
 ISR(INT0_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	 //when called turn the LED0 (PD5)
	 PORTD |= (1<<PD5); //turn on
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e3       	ldi	r18, 0x3F	; 63
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__vector_1+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__vector_1+0x26>
  fc:	00 00       	nop
	 _delay_ms(1000); //wait for 1 second
	 PORTD &= ~(1<<PD5);//turn off
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8f 7d       	andi	r24, 0xDF	; 223
 102:	82 bb       	out	0x12, r24	; 18
 }
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_2>:

 //ISR for INT1 (PD3): Trigger on rising edge
 ISR(INT1_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	 //when called turn the LED1 (PD6)
	 PORTD |= (1<<PD6); //turn on
 124:	82 b3       	in	r24, 0x12	; 18
 126:	80 64       	ori	r24, 0x40	; 64
 128:	82 bb       	out	0x12, r24	; 18
 12a:	2f e3       	ldi	r18, 0x3F	; 63
 12c:	8d e0       	ldi	r24, 0x0D	; 13
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <__vector_2+0x1c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_2+0x26>
 13a:	00 00       	nop
	 _delay_ms(1000); //wait for 1 second
	 PORTD &= ~(1<<PD6);//turn off
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	8f 7b       	andi	r24, 0xBF	; 191
 140:	82 bb       	out	0x12, r24	; 18
 }
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_3>:

 //ISR for INT2 (PB2): Falling edge
 ISR(INT2_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
	 //when called turn the LED2 (PD7)
	 PORTD |= (1<<PD7); //turn on
 162:	82 b3       	in	r24, 0x12	; 18
 164:	80 68       	ori	r24, 0x80	; 128
 166:	82 bb       	out	0x12, r24	; 18
 168:	2f e3       	ldi	r18, 0x3F	; 63
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <__vector_3+0x1c>
 176:	00 c0       	rjmp	.+0      	; 0x178 <__vector_3+0x26>
 178:	00 00       	nop
	 _delay_ms(1000); //wait for 1 second
	 PORTD &= ~(1<<PD7);//turn off
 17a:	82 b3       	in	r24, 0x12	; 18
 17c:	8f 77       	andi	r24, 0x7F	; 127
 17e:	82 bb       	out	0x12, r24	; 18
 }
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
