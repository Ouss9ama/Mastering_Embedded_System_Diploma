
uart_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  000003d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001238  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ac  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e9  00000000  00000000  00002ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 19 01 	call	0x232	; 0x232 <main>
  8a:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
	 
	 // Step 4: Restore control pins to write mode
	 clear_bit(LCD_CTRL_PORT,RW);
	 
	 // Step 5: Reconfigure D7 as output for normal operation
	 set_bit(LCD_DATA_DDR,7);
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 46 01 	call	0x28c	; 0x28c <set_bit>
  9c:	00 00       	nop
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	88 e3       	ldi	r24, 0x38	; 56
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_bit>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_KICK+0x18>
  aa:	08 95       	ret

000000ac <LCD_WRITE_COMMAND>:
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);// Entry mode: increment cursor, no shift
	 LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
	 
}

void LCD_WRITE_COMMAND(uint8_t command){
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
	clear_bit(LCD_CTRL_PORT,RS); // RS = 0 (Command mode)
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_bit>
	clear_bit(LCD_CTRL_PORT,RW);  // RW = 0 (Write mode)
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	88 e3       	ldi	r24, 0x38	; 56
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_bit>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (command & 0xF0); //// Send higher nibble
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	9c 2f       	mov	r25, r28
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	89 2b       	or	r24, r25
  ce:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK(); 
  d0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (command << 4 ); //// Send lower nibble	
  d4:	2b b3       	in	r18, 0x1b	; 27
  d6:	30 e1       	ldi	r19, 0x10	; 16
  d8:	c3 9f       	mul	r28, r19
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	89 2b       	or	r24, r25
  e4:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK(); 
  e6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	83 ef       	ldi	r24, 0xF3	; 243
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_WRITE_COMMAND+0x42>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_WRITE_COMMAND+0x48>
  f4:	00 00       	nop
	_delay_ms(2);
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <LCD_CLEAR>:


#include <util/delay.h>

void LCD_CLEAR(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 100:	08 95       	ret

00000102 <LCD_INIT>:
	 set_bit(LCD_DATA_DDR,7);
	
}
void LCD_INIT(void){
	// Step 1: Configure control pins (RS, RW, EN) as output
	set_bit(LCD_CTRL_DDR, RS);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	87 e3       	ldi	r24, 0x37	; 55
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 46 01 	call	0x28c	; 0x28c <set_bit>
	set_bit(LCD_CTRL_DDR, RW);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	87 e3       	ldi	r24, 0x37	; 55
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 46 01 	call	0x28c	; 0x28c <set_bit>
	set_bit(LCD_CTRL_DDR, EN);
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	87 e3       	ldi	r24, 0x37	; 55
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 46 01 	call	0x28c	; 0x28c <set_bit>
	// Step 2: Configure data pins (D4-D7) as output
	*LCD_DATA_DDR = 0XF0; 
 120:	80 ef       	ldi	r24, 0xF0	; 240
 122:	8a bb       	out	0x1a, r24	; 26
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_INIT+0x26>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_INIT+0x2c>
 12e:	00 00       	nop
	// Step 3: Wait for LCD to power up
	_delay_ms(50);
	// Step 4: Switch to 4-bit mode
	LCD_WRITE_COMMAND(0x02);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 136:	81 ee       	ldi	r24, 0xE1	; 225
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_INIT+0x38>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_INIT+0x3e>
 140:	00 00       	nop
	_delay_ms(5);
	// Step 5: Configure the LCD
	 LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);// 4-bit mode, 2 lines, 5x8 font
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);// Display on, cursor on, blink on
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	 LCD_CLEAR();
 14e:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CLEAR>
	  
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);// Entry mode: increment cursor, no shift
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 15e:	08 95       	ret

00000160 <LCD_GO_TO_XY>:
}

void LCD_GO_TO_XY(int line, int pos){
	//we have two lines (2 row) and 0-15 position
	uint8_t position;
	if(line == 1)
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	19 f4       	brne	.+6      	; 0x16a <LCD_GO_TO_XY+0xa>
	{
		position = LCD_BEGIN_AT_FIRST_ROW + pos;
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	86 0f       	add	r24, r22
 168:	02 c0       	rjmp	.+4      	; 0x16e <LCD_GO_TO_XY+0xe>
	}else
	{
		position = LCD_BEGIN_AT_SECOND_ROW + pos;
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	86 0f       	add	r24, r22
	}
	LCD_WRITE_COMMAND(position);
 16e:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 172:	08 95       	ret

00000174 <LCD_WRITE_CHAR>:
	}

void LCD_WRITE_CHAR(uint8_t data){
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	// Step 1: Set RS = 1 (Data Mode), RW = 0 (Write Mode)
	set_bit(LCD_CTRL_PORT,RS);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	88 e3       	ldi	r24, 0x38	; 56
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 46 01 	call	0x28c	; 0x28c <set_bit>
	clear_bit(LCD_CTRL_PORT,RW);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_bit>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (data & 0xF0); //// Send higher nibble
 18c:	8b b3       	in	r24, 0x1b	; 27
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	9c 2f       	mov	r25, r28
 192:	90 7f       	andi	r25, 0xF0	; 240
 194:	89 2b       	or	r24, r25
 196:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 198:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (data << 4 ); //// Send lower nibble
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	30 e1       	ldi	r19, 0x10	; 16
 1a0:	c3 9f       	mul	r28, r19
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	92 2f       	mov	r25, r18
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	89 2b       	or	r24, r25
 1ac:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_WRITE_CHAR+0x42>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_WRITE_CHAR+0x48>
 1bc:	00 00       	nop
	_delay_ms(2);
}
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* data){
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
	int counter = 0; //the counter we used here keeps track of how many characters have been written
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
	while(*data != '\0'){ //our loop is on as long as the current character is not '\0' (end of string)
 1d0:	28 c0       	rjmp	.+80     	; 0x222 <LCD_WRITE_STRING+0x60>
		counter ++;
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	2f eb       	ldi	r18, 0xBF	; 191
 1d6:	84 ed       	ldi	r24, 0xD4	; 212
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <LCD_WRITE_STRING+0x18>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_WRITE_STRING+0x22>
 1e4:	00 00       	nop
		_delay_ms(600);
		LCD_WRITE_CHAR(*data++);// write the character and move to the next one
 1e6:	8f 01       	movw	r16, r30
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_WRITE_CHAR>
		if(counter == 16){ //if 16 char have been written we move to the second row
 1f2:	c0 31       	cpi	r28, 0x10	; 16
 1f4:	d1 05       	cpc	r29, r1
 1f6:	39 f4       	brne	.+14     	; 0x206 <LCD_WRITE_STRING+0x44>
			LCD_GO_TO_XY(2, 0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_GO_TO_XY>
 204:	0d c0       	rjmp	.+26     	; 0x220 <LCD_WRITE_STRING+0x5e>
		}
		else if(counter == 32){//if 32 char have been written we clear the screen and start all over again from the first row
 206:	c0 32       	cpi	r28, 0x20	; 32
 208:	d1 05       	cpc	r29, r1
 20a:	51 f4       	brne	.+20     	; 0x220 <LCD_WRITE_STRING+0x5e>
			LCD_CLEAR();
 20c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CLEAR>
			LCD_GO_TO_XY(1,0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_GO_TO_XY>
			counter = 0;
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	f8 01       	movw	r30, r16
	_delay_ms(2);
}

void LCD_WRITE_STRING(char* data){
	int counter = 0; //the counter we used here keeps track of how many characters have been written
	while(*data != '\0'){ //our loop is on as long as the current character is not '\0' (end of string)
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	d5 cf       	rjmp	.-86     	; 0x1d2 <LCD_WRITE_STRING+0x10>
			LCD_CLEAR();
			LCD_GO_TO_XY(1,0);
			counter = 0;
		}
	}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <main>:

uint8_t X = 0;
 
int main(void)
{
	LCD_INIT();
 232:	0e 94 81 00 	call	0x102	; 0x102 <LCD_INIT>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	85 ea       	ldi	r24, 0xA5	; 165
 23a:	9e e0       	ldi	r25, 0x0E	; 14
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0xa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x14>
 246:	00 00       	nop
	_delay_ms(600);
	LCD_CLEAR();
 248:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CLEAR>
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	80 e7       	ldi	r24, 0x70	; 112
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x20>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x2a>
 25c:	00 00       	nop
	_delay_ms(100);
	
	UART_Init();
 25e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <UART_Init>
	
	LCD_WRITE_STRING("UART IS LOADING");
 262:	80 e6       	ldi	r24, 0x60	; 96
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_WRITE_STRING>
// 	UART_Send('S');
	
	while(1)
	{	
		 // Step 1: Receive data from the PC
		X = UART_Recieve(); 
 26a:	0e 94 8e 01 	call	0x31c	; 0x31c <UART_Recieve>
 26e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		 
		 // Step 2: Echo the received data back to the PC
		UART_Send(X);
 272:	0e 94 82 01 	call	0x304	; 0x304 <UART_Send>

		// Step 3: Optionally, display the received data on the LCD
		LCD_GO_TO_XY(2, 0);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_GO_TO_XY>
		LCD_WRITE_CHAR(X);
 282:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 286:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_WRITE_CHAR>
 28a:	ef cf       	rjmp	.-34     	; 0x26a <main+0x38>

0000028c <set_bit>:
	*reg &= ~(1 << bit);
}

void toggle_bit(volatile uint8_t *reg, uint8_t bit)
{
	*reg ^= (1 << bit);
 28c:	fc 01       	movw	r30, r24
 28e:	40 81       	ld	r20, Z
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <set_bit+0xe>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <set_bit+0xa>
 29e:	24 2b       	or	r18, r20
 2a0:	20 83       	st	Z, r18
 2a2:	08 95       	ret

000002a4 <clear_bit>:
 2a4:	fc 01       	movw	r30, r24
 2a6:	90 81       	ld	r25, Z
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <clear_bit+0xe>
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <clear_bit+0xa>
 2b6:	20 95       	com	r18
 2b8:	29 23       	and	r18, r25
 2ba:	20 83       	st	Z, r18
 2bc:	08 95       	ret

000002be <read_bit>:
}

uint8_t read_bit(volatile uint8_t *reg, uint8_t bit)
{
	return (*reg & (1 << bit)) ? 1 : 0;
 2be:	fc 01       	movw	r30, r24
 2c0:	20 81       	ld	r18, Z
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <read_bit+0xc>
 2c6:	35 95       	asr	r19
 2c8:	27 95       	ror	r18
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <read_bit+0x8>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	20 ff       	sbrs	r18, 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret

000002d6 <UART_Init>:

//Configures the baud rate, sets asynchronous mode, and enables the transmitter/receiver.
void UART_Init(void)
{
	//set up the baudrate
	UBRRL = 51;
 2d6:	83 e3       	ldi	r24, 0x33	; 51
 2d8:	89 b9       	out	0x09, r24	; 9
	clear_bit(&UCSRA,U2X);//Normal mode
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	8b e2       	ldi	r24, 0x2B	; 43
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_bit>
	//set up the frame
	clear_bit(&UCSRC,UMSEL); //Asynchronous mode
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_bit>
	//Enable the transmitter and receiver
	set_bit(&UCSRB,TXEN); // Enable transmitter
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	8a e2       	ldi	r24, 0x2A	; 42
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 46 01 	call	0x28c	; 0x28c <set_bit>
	set_bit(&UCSRB,RXEN); // Enable receiver
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	8a e2       	ldi	r24, 0x2A	; 42
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 46 01 	call	0x28c	; 0x28c <set_bit>
 302:	08 95       	ret

00000304 <UART_Send>:
	
}

//Waits until the transmit buffer is empty and then writes the data to the UDR register.
void UART_Send(uint8_t data)
{
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
	while(!read_bit(&UCSRA,UDRE)); // Wait until the transmit buffer is empty
 308:	65 e0       	ldi	r22, 0x05	; 5
 30a:	8b e2       	ldi	r24, 0x2B	; 43
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 5f 01 	call	0x2be	; 0x2be <read_bit>
 312:	88 23       	and	r24, r24
 314:	c9 f3       	breq	.-14     	; 0x308 <UART_Send+0x4>
	UDR = data; // Write the data to the UART Data Register (UDR)
 316:	cc b9       	out	0x0c, r28	; 12
}
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <UART_Recieve>:

//Waits until data is received and then reads the data from the UDR register.
uint8_t UART_Recieve(void){
	while(!read_bit(&UCSRA,RXC));
 31c:	67 e0       	ldi	r22, 0x07	; 7
 31e:	8b e2       	ldi	r24, 0x2B	; 43
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 5f 01 	call	0x2be	; 0x2be <read_bit>
 326:	88 23       	and	r24, r24
 328:	c9 f3       	breq	.-14     	; 0x31c <UART_Recieve>
	return UDR;
 32a:	8c b1       	in	r24, 0x0c	; 12
}
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
