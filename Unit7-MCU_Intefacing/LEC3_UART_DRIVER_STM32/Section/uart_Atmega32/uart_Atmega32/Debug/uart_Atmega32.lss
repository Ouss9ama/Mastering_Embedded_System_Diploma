
uart_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000009d8  00000a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800074  00800074  00000a80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001440  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000926  00000000  00000000  000029e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000580  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000865  00000000  00000000  00003ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  8a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
	 
	 // Step 4: Restore control pins to write mode
	 clear_bit(LCD_CTRL_PORT,RW);
	 
	 // Step 5: Reconfigure D7 as output for normal operation
	 set_bit(LCD_DATA_DDR,7);
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 9b 01 	call	0x336	; 0x336 <set_bit>
  9c:	00 00       	nop
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	88 e3       	ldi	r24, 0x38	; 56
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 a7 01 	call	0x34e	; 0x34e <clear_bit>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_KICK+0x18>
  aa:	08 95       	ret

000000ac <LCD_WRITE_COMMAND>:
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);// Entry mode: increment cursor, no shift
	 LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
	 
}

void LCD_WRITE_COMMAND(uint8_t command){
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
	clear_bit(LCD_CTRL_PORT,RS); // RS = 0 (Command mode)
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 a7 01 	call	0x34e	; 0x34e <clear_bit>
	clear_bit(LCD_CTRL_PORT,RW);  // RW = 0 (Write mode)
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	88 e3       	ldi	r24, 0x38	; 56
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 a7 01 	call	0x34e	; 0x34e <clear_bit>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (command & 0xF0); //// Send higher nibble
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	9c 2f       	mov	r25, r28
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	89 2b       	or	r24, r25
  ce:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK(); 
  d0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (command << 4 ); //// Send lower nibble	
  d4:	2b b3       	in	r18, 0x1b	; 27
  d6:	30 e1       	ldi	r19, 0x10	; 16
  d8:	c3 9f       	mul	r28, r19
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	89 2b       	or	r24, r25
  e4:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK(); 
  e6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	83 ef       	ldi	r24, 0xF3	; 243
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_WRITE_COMMAND+0x42>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_WRITE_COMMAND+0x48>
  f4:	00 00       	nop
	_delay_ms(2);
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <LCD_CLEAR>:


#include <util/delay.h>

void LCD_CLEAR(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 100:	08 95       	ret

00000102 <LCD_INIT>:
	 set_bit(LCD_DATA_DDR,7);
	
}
void LCD_INIT(void){
	// Step 1: Configure control pins (RS, RW, EN) as output
	set_bit(LCD_CTRL_DDR, RS);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	87 e3       	ldi	r24, 0x37	; 55
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 9b 01 	call	0x336	; 0x336 <set_bit>
	set_bit(LCD_CTRL_DDR, RW);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	87 e3       	ldi	r24, 0x37	; 55
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 9b 01 	call	0x336	; 0x336 <set_bit>
	set_bit(LCD_CTRL_DDR, EN);
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	87 e3       	ldi	r24, 0x37	; 55
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 9b 01 	call	0x336	; 0x336 <set_bit>
	// Step 2: Configure data pins (D4-D7) as output
	*LCD_DATA_DDR = 0XF0; 
 120:	80 ef       	ldi	r24, 0xF0	; 240
 122:	8a bb       	out	0x1a, r24	; 26
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_INIT+0x26>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_INIT+0x2c>
 12e:	00 00       	nop
	// Step 3: Wait for LCD to power up
	_delay_ms(50);
	// Step 4: Switch to 4-bit mode
	LCD_WRITE_COMMAND(0x02);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 136:	81 ee       	ldi	r24, 0xE1	; 225
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_INIT+0x38>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_INIT+0x3e>
 140:	00 00       	nop
	_delay_ms(5);
	// Step 5: Configure the LCD
	 LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);// 4-bit mode, 2 lines, 5x8 font
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);// Display on, cursor on, blink on
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	 LCD_CLEAR();
 14e:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CLEAR>
	  
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);// Entry mode: increment cursor, no shift
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 15e:	08 95       	ret

00000160 <LCD_GO_TO_XY>:
}

void LCD_GO_TO_XY(int line, int pos){
	//we have two lines (2 row) and 0-15 position
	uint8_t position;
	if(line == 1)
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	19 f4       	brne	.+6      	; 0x16a <LCD_GO_TO_XY+0xa>
	{
		position = LCD_BEGIN_AT_FIRST_ROW + pos;
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	86 0f       	add	r24, r22
 168:	02 c0       	rjmp	.+4      	; 0x16e <LCD_GO_TO_XY+0xe>
	}else
	{
		position = LCD_BEGIN_AT_SECOND_ROW + pos;
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	86 0f       	add	r24, r22
	}
	LCD_WRITE_COMMAND(position);
 16e:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 172:	08 95       	ret

00000174 <LCD_WRITE_CHAR>:
	}

void LCD_WRITE_CHAR(uint8_t data){
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	// Step 1: Set RS = 1 (Data Mode), RW = 0 (Write Mode)
	set_bit(LCD_CTRL_PORT,RS);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	88 e3       	ldi	r24, 0x38	; 56
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 9b 01 	call	0x336	; 0x336 <set_bit>
	clear_bit(LCD_CTRL_PORT,RW);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 a7 01 	call	0x34e	; 0x34e <clear_bit>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (data & 0xF0); //// Send higher nibble
 18c:	8b b3       	in	r24, 0x1b	; 27
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	9c 2f       	mov	r25, r28
 192:	90 7f       	andi	r25, 0xF0	; 240
 194:	89 2b       	or	r24, r25
 196:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 198:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	*LCD_DATA_PORT = (*LCD_DATA_PORT & 0X0F) | (data << 4 ); //// Send lower nibble
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	30 e1       	ldi	r19, 0x10	; 16
 1a0:	c3 9f       	mul	r28, r19
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	92 2f       	mov	r25, r18
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	89 2b       	or	r24, r25
 1ac:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_WRITE_CHAR+0x42>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_WRITE_CHAR+0x48>
 1bc:	00 00       	nop
	_delay_ms(2);
}
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* data){
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
	int counter = 0; //the counter we used here keeps track of how many characters have been written
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
	while(*data != '\0'){ //our loop is on as long as the current character is not '\0' (end of string)
 1d0:	28 c0       	rjmp	.+80     	; 0x222 <LCD_WRITE_STRING+0x60>
		counter ++;
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	2f eb       	ldi	r18, 0xBF	; 191
 1d6:	84 ed       	ldi	r24, 0xD4	; 212
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <LCD_WRITE_STRING+0x18>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_WRITE_STRING+0x22>
 1e4:	00 00       	nop
		_delay_ms(600);
		LCD_WRITE_CHAR(*data++);// write the character and move to the next one
 1e6:	8f 01       	movw	r16, r30
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_WRITE_CHAR>
		if(counter == 16){ //if 16 char have been written we move to the second row
 1f2:	c0 31       	cpi	r28, 0x10	; 16
 1f4:	d1 05       	cpc	r29, r1
 1f6:	39 f4       	brne	.+14     	; 0x206 <LCD_WRITE_STRING+0x44>
			LCD_GO_TO_XY(2, 0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_GO_TO_XY>
 204:	0d c0       	rjmp	.+26     	; 0x220 <LCD_WRITE_STRING+0x5e>
		}
		else if(counter == 32){//if 32 char have been written we clear the screen and start all over again from the first row
 206:	c0 32       	cpi	r28, 0x20	; 32
 208:	d1 05       	cpc	r29, r1
 20a:	51 f4       	brne	.+20     	; 0x220 <LCD_WRITE_STRING+0x5e>
			LCD_CLEAR();
 20c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CLEAR>
			LCD_GO_TO_XY(1,0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_GO_TO_XY>
			counter = 0;
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	f8 01       	movw	r30, r16
	_delay_ms(2);
}

void LCD_WRITE_STRING(char* data){
	int counter = 0; //the counter we used here keeps track of how many characters have been written
	while(*data != '\0'){ //our loop is on as long as the current character is not '\0' (end of string)
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	d5 cf       	rjmp	.-86     	; 0x1d2 <LCD_WRITE_STRING+0x10>
			LCD_CLEAR();
			LCD_GO_TO_XY(1,0);
			counter = 0;
		}
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <LCD_Write_Number>:
void LCD_Write_Number(int num)
{
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	2a 97       	sbiw	r28, 0x0a	; 10
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];          // Buffer to store number as string
	sprintf(buffer, "%d", num); // Convert integer to string
 24a:	9f 93       	push	r25
 24c:	8f 93       	push	r24
 24e:	80 e6       	ldi	r24, 0x60	; 96
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	9f 93       	push	r25
 254:	8f 93       	push	r24
 256:	8e 01       	movw	r16, r28
 258:	0f 5f       	subi	r16, 0xFF	; 255
 25a:	1f 4f       	sbci	r17, 0xFF	; 255
 25c:	1f 93       	push	r17
 25e:	0f 93       	push	r16
 260:	0e 94 00 02 	call	0x400	; 0x400 <sprintf>
	LCD_WRITE_STRING(buffer);  // Print string on LCD
 264:	c8 01       	movw	r24, r16
 266:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_WRITE_STRING>
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	2a 96       	adiw	r28, 0x0a	; 10
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <main>:
uint8_t counter = 0;
uint8_t X = 0;
char sentence[40];
int main(void)
{
	LCD_INIT();
 28c:	0e 94 81 00 	call	0x102	; 0x102 <LCD_INIT>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	85 ea       	ldi	r24, 0xA5	; 165
 294:	9e e0       	ldi	r25, 0x0E	; 14
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0xa>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x14>
 2a0:	00 00       	nop
	_delay_ms(600);
	LCD_CLEAR();
 2a2:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CLEAR>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	80 e7       	ldi	r24, 0x70	; 112
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x20>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x2a>
 2b6:	00 00       	nop
	_delay_ms(100);
	
	UART_Init();
 2b8:	0e 94 c0 01 	call	0x380	; 0x380 <UART_Init>
	
	LCD_WRITE_STRING("UART IS LOADING");
 2bc:	83 e6       	ldi	r24, 0x63	; 99
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_WRITE_STRING>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	80 e7       	ldi	r24, 0x70	; 112
 2c8:	92 e0       	ldi	r25, 0x02	; 2
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x3e>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x48>
 2d4:	00 00       	nop
// 	UART_Send('O');
// 	UART_Send('S');
// 	UART_Send('S');
	//UART_SendString("oussama");
	_delay_ms(100);
	LCD_CLEAR();
 2d6:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CLEAR>
// 		 
// 	}

	while(1)
	{
		 LCD_GO_TO_XY(1, 0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_GO_TO_XY>
		 LCD_Write_Number(counter);
 2e6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 19 01 	call	0x232	; 0x232 <LCD_Write_Number>
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	82 e5       	ldi	r24, 0x52	; 82
 2f4:	97 e0       	ldi	r25, 0x07	; 7
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x6a>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x74>
 300:	00 00       	nop
		_delay_ms(300);
		 counter ++;
 302:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		 
		  // Check if UART received data
		  if (UART_Recieve_Periodic_Check(sentence))
 30c:	85 e7       	ldi	r24, 0x75	; 117
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <UART_Recieve_Periodic_Check>
 314:	88 23       	and	r24, r24
 316:	09 f3       	breq	.-62     	; 0x2da <main+0x4e>
		  {
			  LCD_GO_TO_XY(2, 0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_GO_TO_XY>
			  UART_SendString(sentence);
 324:	85 e7       	ldi	r24, 0x75	; 117
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <UART_SendString>
			  LCD_WRITE_STRING(sentence);
 32c:	85 e7       	ldi	r24, 0x75	; 117
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_WRITE_STRING>
 334:	d2 cf       	rjmp	.-92     	; 0x2da <main+0x4e>

00000336 <set_bit>:
	*reg &= ~(1 << bit);
}

void toggle_bit(volatile uint8_t *reg, uint8_t bit)
{
	*reg ^= (1 << bit);
 336:	fc 01       	movw	r30, r24
 338:	40 81       	ld	r20, Z
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <set_bit+0xe>
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <set_bit+0xa>
 348:	24 2b       	or	r18, r20
 34a:	20 83       	st	Z, r18
 34c:	08 95       	ret

0000034e <clear_bit>:
 34e:	fc 01       	movw	r30, r24
 350:	90 81       	ld	r25, Z
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <clear_bit+0xe>
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <clear_bit+0xa>
 360:	20 95       	com	r18
 362:	29 23       	and	r18, r25
 364:	20 83       	st	Z, r18
 366:	08 95       	ret

00000368 <read_bit>:
}

uint8_t read_bit(volatile uint8_t *reg, uint8_t bit)
{
	return (*reg & (1 << bit)) ? 1 : 0;
 368:	fc 01       	movw	r30, r24
 36a:	20 81       	ld	r18, Z
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <read_bit+0xc>
 370:	35 95       	asr	r19
 372:	27 95       	ror	r18
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <read_bit+0x8>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	20 ff       	sbrs	r18, 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret

00000380 <UART_Init>:
	p[0] = UART_Recieve(); // Receive the first byte and store it in the first byte of `num`
	p[1] = UART_Recieve(); // Receive the second byte and store it in the second byte of `num`
	p[2] = UART_Recieve(); // Receive the third byte and store it in the third byte of `num`
	p[3] = UART_Recieve(); // Receive the fourth byte and store it in the fourth byte of `num`
	return num;        // Return the fully assembled 32-bit number
}
 380:	83 e3       	ldi	r24, 0x33	; 51
 382:	89 b9       	out	0x09, r24	; 9
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	8b e2       	ldi	r24, 0x2B	; 43
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 a7 01 	call	0x34e	; 0x34e <clear_bit>
 38e:	66 e0       	ldi	r22, 0x06	; 6
 390:	80 e4       	ldi	r24, 0x40	; 64
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 a7 01 	call	0x34e	; 0x34e <clear_bit>
 398:	63 e0       	ldi	r22, 0x03	; 3
 39a:	8a e2       	ldi	r24, 0x2A	; 42
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 9b 01 	call	0x336	; 0x336 <set_bit>
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	8a e2       	ldi	r24, 0x2A	; 42
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 9b 01 	call	0x336	; 0x336 <set_bit>
 3ac:	08 95       	ret

000003ae <UART_Send>:
 3ae:	cf 93       	push	r28
 3b0:	c8 2f       	mov	r28, r24
 3b2:	65 e0       	ldi	r22, 0x05	; 5
 3b4:	8b e2       	ldi	r24, 0x2B	; 43
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 b4 01 	call	0x368	; 0x368 <read_bit>
 3bc:	88 23       	and	r24, r24
 3be:	c9 f3       	breq	.-14     	; 0x3b2 <UART_Send+0x4>
 3c0:	cc b9       	out	0x0c, r28	; 12
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <UART_Recieve_Periodic_Check>:
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	ec 01       	movw	r28, r24
 3cc:	67 e0       	ldi	r22, 0x07	; 7
 3ce:	8b e2       	ldi	r24, 0x2B	; 43
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 b4 01 	call	0x368	; 0x368 <read_bit>
 3d6:	88 23       	and	r24, r24
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <UART_Recieve_Periodic_Check+0x1a>
 3da:	8c b1       	in	r24, 0x0c	; 12
 3dc:	88 83       	st	Y, r24
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <UART_SendString>:

void UART_SendString(char* str)
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
	while (*str) // Loop until the null terminator is reached
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <UART_SendString+0xe>
	{
		UART_Send(*str); // Send the current character
 3ee:	0e 94 d7 01 	call	0x3ae	; 0x3ae <UART_Send>
		str++;           // Move to the next character
 3f2:	21 96       	adiw	r28, 0x01	; 1
	return num;        // Return the fully assembled 32-bit number
}

void UART_SendString(char* str)
{
	while (*str) // Loop until the null terminator is reached
 3f4:	88 81       	ld	r24, Y
 3f6:	81 11       	cpse	r24, r1
 3f8:	fa cf       	rjmp	.-12     	; 0x3ee <UART_SendString+0x8>
	{
		UART_Send(*str); // Send the current character
		str++;           // Move to the next character
	}
	//UART_Send('/0');
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <sprintf>:
 400:	ae e0       	ldi	r26, 0x0E	; 14
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	e6 e0       	ldi	r30, 0x06	; 6
 406:	f2 e0       	ldi	r31, 0x02	; 2
 408:	0c 94 c1 04 	jmp	0x982	; 0x982 <__prologue_saves__+0x1c>
 40c:	0d 89       	ldd	r16, Y+21	; 0x15
 40e:	1e 89       	ldd	r17, Y+22	; 0x16
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	8c 83       	std	Y+4, r24	; 0x04
 414:	1a 83       	std	Y+2, r17	; 0x02
 416:	09 83       	std	Y+1, r16	; 0x01
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	9f e7       	ldi	r25, 0x7F	; 127
 41c:	9e 83       	std	Y+6, r25	; 0x06
 41e:	8d 83       	std	Y+5, r24	; 0x05
 420:	ae 01       	movw	r20, r28
 422:	47 5e       	subi	r20, 0xE7	; 231
 424:	5f 4f       	sbci	r21, 0xFF	; 255
 426:	6f 89       	ldd	r22, Y+23	; 0x17
 428:	78 8d       	ldd	r23, Y+24	; 0x18
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	0e 94 22 02 	call	0x444	; 0x444 <vfprintf>
 432:	ef 81       	ldd	r30, Y+7	; 0x07
 434:	f8 85       	ldd	r31, Y+8	; 0x08
 436:	e0 0f       	add	r30, r16
 438:	f1 1f       	adc	r31, r17
 43a:	10 82       	st	Z, r1
 43c:	2e 96       	adiw	r28, 0x0e	; 14
 43e:	e4 e0       	ldi	r30, 0x04	; 4
 440:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__epilogue_restores__+0x1c>

00000444 <vfprintf>:
 444:	ab e0       	ldi	r26, 0x0B	; 11
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	e8 e2       	ldi	r30, 0x28	; 40
 44a:	f2 e0       	ldi	r31, 0x02	; 2
 44c:	0c 94 b3 04 	jmp	0x966	; 0x966 <__prologue_saves__>
 450:	6c 01       	movw	r12, r24
 452:	7b 01       	movw	r14, r22
 454:	8a 01       	movw	r16, r20
 456:	fc 01       	movw	r30, r24
 458:	17 82       	std	Z+7, r1	; 0x07
 45a:	16 82       	std	Z+6, r1	; 0x06
 45c:	83 81       	ldd	r24, Z+3	; 0x03
 45e:	81 ff       	sbrs	r24, 1
 460:	cc c1       	rjmp	.+920    	; 0x7fa <vfprintf+0x3b6>
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	3c 01       	movw	r6, r24
 468:	f6 01       	movw	r30, r12
 46a:	93 81       	ldd	r25, Z+3	; 0x03
 46c:	f7 01       	movw	r30, r14
 46e:	93 fd       	sbrc	r25, 3
 470:	85 91       	lpm	r24, Z+
 472:	93 ff       	sbrs	r25, 3
 474:	81 91       	ld	r24, Z+
 476:	7f 01       	movw	r14, r30
 478:	88 23       	and	r24, r24
 47a:	09 f4       	brne	.+2      	; 0x47e <vfprintf+0x3a>
 47c:	ba c1       	rjmp	.+884    	; 0x7f2 <vfprintf+0x3ae>
 47e:	85 32       	cpi	r24, 0x25	; 37
 480:	39 f4       	brne	.+14     	; 0x490 <vfprintf+0x4c>
 482:	93 fd       	sbrc	r25, 3
 484:	85 91       	lpm	r24, Z+
 486:	93 ff       	sbrs	r25, 3
 488:	81 91       	ld	r24, Z+
 48a:	7f 01       	movw	r14, r30
 48c:	85 32       	cpi	r24, 0x25	; 37
 48e:	29 f4       	brne	.+10     	; 0x49a <vfprintf+0x56>
 490:	b6 01       	movw	r22, r12
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 498:	e7 cf       	rjmp	.-50     	; 0x468 <vfprintf+0x24>
 49a:	91 2c       	mov	r9, r1
 49c:	21 2c       	mov	r2, r1
 49e:	31 2c       	mov	r3, r1
 4a0:	ff e1       	ldi	r31, 0x1F	; 31
 4a2:	f3 15       	cp	r31, r3
 4a4:	d8 f0       	brcs	.+54     	; 0x4dc <vfprintf+0x98>
 4a6:	8b 32       	cpi	r24, 0x2B	; 43
 4a8:	79 f0       	breq	.+30     	; 0x4c8 <vfprintf+0x84>
 4aa:	38 f4       	brcc	.+14     	; 0x4ba <vfprintf+0x76>
 4ac:	80 32       	cpi	r24, 0x20	; 32
 4ae:	79 f0       	breq	.+30     	; 0x4ce <vfprintf+0x8a>
 4b0:	83 32       	cpi	r24, 0x23	; 35
 4b2:	a1 f4       	brne	.+40     	; 0x4dc <vfprintf+0x98>
 4b4:	23 2d       	mov	r18, r3
 4b6:	20 61       	ori	r18, 0x10	; 16
 4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <vfprintf+0xb0>
 4ba:	8d 32       	cpi	r24, 0x2D	; 45
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <vfprintf+0x92>
 4be:	80 33       	cpi	r24, 0x30	; 48
 4c0:	69 f4       	brne	.+26     	; 0x4dc <vfprintf+0x98>
 4c2:	23 2d       	mov	r18, r3
 4c4:	21 60       	ori	r18, 0x01	; 1
 4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <vfprintf+0xb0>
 4c8:	83 2d       	mov	r24, r3
 4ca:	82 60       	ori	r24, 0x02	; 2
 4cc:	38 2e       	mov	r3, r24
 4ce:	e3 2d       	mov	r30, r3
 4d0:	e4 60       	ori	r30, 0x04	; 4
 4d2:	3e 2e       	mov	r3, r30
 4d4:	2a c0       	rjmp	.+84     	; 0x52a <vfprintf+0xe6>
 4d6:	f3 2d       	mov	r31, r3
 4d8:	f8 60       	ori	r31, 0x08	; 8
 4da:	1d c0       	rjmp	.+58     	; 0x516 <vfprintf+0xd2>
 4dc:	37 fc       	sbrc	r3, 7
 4de:	2d c0       	rjmp	.+90     	; 0x53a <vfprintf+0xf6>
 4e0:	20 ed       	ldi	r18, 0xD0	; 208
 4e2:	28 0f       	add	r18, r24
 4e4:	2a 30       	cpi	r18, 0x0A	; 10
 4e6:	40 f0       	brcs	.+16     	; 0x4f8 <vfprintf+0xb4>
 4e8:	8e 32       	cpi	r24, 0x2E	; 46
 4ea:	b9 f4       	brne	.+46     	; 0x51a <vfprintf+0xd6>
 4ec:	36 fc       	sbrc	r3, 6
 4ee:	81 c1       	rjmp	.+770    	; 0x7f2 <vfprintf+0x3ae>
 4f0:	23 2d       	mov	r18, r3
 4f2:	20 64       	ori	r18, 0x40	; 64
 4f4:	32 2e       	mov	r3, r18
 4f6:	19 c0       	rjmp	.+50     	; 0x52a <vfprintf+0xe6>
 4f8:	36 fe       	sbrs	r3, 6
 4fa:	06 c0       	rjmp	.+12     	; 0x508 <vfprintf+0xc4>
 4fc:	8a e0       	ldi	r24, 0x0A	; 10
 4fe:	98 9e       	mul	r9, r24
 500:	20 0d       	add	r18, r0
 502:	11 24       	eor	r1, r1
 504:	92 2e       	mov	r9, r18
 506:	11 c0       	rjmp	.+34     	; 0x52a <vfprintf+0xe6>
 508:	ea e0       	ldi	r30, 0x0A	; 10
 50a:	2e 9e       	mul	r2, r30
 50c:	20 0d       	add	r18, r0
 50e:	11 24       	eor	r1, r1
 510:	22 2e       	mov	r2, r18
 512:	f3 2d       	mov	r31, r3
 514:	f0 62       	ori	r31, 0x20	; 32
 516:	3f 2e       	mov	r3, r31
 518:	08 c0       	rjmp	.+16     	; 0x52a <vfprintf+0xe6>
 51a:	8c 36       	cpi	r24, 0x6C	; 108
 51c:	21 f4       	brne	.+8      	; 0x526 <vfprintf+0xe2>
 51e:	83 2d       	mov	r24, r3
 520:	80 68       	ori	r24, 0x80	; 128
 522:	38 2e       	mov	r3, r24
 524:	02 c0       	rjmp	.+4      	; 0x52a <vfprintf+0xe6>
 526:	88 36       	cpi	r24, 0x68	; 104
 528:	41 f4       	brne	.+16     	; 0x53a <vfprintf+0xf6>
 52a:	f7 01       	movw	r30, r14
 52c:	93 fd       	sbrc	r25, 3
 52e:	85 91       	lpm	r24, Z+
 530:	93 ff       	sbrs	r25, 3
 532:	81 91       	ld	r24, Z+
 534:	7f 01       	movw	r14, r30
 536:	81 11       	cpse	r24, r1
 538:	b3 cf       	rjmp	.-154    	; 0x4a0 <vfprintf+0x5c>
 53a:	98 2f       	mov	r25, r24
 53c:	9f 7d       	andi	r25, 0xDF	; 223
 53e:	95 54       	subi	r25, 0x45	; 69
 540:	93 30       	cpi	r25, 0x03	; 3
 542:	28 f4       	brcc	.+10     	; 0x54e <vfprintf+0x10a>
 544:	0c 5f       	subi	r16, 0xFC	; 252
 546:	1f 4f       	sbci	r17, 0xFF	; 255
 548:	9f e3       	ldi	r25, 0x3F	; 63
 54a:	99 83       	std	Y+1, r25	; 0x01
 54c:	0d c0       	rjmp	.+26     	; 0x568 <vfprintf+0x124>
 54e:	83 36       	cpi	r24, 0x63	; 99
 550:	31 f0       	breq	.+12     	; 0x55e <vfprintf+0x11a>
 552:	83 37       	cpi	r24, 0x73	; 115
 554:	71 f0       	breq	.+28     	; 0x572 <vfprintf+0x12e>
 556:	83 35       	cpi	r24, 0x53	; 83
 558:	09 f0       	breq	.+2      	; 0x55c <vfprintf+0x118>
 55a:	59 c0       	rjmp	.+178    	; 0x60e <vfprintf+0x1ca>
 55c:	21 c0       	rjmp	.+66     	; 0x5a0 <vfprintf+0x15c>
 55e:	f8 01       	movw	r30, r16
 560:	80 81       	ld	r24, Z
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	0e 5f       	subi	r16, 0xFE	; 254
 566:	1f 4f       	sbci	r17, 0xFF	; 255
 568:	88 24       	eor	r8, r8
 56a:	83 94       	inc	r8
 56c:	91 2c       	mov	r9, r1
 56e:	53 01       	movw	r10, r6
 570:	13 c0       	rjmp	.+38     	; 0x598 <vfprintf+0x154>
 572:	28 01       	movw	r4, r16
 574:	f2 e0       	ldi	r31, 0x02	; 2
 576:	4f 0e       	add	r4, r31
 578:	51 1c       	adc	r5, r1
 57a:	f8 01       	movw	r30, r16
 57c:	a0 80       	ld	r10, Z
 57e:	b1 80       	ldd	r11, Z+1	; 0x01
 580:	36 fe       	sbrs	r3, 6
 582:	03 c0       	rjmp	.+6      	; 0x58a <vfprintf+0x146>
 584:	69 2d       	mov	r22, r9
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <vfprintf+0x14a>
 58a:	6f ef       	ldi	r22, 0xFF	; 255
 58c:	7f ef       	ldi	r23, 0xFF	; 255
 58e:	c5 01       	movw	r24, r10
 590:	0e 94 0e 04 	call	0x81c	; 0x81c <strnlen>
 594:	4c 01       	movw	r8, r24
 596:	82 01       	movw	r16, r4
 598:	f3 2d       	mov	r31, r3
 59a:	ff 77       	andi	r31, 0x7F	; 127
 59c:	3f 2e       	mov	r3, r31
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <vfprintf+0x188>
 5a0:	28 01       	movw	r4, r16
 5a2:	22 e0       	ldi	r18, 0x02	; 2
 5a4:	42 0e       	add	r4, r18
 5a6:	51 1c       	adc	r5, r1
 5a8:	f8 01       	movw	r30, r16
 5aa:	a0 80       	ld	r10, Z
 5ac:	b1 80       	ldd	r11, Z+1	; 0x01
 5ae:	36 fe       	sbrs	r3, 6
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <vfprintf+0x174>
 5b2:	69 2d       	mov	r22, r9
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <vfprintf+0x178>
 5b8:	6f ef       	ldi	r22, 0xFF	; 255
 5ba:	7f ef       	ldi	r23, 0xFF	; 255
 5bc:	c5 01       	movw	r24, r10
 5be:	0e 94 03 04 	call	0x806	; 0x806 <strnlen_P>
 5c2:	4c 01       	movw	r8, r24
 5c4:	f3 2d       	mov	r31, r3
 5c6:	f0 68       	ori	r31, 0x80	; 128
 5c8:	3f 2e       	mov	r3, r31
 5ca:	82 01       	movw	r16, r4
 5cc:	33 fc       	sbrc	r3, 3
 5ce:	1b c0       	rjmp	.+54     	; 0x606 <vfprintf+0x1c2>
 5d0:	82 2d       	mov	r24, r2
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	88 16       	cp	r8, r24
 5d6:	99 06       	cpc	r9, r25
 5d8:	b0 f4       	brcc	.+44     	; 0x606 <vfprintf+0x1c2>
 5da:	b6 01       	movw	r22, r12
 5dc:	80 e2       	ldi	r24, 0x20	; 32
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 5e4:	2a 94       	dec	r2
 5e6:	f4 cf       	rjmp	.-24     	; 0x5d0 <vfprintf+0x18c>
 5e8:	f5 01       	movw	r30, r10
 5ea:	37 fc       	sbrc	r3, 7
 5ec:	85 91       	lpm	r24, Z+
 5ee:	37 fe       	sbrs	r3, 7
 5f0:	81 91       	ld	r24, Z+
 5f2:	5f 01       	movw	r10, r30
 5f4:	b6 01       	movw	r22, r12
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 5fc:	21 10       	cpse	r2, r1
 5fe:	2a 94       	dec	r2
 600:	21 e0       	ldi	r18, 0x01	; 1
 602:	82 1a       	sub	r8, r18
 604:	91 08       	sbc	r9, r1
 606:	81 14       	cp	r8, r1
 608:	91 04       	cpc	r9, r1
 60a:	71 f7       	brne	.-36     	; 0x5e8 <vfprintf+0x1a4>
 60c:	e8 c0       	rjmp	.+464    	; 0x7de <vfprintf+0x39a>
 60e:	84 36       	cpi	r24, 0x64	; 100
 610:	11 f0       	breq	.+4      	; 0x616 <vfprintf+0x1d2>
 612:	89 36       	cpi	r24, 0x69	; 105
 614:	41 f5       	brne	.+80     	; 0x666 <vfprintf+0x222>
 616:	f8 01       	movw	r30, r16
 618:	37 fe       	sbrs	r3, 7
 61a:	07 c0       	rjmp	.+14     	; 0x62a <vfprintf+0x1e6>
 61c:	60 81       	ld	r22, Z
 61e:	71 81       	ldd	r23, Z+1	; 0x01
 620:	82 81       	ldd	r24, Z+2	; 0x02
 622:	93 81       	ldd	r25, Z+3	; 0x03
 624:	0c 5f       	subi	r16, 0xFC	; 252
 626:	1f 4f       	sbci	r17, 0xFF	; 255
 628:	08 c0       	rjmp	.+16     	; 0x63a <vfprintf+0x1f6>
 62a:	60 81       	ld	r22, Z
 62c:	71 81       	ldd	r23, Z+1	; 0x01
 62e:	07 2e       	mov	r0, r23
 630:	00 0c       	add	r0, r0
 632:	88 0b       	sbc	r24, r24
 634:	99 0b       	sbc	r25, r25
 636:	0e 5f       	subi	r16, 0xFE	; 254
 638:	1f 4f       	sbci	r17, 0xFF	; 255
 63a:	f3 2d       	mov	r31, r3
 63c:	ff 76       	andi	r31, 0x6F	; 111
 63e:	3f 2e       	mov	r3, r31
 640:	97 ff       	sbrs	r25, 7
 642:	09 c0       	rjmp	.+18     	; 0x656 <vfprintf+0x212>
 644:	90 95       	com	r25
 646:	80 95       	com	r24
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	f0 68       	ori	r31, 0x80	; 128
 654:	3f 2e       	mov	r3, r31
 656:	2a e0       	ldi	r18, 0x0A	; 10
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	a3 01       	movw	r20, r6
 65c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ultoa_invert>
 660:	88 2e       	mov	r8, r24
 662:	86 18       	sub	r8, r6
 664:	45 c0       	rjmp	.+138    	; 0x6f0 <vfprintf+0x2ac>
 666:	85 37       	cpi	r24, 0x75	; 117
 668:	31 f4       	brne	.+12     	; 0x676 <vfprintf+0x232>
 66a:	23 2d       	mov	r18, r3
 66c:	2f 7e       	andi	r18, 0xEF	; 239
 66e:	b2 2e       	mov	r11, r18
 670:	2a e0       	ldi	r18, 0x0A	; 10
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	25 c0       	rjmp	.+74     	; 0x6c0 <vfprintf+0x27c>
 676:	93 2d       	mov	r25, r3
 678:	99 7f       	andi	r25, 0xF9	; 249
 67a:	b9 2e       	mov	r11, r25
 67c:	8f 36       	cpi	r24, 0x6F	; 111
 67e:	c1 f0       	breq	.+48     	; 0x6b0 <vfprintf+0x26c>
 680:	18 f4       	brcc	.+6      	; 0x688 <vfprintf+0x244>
 682:	88 35       	cpi	r24, 0x58	; 88
 684:	79 f0       	breq	.+30     	; 0x6a4 <vfprintf+0x260>
 686:	b5 c0       	rjmp	.+362    	; 0x7f2 <vfprintf+0x3ae>
 688:	80 37       	cpi	r24, 0x70	; 112
 68a:	19 f0       	breq	.+6      	; 0x692 <vfprintf+0x24e>
 68c:	88 37       	cpi	r24, 0x78	; 120
 68e:	21 f0       	breq	.+8      	; 0x698 <vfprintf+0x254>
 690:	b0 c0       	rjmp	.+352    	; 0x7f2 <vfprintf+0x3ae>
 692:	e9 2f       	mov	r30, r25
 694:	e0 61       	ori	r30, 0x10	; 16
 696:	be 2e       	mov	r11, r30
 698:	b4 fe       	sbrs	r11, 4
 69a:	0d c0       	rjmp	.+26     	; 0x6b6 <vfprintf+0x272>
 69c:	fb 2d       	mov	r31, r11
 69e:	f4 60       	ori	r31, 0x04	; 4
 6a0:	bf 2e       	mov	r11, r31
 6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <vfprintf+0x272>
 6a4:	34 fe       	sbrs	r3, 4
 6a6:	0a c0       	rjmp	.+20     	; 0x6bc <vfprintf+0x278>
 6a8:	29 2f       	mov	r18, r25
 6aa:	26 60       	ori	r18, 0x06	; 6
 6ac:	b2 2e       	mov	r11, r18
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <vfprintf+0x278>
 6b0:	28 e0       	ldi	r18, 0x08	; 8
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <vfprintf+0x27c>
 6b6:	20 e1       	ldi	r18, 0x10	; 16
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <vfprintf+0x27c>
 6bc:	20 e1       	ldi	r18, 0x10	; 16
 6be:	32 e0       	ldi	r19, 0x02	; 2
 6c0:	f8 01       	movw	r30, r16
 6c2:	b7 fe       	sbrs	r11, 7
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <vfprintf+0x290>
 6c6:	60 81       	ld	r22, Z
 6c8:	71 81       	ldd	r23, Z+1	; 0x01
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	93 81       	ldd	r25, Z+3	; 0x03
 6ce:	0c 5f       	subi	r16, 0xFC	; 252
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <vfprintf+0x29c>
 6d4:	60 81       	ld	r22, Z
 6d6:	71 81       	ldd	r23, Z+1	; 0x01
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 5f       	subi	r16, 0xFE	; 254
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	a3 01       	movw	r20, r6
 6e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ultoa_invert>
 6e6:	88 2e       	mov	r8, r24
 6e8:	86 18       	sub	r8, r6
 6ea:	fb 2d       	mov	r31, r11
 6ec:	ff 77       	andi	r31, 0x7F	; 127
 6ee:	3f 2e       	mov	r3, r31
 6f0:	36 fe       	sbrs	r3, 6
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <vfprintf+0x2ca>
 6f4:	23 2d       	mov	r18, r3
 6f6:	2e 7f       	andi	r18, 0xFE	; 254
 6f8:	a2 2e       	mov	r10, r18
 6fa:	89 14       	cp	r8, r9
 6fc:	58 f4       	brcc	.+22     	; 0x714 <vfprintf+0x2d0>
 6fe:	34 fe       	sbrs	r3, 4
 700:	0b c0       	rjmp	.+22     	; 0x718 <vfprintf+0x2d4>
 702:	32 fc       	sbrc	r3, 2
 704:	09 c0       	rjmp	.+18     	; 0x718 <vfprintf+0x2d4>
 706:	83 2d       	mov	r24, r3
 708:	8e 7e       	andi	r24, 0xEE	; 238
 70a:	a8 2e       	mov	r10, r24
 70c:	05 c0       	rjmp	.+10     	; 0x718 <vfprintf+0x2d4>
 70e:	b8 2c       	mov	r11, r8
 710:	a3 2c       	mov	r10, r3
 712:	03 c0       	rjmp	.+6      	; 0x71a <vfprintf+0x2d6>
 714:	b8 2c       	mov	r11, r8
 716:	01 c0       	rjmp	.+2      	; 0x71a <vfprintf+0x2d6>
 718:	b9 2c       	mov	r11, r9
 71a:	a4 fe       	sbrs	r10, 4
 71c:	0f c0       	rjmp	.+30     	; 0x73c <vfprintf+0x2f8>
 71e:	fe 01       	movw	r30, r28
 720:	e8 0d       	add	r30, r8
 722:	f1 1d       	adc	r31, r1
 724:	80 81       	ld	r24, Z
 726:	80 33       	cpi	r24, 0x30	; 48
 728:	21 f4       	brne	.+8      	; 0x732 <vfprintf+0x2ee>
 72a:	9a 2d       	mov	r25, r10
 72c:	99 7e       	andi	r25, 0xE9	; 233
 72e:	a9 2e       	mov	r10, r25
 730:	09 c0       	rjmp	.+18     	; 0x744 <vfprintf+0x300>
 732:	a2 fe       	sbrs	r10, 2
 734:	06 c0       	rjmp	.+12     	; 0x742 <vfprintf+0x2fe>
 736:	b3 94       	inc	r11
 738:	b3 94       	inc	r11
 73a:	04 c0       	rjmp	.+8      	; 0x744 <vfprintf+0x300>
 73c:	8a 2d       	mov	r24, r10
 73e:	86 78       	andi	r24, 0x86	; 134
 740:	09 f0       	breq	.+2      	; 0x744 <vfprintf+0x300>
 742:	b3 94       	inc	r11
 744:	a3 fc       	sbrc	r10, 3
 746:	11 c0       	rjmp	.+34     	; 0x76a <vfprintf+0x326>
 748:	a0 fe       	sbrs	r10, 0
 74a:	06 c0       	rjmp	.+12     	; 0x758 <vfprintf+0x314>
 74c:	b2 14       	cp	r11, r2
 74e:	88 f4       	brcc	.+34     	; 0x772 <vfprintf+0x32e>
 750:	28 0c       	add	r2, r8
 752:	92 2c       	mov	r9, r2
 754:	9b 18       	sub	r9, r11
 756:	0e c0       	rjmp	.+28     	; 0x774 <vfprintf+0x330>
 758:	b2 14       	cp	r11, r2
 75a:	60 f4       	brcc	.+24     	; 0x774 <vfprintf+0x330>
 75c:	b6 01       	movw	r22, r12
 75e:	80 e2       	ldi	r24, 0x20	; 32
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 766:	b3 94       	inc	r11
 768:	f7 cf       	rjmp	.-18     	; 0x758 <vfprintf+0x314>
 76a:	b2 14       	cp	r11, r2
 76c:	18 f4       	brcc	.+6      	; 0x774 <vfprintf+0x330>
 76e:	2b 18       	sub	r2, r11
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x332>
 772:	98 2c       	mov	r9, r8
 774:	21 2c       	mov	r2, r1
 776:	a4 fe       	sbrs	r10, 4
 778:	10 c0       	rjmp	.+32     	; 0x79a <vfprintf+0x356>
 77a:	b6 01       	movw	r22, r12
 77c:	80 e3       	ldi	r24, 0x30	; 48
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 784:	a2 fe       	sbrs	r10, 2
 786:	17 c0       	rjmp	.+46     	; 0x7b6 <vfprintf+0x372>
 788:	a1 fc       	sbrc	r10, 1
 78a:	03 c0       	rjmp	.+6      	; 0x792 <vfprintf+0x34e>
 78c:	88 e7       	ldi	r24, 0x78	; 120
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <vfprintf+0x352>
 792:	88 e5       	ldi	r24, 0x58	; 88
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	b6 01       	movw	r22, r12
 798:	0c c0       	rjmp	.+24     	; 0x7b2 <vfprintf+0x36e>
 79a:	8a 2d       	mov	r24, r10
 79c:	86 78       	andi	r24, 0x86	; 134
 79e:	59 f0       	breq	.+22     	; 0x7b6 <vfprintf+0x372>
 7a0:	a1 fe       	sbrs	r10, 1
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <vfprintf+0x364>
 7a4:	8b e2       	ldi	r24, 0x2B	; 43
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <vfprintf+0x366>
 7a8:	80 e2       	ldi	r24, 0x20	; 32
 7aa:	a7 fc       	sbrc	r10, 7
 7ac:	8d e2       	ldi	r24, 0x2D	; 45
 7ae:	b6 01       	movw	r22, r12
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 7b6:	89 14       	cp	r8, r9
 7b8:	38 f4       	brcc	.+14     	; 0x7c8 <vfprintf+0x384>
 7ba:	b6 01       	movw	r22, r12
 7bc:	80 e3       	ldi	r24, 0x30	; 48
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 7c4:	9a 94       	dec	r9
 7c6:	f7 cf       	rjmp	.-18     	; 0x7b6 <vfprintf+0x372>
 7c8:	8a 94       	dec	r8
 7ca:	f3 01       	movw	r30, r6
 7cc:	e8 0d       	add	r30, r8
 7ce:	f1 1d       	adc	r31, r1
 7d0:	80 81       	ld	r24, Z
 7d2:	b6 01       	movw	r22, r12
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 7da:	81 10       	cpse	r8, r1
 7dc:	f5 cf       	rjmp	.-22     	; 0x7c8 <vfprintf+0x384>
 7de:	22 20       	and	r2, r2
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <vfprintf+0x3a0>
 7e2:	42 ce       	rjmp	.-892    	; 0x468 <vfprintf+0x24>
 7e4:	b6 01       	movw	r22, r12
 7e6:	80 e2       	ldi	r24, 0x20	; 32
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 19 04 	call	0x832	; 0x832 <fputc>
 7ee:	2a 94       	dec	r2
 7f0:	f6 cf       	rjmp	.-20     	; 0x7de <vfprintf+0x39a>
 7f2:	f6 01       	movw	r30, r12
 7f4:	86 81       	ldd	r24, Z+6	; 0x06
 7f6:	97 81       	ldd	r25, Z+7	; 0x07
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0x3ba>
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	9f ef       	ldi	r25, 0xFF	; 255
 7fe:	2b 96       	adiw	r28, 0x0b	; 11
 800:	e2 e1       	ldi	r30, 0x12	; 18
 802:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__epilogue_restores__>

00000806 <strnlen_P>:
 806:	fc 01       	movw	r30, r24
 808:	05 90       	lpm	r0, Z+
 80a:	61 50       	subi	r22, 0x01	; 1
 80c:	70 40       	sbci	r23, 0x00	; 0
 80e:	01 10       	cpse	r0, r1
 810:	d8 f7       	brcc	.-10     	; 0x808 <strnlen_P+0x2>
 812:	80 95       	com	r24
 814:	90 95       	com	r25
 816:	8e 0f       	add	r24, r30
 818:	9f 1f       	adc	r25, r31
 81a:	08 95       	ret

0000081c <strnlen>:
 81c:	fc 01       	movw	r30, r24
 81e:	61 50       	subi	r22, 0x01	; 1
 820:	70 40       	sbci	r23, 0x00	; 0
 822:	01 90       	ld	r0, Z+
 824:	01 10       	cpse	r0, r1
 826:	d8 f7       	brcc	.-10     	; 0x81e <strnlen+0x2>
 828:	80 95       	com	r24
 82a:	90 95       	com	r25
 82c:	8e 0f       	add	r24, r30
 82e:	9f 1f       	adc	r25, r31
 830:	08 95       	ret

00000832 <fputc>:
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	fb 01       	movw	r30, r22
 83c:	23 81       	ldd	r18, Z+3	; 0x03
 83e:	21 fd       	sbrc	r18, 1
 840:	03 c0       	rjmp	.+6      	; 0x848 <fputc+0x16>
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	9f ef       	ldi	r25, 0xFF	; 255
 846:	2c c0       	rjmp	.+88     	; 0x8a0 <__stack+0x41>
 848:	22 ff       	sbrs	r18, 2
 84a:	16 c0       	rjmp	.+44     	; 0x878 <__stack+0x19>
 84c:	46 81       	ldd	r20, Z+6	; 0x06
 84e:	57 81       	ldd	r21, Z+7	; 0x07
 850:	24 81       	ldd	r18, Z+4	; 0x04
 852:	35 81       	ldd	r19, Z+5	; 0x05
 854:	42 17       	cp	r20, r18
 856:	53 07       	cpc	r21, r19
 858:	44 f4       	brge	.+16     	; 0x86a <__stack+0xb>
 85a:	a0 81       	ld	r26, Z
 85c:	b1 81       	ldd	r27, Z+1	; 0x01
 85e:	9d 01       	movw	r18, r26
 860:	2f 5f       	subi	r18, 0xFF	; 255
 862:	3f 4f       	sbci	r19, 0xFF	; 255
 864:	31 83       	std	Z+1, r19	; 0x01
 866:	20 83       	st	Z, r18
 868:	8c 93       	st	X, r24
 86a:	26 81       	ldd	r18, Z+6	; 0x06
 86c:	37 81       	ldd	r19, Z+7	; 0x07
 86e:	2f 5f       	subi	r18, 0xFF	; 255
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	37 83       	std	Z+7, r19	; 0x07
 874:	26 83       	std	Z+6, r18	; 0x06
 876:	14 c0       	rjmp	.+40     	; 0x8a0 <__stack+0x41>
 878:	8b 01       	movw	r16, r22
 87a:	ec 01       	movw	r28, r24
 87c:	fb 01       	movw	r30, r22
 87e:	00 84       	ldd	r0, Z+8	; 0x08
 880:	f1 85       	ldd	r31, Z+9	; 0x09
 882:	e0 2d       	mov	r30, r0
 884:	09 95       	icall
 886:	89 2b       	or	r24, r25
 888:	e1 f6       	brne	.-72     	; 0x842 <fputc+0x10>
 88a:	d8 01       	movw	r26, r16
 88c:	16 96       	adiw	r26, 0x06	; 6
 88e:	8d 91       	ld	r24, X+
 890:	9c 91       	ld	r25, X
 892:	17 97       	sbiw	r26, 0x07	; 7
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	17 96       	adiw	r26, 0x07	; 7
 898:	9c 93       	st	X, r25
 89a:	8e 93       	st	-X, r24
 89c:	16 97       	sbiw	r26, 0x06	; 6
 89e:	ce 01       	movw	r24, r28
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	08 95       	ret

000008aa <__ultoa_invert>:
 8aa:	fa 01       	movw	r30, r20
 8ac:	aa 27       	eor	r26, r26
 8ae:	28 30       	cpi	r18, 0x08	; 8
 8b0:	51 f1       	breq	.+84     	; 0x906 <__ultoa_invert+0x5c>
 8b2:	20 31       	cpi	r18, 0x10	; 16
 8b4:	81 f1       	breq	.+96     	; 0x916 <__ultoa_invert+0x6c>
 8b6:	e8 94       	clt
 8b8:	6f 93       	push	r22
 8ba:	6e 7f       	andi	r22, 0xFE	; 254
 8bc:	6e 5f       	subi	r22, 0xFE	; 254
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	af 4f       	sbci	r26, 0xFF	; 255
 8c6:	b1 e0       	ldi	r27, 0x01	; 1
 8c8:	3e d0       	rcall	.+124    	; 0x946 <__ultoa_invert+0x9c>
 8ca:	b4 e0       	ldi	r27, 0x04	; 4
 8cc:	3c d0       	rcall	.+120    	; 0x946 <__ultoa_invert+0x9c>
 8ce:	67 0f       	add	r22, r23
 8d0:	78 1f       	adc	r23, r24
 8d2:	89 1f       	adc	r24, r25
 8d4:	9a 1f       	adc	r25, r26
 8d6:	a1 1d       	adc	r26, r1
 8d8:	68 0f       	add	r22, r24
 8da:	79 1f       	adc	r23, r25
 8dc:	8a 1f       	adc	r24, r26
 8de:	91 1d       	adc	r25, r1
 8e0:	a1 1d       	adc	r26, r1
 8e2:	6a 0f       	add	r22, r26
 8e4:	71 1d       	adc	r23, r1
 8e6:	81 1d       	adc	r24, r1
 8e8:	91 1d       	adc	r25, r1
 8ea:	a1 1d       	adc	r26, r1
 8ec:	20 d0       	rcall	.+64     	; 0x92e <__ultoa_invert+0x84>
 8ee:	09 f4       	brne	.+2      	; 0x8f2 <__ultoa_invert+0x48>
 8f0:	68 94       	set
 8f2:	3f 91       	pop	r19
 8f4:	2a e0       	ldi	r18, 0x0A	; 10
 8f6:	26 9f       	mul	r18, r22
 8f8:	11 24       	eor	r1, r1
 8fa:	30 19       	sub	r19, r0
 8fc:	30 5d       	subi	r19, 0xD0	; 208
 8fe:	31 93       	st	Z+, r19
 900:	de f6       	brtc	.-74     	; 0x8b8 <__ultoa_invert+0xe>
 902:	cf 01       	movw	r24, r30
 904:	08 95       	ret
 906:	46 2f       	mov	r20, r22
 908:	47 70       	andi	r20, 0x07	; 7
 90a:	40 5d       	subi	r20, 0xD0	; 208
 90c:	41 93       	st	Z+, r20
 90e:	b3 e0       	ldi	r27, 0x03	; 3
 910:	0f d0       	rcall	.+30     	; 0x930 <__ultoa_invert+0x86>
 912:	c9 f7       	brne	.-14     	; 0x906 <__ultoa_invert+0x5c>
 914:	f6 cf       	rjmp	.-20     	; 0x902 <__ultoa_invert+0x58>
 916:	46 2f       	mov	r20, r22
 918:	4f 70       	andi	r20, 0x0F	; 15
 91a:	40 5d       	subi	r20, 0xD0	; 208
 91c:	4a 33       	cpi	r20, 0x3A	; 58
 91e:	18 f0       	brcs	.+6      	; 0x926 <__ultoa_invert+0x7c>
 920:	49 5d       	subi	r20, 0xD9	; 217
 922:	31 fd       	sbrc	r19, 1
 924:	40 52       	subi	r20, 0x20	; 32
 926:	41 93       	st	Z+, r20
 928:	02 d0       	rcall	.+4      	; 0x92e <__ultoa_invert+0x84>
 92a:	a9 f7       	brne	.-22     	; 0x916 <__ultoa_invert+0x6c>
 92c:	ea cf       	rjmp	.-44     	; 0x902 <__ultoa_invert+0x58>
 92e:	b4 e0       	ldi	r27, 0x04	; 4
 930:	a6 95       	lsr	r26
 932:	97 95       	ror	r25
 934:	87 95       	ror	r24
 936:	77 95       	ror	r23
 938:	67 95       	ror	r22
 93a:	ba 95       	dec	r27
 93c:	c9 f7       	brne	.-14     	; 0x930 <__ultoa_invert+0x86>
 93e:	00 97       	sbiw	r24, 0x00	; 0
 940:	61 05       	cpc	r22, r1
 942:	71 05       	cpc	r23, r1
 944:	08 95       	ret
 946:	9b 01       	movw	r18, r22
 948:	ac 01       	movw	r20, r24
 94a:	0a 2e       	mov	r0, r26
 94c:	06 94       	lsr	r0
 94e:	57 95       	ror	r21
 950:	47 95       	ror	r20
 952:	37 95       	ror	r19
 954:	27 95       	ror	r18
 956:	ba 95       	dec	r27
 958:	c9 f7       	brne	.-14     	; 0x94c <__ultoa_invert+0xa2>
 95a:	62 0f       	add	r22, r18
 95c:	73 1f       	adc	r23, r19
 95e:	84 1f       	adc	r24, r20
 960:	95 1f       	adc	r25, r21
 962:	a0 1d       	adc	r26, r0
 964:	08 95       	ret

00000966 <__prologue_saves__>:
 966:	2f 92       	push	r2
 968:	3f 92       	push	r3
 96a:	4f 92       	push	r4
 96c:	5f 92       	push	r5
 96e:	6f 92       	push	r6
 970:	7f 92       	push	r7
 972:	8f 92       	push	r8
 974:	9f 92       	push	r9
 976:	af 92       	push	r10
 978:	bf 92       	push	r11
 97a:	cf 92       	push	r12
 97c:	df 92       	push	r13
 97e:	ef 92       	push	r14
 980:	ff 92       	push	r15
 982:	0f 93       	push	r16
 984:	1f 93       	push	r17
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	ca 1b       	sub	r28, r26
 990:	db 0b       	sbc	r29, r27
 992:	0f b6       	in	r0, 0x3f	; 63
 994:	f8 94       	cli
 996:	de bf       	out	0x3e, r29	; 62
 998:	0f be       	out	0x3f, r0	; 63
 99a:	cd bf       	out	0x3d, r28	; 61
 99c:	09 94       	ijmp

0000099e <__epilogue_restores__>:
 99e:	2a 88       	ldd	r2, Y+18	; 0x12
 9a0:	39 88       	ldd	r3, Y+17	; 0x11
 9a2:	48 88       	ldd	r4, Y+16	; 0x10
 9a4:	5f 84       	ldd	r5, Y+15	; 0x0f
 9a6:	6e 84       	ldd	r6, Y+14	; 0x0e
 9a8:	7d 84       	ldd	r7, Y+13	; 0x0d
 9aa:	8c 84       	ldd	r8, Y+12	; 0x0c
 9ac:	9b 84       	ldd	r9, Y+11	; 0x0b
 9ae:	aa 84       	ldd	r10, Y+10	; 0x0a
 9b0:	b9 84       	ldd	r11, Y+9	; 0x09
 9b2:	c8 84       	ldd	r12, Y+8	; 0x08
 9b4:	df 80       	ldd	r13, Y+7	; 0x07
 9b6:	ee 80       	ldd	r14, Y+6	; 0x06
 9b8:	fd 80       	ldd	r15, Y+5	; 0x05
 9ba:	0c 81       	ldd	r16, Y+4	; 0x04
 9bc:	1b 81       	ldd	r17, Y+3	; 0x03
 9be:	aa 81       	ldd	r26, Y+2	; 0x02
 9c0:	b9 81       	ldd	r27, Y+1	; 0x01
 9c2:	ce 0f       	add	r28, r30
 9c4:	d1 1d       	adc	r29, r1
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	f8 94       	cli
 9ca:	de bf       	out	0x3e, r29	; 62
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	cd bf       	out	0x3d, r28	; 61
 9d0:	ed 01       	movw	r28, r26
 9d2:	08 95       	ret

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
