
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009c4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000af4  08000af4  00001af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b0c  08000b0c  00001b14  2**0
                  CONTENTS
  4 .ARM          00000000  08000b0c  08000b0c  00001b14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b0c  08000b14  00001b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b0c  08000b0c  00001b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b10  08000b10  00001b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000b14  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000b14  00002060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000152c  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000687  00000000  00000000  00003069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000009e4  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  000040d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  00004298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000d28  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028dc  00000000  00000000  00005128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a394  00000000  00000000  00007a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011d98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000550  00000000  00000000  00011ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000adc 	.word	0x08000adc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000adc 	.word	0x08000adc

08000170 <EXTI0_IRQHandler>:

/************************************************************************************************/
/**********************************     ISR FUNCTIONS         ***********************************/
/************************************************************************************************/
void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	@ (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	@ (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	@ (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	@ (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	@ (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	@ (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	@ (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	@ (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear the pending the register of interrupt by writing 1
	(EXTI->PR) |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	@ (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	@ (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALLBACK
	GPtr_IRQ_CALLBACK[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	@ (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5); GPtr_IRQ_CALLBACK[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6); GPtr_IRQ_CALLBACK[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7); GPtr_IRQ_CALLBACK[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8); GPtr_IRQ_CALLBACK[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9); GPtr_IRQ_CALLBACK[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10); GPtr_IRQ_CALLBACK[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11); GPtr_IRQ_CALLBACK[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12); GPtr_IRQ_CALLBACK[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13); GPtr_IRQ_CALLBACK[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14); GPtr_IRQ_CALLBACK[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15); GPtr_IRQ_CALLBACK[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <Get_CRLH_Position>:

/********************************************************************************************************************************************/
                                              /*GENERIC FUNCTIONS*/
/********************************************************************************************************************************************/

uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80003a0:	f000 80a5 	beq.w	80004ee <Get_CRLH_Position+0x15e>
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80003a8:	f300 80a3 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80003b0:	f000 809b 	beq.w	80004ea <Get_CRLH_Position+0x15a>
 80003b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80003b8:	f300 809b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003c0:	f000 8091 	beq.w	80004e6 <Get_CRLH_Position+0x156>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003c8:	f300 8093 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80003d0:	f000 8087 	beq.w	80004e2 <Get_CRLH_Position+0x152>
 80003d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80003d8:	f300 808b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80003e0:	d07d      	beq.n	80004de <Get_CRLH_Position+0x14e>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80003e6:	f300 8084 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80003ee:	d074      	beq.n	80004da <Get_CRLH_Position+0x14a>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80003f4:	dc7d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 80003f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80003fa:	d06c      	beq.n	80004d6 <Get_CRLH_Position+0x146>
 80003fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000400:	dc77      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000406:	d064      	beq.n	80004d2 <Get_CRLH_Position+0x142>
 8000408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800040c:	dc71      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 800040e:	2b80      	cmp	r3, #128	@ 0x80
 8000410:	d05d      	beq.n	80004ce <Get_CRLH_Position+0x13e>
 8000412:	2b80      	cmp	r3, #128	@ 0x80
 8000414:	dc6d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000416:	2b20      	cmp	r3, #32
 8000418:	dc48      	bgt.n	80004ac <Get_CRLH_Position+0x11c>
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd69      	ble.n	80004f2 <Get_CRLH_Position+0x162>
 800041e:	3b01      	subs	r3, #1
 8000420:	2b1f      	cmp	r3, #31
 8000422:	d866      	bhi.n	80004f2 <Get_CRLH_Position+0x162>
 8000424:	a201      	add	r2, pc, #4	@ (adr r2, 800042c <Get_CRLH_Position+0x9c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b7 	.word	0x080004b7
 8000434:	080004f3 	.word	0x080004f3
 8000438:	080004bb 	.word	0x080004bb
 800043c:	080004f3 	.word	0x080004f3
 8000440:	080004f3 	.word	0x080004f3
 8000444:	080004f3 	.word	0x080004f3
 8000448:	080004bf 	.word	0x080004bf
 800044c:	080004f3 	.word	0x080004f3
 8000450:	080004f3 	.word	0x080004f3
 8000454:	080004f3 	.word	0x080004f3
 8000458:	080004f3 	.word	0x080004f3
 800045c:	080004f3 	.word	0x080004f3
 8000460:	080004f3 	.word	0x080004f3
 8000464:	080004f3 	.word	0x080004f3
 8000468:	080004c3 	.word	0x080004c3
 800046c:	080004f3 	.word	0x080004f3
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004f3 	.word	0x080004f3
 8000478:	080004f3 	.word	0x080004f3
 800047c:	080004f3 	.word	0x080004f3
 8000480:	080004f3 	.word	0x080004f3
 8000484:	080004f3 	.word	0x080004f3
 8000488:	080004f3 	.word	0x080004f3
 800048c:	080004f3 	.word	0x080004f3
 8000490:	080004f3 	.word	0x080004f3
 8000494:	080004f3 	.word	0x080004f3
 8000498:	080004f3 	.word	0x080004f3
 800049c:	080004f3 	.word	0x080004f3
 80004a0:	080004f3 	.word	0x080004f3
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	080004c7 	.word	0x080004c7
 80004ac:	2b40      	cmp	r3, #64	@ 0x40
 80004ae:	d00c      	beq.n	80004ca <Get_CRLH_Position+0x13a>
 80004b0:	e01f      	b.n	80004f2 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e01e      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01c      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	e01a      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	e018      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	e016      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80004c6:	2314      	movs	r3, #20
 80004c8:	e014      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80004ca:	2318      	movs	r3, #24
 80004cc:	e012      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80004ce:	231c      	movs	r3, #28
 80004d0:	e010      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e00e      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80004d6:	2304      	movs	r3, #4
 80004d8:	e00c      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80004da:	2308      	movs	r3, #8
 80004dc:	e00a      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80004de:	230c      	movs	r3, #12
 80004e0:	e008      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80004e2:	2310      	movs	r3, #16
 80004e4:	e006      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80004e6:	2314      	movs	r3, #20
 80004e8:	e004      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80004ea:	2318      	movs	r3, #24
 80004ec:	e002      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80004ee:	231c      	movs	r3, #28
 80004f0:	e000      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	default:
		return 0;
 80004f2:	2300      	movs	r3, #0
	}
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MCAL_GPIO_Init>:
 * @param [in]  : GPIOx(x can be A-...-E depending on the device used to selected)
 * @param [in]  : PinConfig pointer  to a GPIO_PinConfig_t structure that contains the config info for the selected GPIO peripheral
 * @retval 	 : None
 * Note		 : STM32F103C6 MCU has GPIO A,B,C,D,E modules but LQFP48 A,B AND PART OF C & D exported as external pins of MCU
  ========================================================================================================================================*/
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig){
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]

	// (GPIOx_CRL) Configuration Register Low (configures the lower 8 pins of the GPIO port 0---->7)
	// (GPIOx_CRL) Configuration Register High (configures the higher 8 pins of the GPIO port 8---->15)
	volatile uint32_t* Config_Register = NULL;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
	uint8_t PIN_Config = 0; //will hold the final 4-bit value that will be written to the CRL or CRH
 800050e:	2300      	movs	r3, #0
 8000510:	75fb      	strb	r3, [r7, #23]
	uint8_t position = Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff3a 	bl	8000390 <Get_CRLH_Position>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]

	// Select the correct configuration register (CRL or CRH)
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	2bff      	cmp	r3, #255	@ 0xff
 8000526:	d801      	bhi.n	800052c <MCAL_GPIO_Init+0x2c>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	e001      	b.n	8000530 <MCAL_GPIO_Init+0x30>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3304      	adds	r3, #4
 8000530:	613b      	str	r3, [r7, #16]

	/*Clear MODEx[1:0] and CNFx[1:0]*/
	(*Config_Register) &= ~(0xf <<position);
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	7bfa      	ldrb	r2, [r7, #15]
 8000538:	210f      	movs	r1, #15
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	43d2      	mvns	r2, r2
 8000540:	401a      	ands	r2, r3
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	789b      	ldrb	r3, [r3, #2]
 800054a:	2b04      	cmp	r3, #4
 800054c:	d00b      	beq.n	8000566 <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||
 8000552:	2b05      	cmp	r3, #5
 8000554:	d007      	beq.n	8000566 <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	789b      	ldrb	r3, [r3, #2]
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 800055a:	2b06      	cmp	r3, #6
 800055c:	d003      	beq.n	8000566 <MCAL_GPIO_Init+0x66>
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	789b      	ldrb	r3, [r3, #2]
	   (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000562:	2b07      	cmp	r3, #7
 8000564:	d10e      	bne.n	8000584 <MCAL_GPIO_Init+0x84>
	{
		/*SETS MODEx[1:0] and CNFx[1:0]*/
		PIN_Config = ((((PinConfig->GPIO_MODE -4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	789b      	ldrb	r3, [r3, #2]
 800056a:	3b04      	subs	r3, #4
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	b25a      	sxtb	r2, r3
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	78db      	ldrb	r3, [r3, #3]
 8000574:	b25b      	sxtb	r3, r3
 8000576:	4313      	orrs	r3, r2
 8000578:	b25b      	sxtb	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 030f 	and.w	r3, r3, #15
 8000580:	75fb      	strb	r3, [r7, #23]
 8000582:	e02c      	b.n	80005de <MCAL_GPIO_Init+0xde>

	}
	//if pin is input
	else //MODE = 00 BY DEFUALT
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d003      	beq.n	8000594 <MCAL_GPIO_Init+0x94>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	789b      	ldrb	r3, [r3, #2]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d107      	bne.n	80005a4 <MCAL_GPIO_Init+0xa4>
		{
			/*SETS MODEx[00] and CNFx[1:0]*/
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0f);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 030f 	and.w	r3, r3, #15
 80005a0:	75fb      	strb	r3, [r7, #23]
 80005a2:	e01c      	b.n	80005de <MCAL_GPIO_Init+0xde>

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	d102      	bne.n	80005b2 <MCAL_GPIO_Init+0xb2>
		{
			/*SETS MODEx[00] and CNFx[1:0]*/
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0f);
 80005ac:	2304      	movs	r3, #4
 80005ae:	75fb      	strb	r3, [r7, #23]
 80005b0:	e015      	b.n	80005de <MCAL_GPIO_Init+0xde>
		}
		else
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | (0x0)) & 0x0f);
 80005b2:	2308      	movs	r3, #8
 80005b4:	75fb      	strb	r3, [r7, #23]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d107      	bne.n	80005ce <MCAL_GPIO_Init+0xce>
			{
				//incase of pull-up PxODR set to 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	8812      	ldrh	r2, [r2, #0]
 80005c6:	431a      	orrs	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	e007      	b.n	80005de <MCAL_GPIO_Init+0xde>
			}else
			{
				//incase of pull-down PxODR clears
				GPIOx->ODR &= ~ (PinConfig->GPIO_PinNumber);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	8812      	ldrh	r2, [r2, #0]
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60da      	str	r2, [r3, #12]
			}
		}

	}
	//write on the CRL or CRH
	(*Config_Register) |= (PIN_Config << position);
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7df9      	ldrb	r1, [r7, #23]
 80005e4:	7bfa      	ldrb	r2, [r7, #15]
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	431a      	orrs	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	601a      	str	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <MCAL_RCC_get_SYSCLK_FREQUENCY>:
//1111: SYSCLK divided by
const uint8_t AHBPrescalerTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,6,7,8,9};


uint32_t MCAL_RCC_get_SYSCLK_FREQUENCY(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR >> 2) & 0b11)
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <MCAL_RCC_get_SYSCLK_FREQUENCY+0x34>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	2b02      	cmp	r3, #2
 8000608:	d00a      	beq.n	8000620 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x28>
 800060a:	2b02      	cmp	r3, #2
 800060c:	d80a      	bhi.n	8000624 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x2c>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x20>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d002      	beq.n	800061c <MCAL_RCC_get_SYSCLK_FREQUENCY+0x24>
 8000616:	e005      	b.n	8000624 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x2c>
	{
	case 0:
		return HSI_RC_CLK;
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x38>)
 800061a:	e003      	b.n	8000624 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x2c>
		break;
	case 1:
		//user should specify it
		return HSE_CLK;
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x3c>)
 800061e:	e001      	b.n	8000624 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x2c>
		break;
	case 2:
		//user should specify it
		return 16000000;
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x3c>)
 8000622:	e7ff      	b.n	8000624 <MCAL_RCC_get_SYSCLK_FREQUENCY+0x2c>
		break;
	}
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	007a1200 	.word	0x007a1200
 8000634:	00f42400 	.word	0x00f42400

08000638 <MCAL_RCC_get_HCLK_FREQUENCY>:
uint32_t MCAL_RCC_get_HCLK_FREQUENCY(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
//	Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_get_SYSCLK_FREQUENCY() >> AHBPrescalerTable[(RCC->CFGR >> 4) & 0xf] );
 800063c:	f7ff ffdc 	bl	80005f8 <MCAL_RCC_get_SYSCLK_FREQUENCY>
 8000640:	4602      	mov	r2, r0
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <MCAL_RCC_get_HCLK_FREQUENCY+0x20>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	4903      	ldr	r1, [pc, #12]	@ (800065c <MCAL_RCC_get_HCLK_FREQUENCY+0x24>)
 800064e:	5ccb      	ldrb	r3, [r1, r3]
 8000650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	08000afc 	.word	0x08000afc

08000660 <MCAL_RCC_get_PCLK1_FREQUENCY>:
uint32_t MCAL_RCC_get_PCLK1_FREQUENCY(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
//	Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_get_HCLK_FREQUENCY() >> APBPrescalerTable[(RCC->CFGR >> 8) & 0b111] );
 8000664:	f7ff ffe8 	bl	8000638 <MCAL_RCC_get_HCLK_FREQUENCY>
 8000668:	4602      	mov	r2, r0
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <MCAL_RCC_get_PCLK1_FREQUENCY+0x20>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	f003 0307 	and.w	r3, r3, #7
 8000674:	4903      	ldr	r1, [pc, #12]	@ (8000684 <MCAL_RCC_get_PCLK1_FREQUENCY+0x24>)
 8000676:	5ccb      	ldrb	r3, [r1, r3]
 8000678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	08000af4 	.word	0x08000af4

08000688 <MCAL_RCC_get_PCLK2_FREQUENCY>:


uint32_t MCAL_RCC_get_PCLK2_FREQUENCY(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_get_HCLK_FREQUENCY() >> APBPrescalerTable[(RCC->CFGR >> 11) & 0b111] );
 800068c:	f7ff ffd4 	bl	8000638 <MCAL_RCC_get_HCLK_FREQUENCY>
 8000690:	4602      	mov	r2, r0
 8000692:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <MCAL_RCC_get_PCLK2_FREQUENCY+0x20>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	0adb      	lsrs	r3, r3, #11
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	4903      	ldr	r1, [pc, #12]	@ (80006ac <MCAL_RCC_get_PCLK2_FREQUENCY+0x24>)
 800069e:	5ccb      	ldrb	r3, [r1, r3]
 80006a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	08000af4 	.word	0x08000af4

080006b0 <MCAL_UART_INIT>:
 * @param [in]  : UART_config (All uart configuration UART_Config
 * @retval 	 :  NONE
 * Note		 : CLOCK 8 MHZ
  ========================================================================================================================================*/
void MCAL_UART_INIT (USART_TypeDef* USARTx, UART_Config* UART_Config)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;
	Global_UART_Config = UART_Config;
 80006ba:	4a54      	ldr	r2, [pc, #336]	@ (800080c <MCAL_UART_INIT+0x15c>)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	6013      	str	r3, [r2, #0]

	//Enable the clock for the given USART
	if(USARTx == USART1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a53      	ldr	r2, [pc, #332]	@ (8000810 <MCAL_UART_INIT+0x160>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d106      	bne.n	80006d6 <MCAL_UART_INIT+0x26>
		RCC_USART1_CLK_EN();
 80006c8:	4b52      	ldr	r3, [pc, #328]	@ (8000814 <MCAL_UART_INIT+0x164>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a51      	ldr	r2, [pc, #324]	@ (8000814 <MCAL_UART_INIT+0x164>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	e014      	b.n	8000700 <MCAL_UART_INIT+0x50>

	else if(USARTx == USART2)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a4f      	ldr	r2, [pc, #316]	@ (8000818 <MCAL_UART_INIT+0x168>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d106      	bne.n	80006ec <MCAL_UART_INIT+0x3c>
		RCC_USART2_CLK_EN();
 80006de:	4b4d      	ldr	r3, [pc, #308]	@ (8000814 <MCAL_UART_INIT+0x164>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000814 <MCAL_UART_INIT+0x164>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	e009      	b.n	8000700 <MCAL_UART_INIT+0x50>

	else if(USARTx == USART3)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a4b      	ldr	r2, [pc, #300]	@ (800081c <MCAL_UART_INIT+0x16c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d105      	bne.n	8000700 <MCAL_UART_INIT+0x50>
		RCC_USART3_CLK_EN();
 80006f4:	4b47      	ldr	r3, [pc, #284]	@ (8000814 <MCAL_UART_INIT+0x164>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	4a46      	ldr	r2, [pc, #280]	@ (8000814 <MCAL_UART_INIT+0x164>)
 80006fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006fe:	61d3      	str	r3, [r2, #28]

	//Enable the USART MODULE
	USARTx->USART_CR1 |= (1<<13);//Bit 13 UE: USART enable
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	60da      	str	r2, [r3, #12]

	//Enable USART TX & RX engines according  to the USART_Mode configuration item
	USARTx->USART_CR1 |= UART_Config->USART_MODE;//Bit 3 TE: Transmitter enable  Bit 2 RE: Receiver enable
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	431a      	orrs	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	60da      	str	r2, [r3, #12]

	//payload width
	USARTx->USART_CR1 |= UART_Config->Payload_Length;//Bit 12 M: Word length
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	7a12      	ldrb	r2, [r2, #8]
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60da      	str	r2, [r3, #12]

	//parity configuration
	USARTx->USART_CR1 = UART_Config->Parity; //Bit 10 PCE: Parity control enable & Bit 9 PS: Parity selection
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	7a5b      	ldrb	r3, [r3, #9]
 800072c:	461a      	mov	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]

	//stopbits configuartion
	USARTx->USART_CR2 = UART_Config->Stopbits; //Bits 13:12 STOP: STOP bits
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	7a9b      	ldrb	r3, [r3, #10]
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	611a      	str	r2, [r3, #16]

	//Flow contorl configuration
	USARTx->USART_CR3 = UART_Config->HW_Flow_ctrl;//Bit 9 CTSE: CTS enable & Bit 8 RTSE: RTS enable
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	7adb      	ldrb	r3, [r3, #11]
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(BaudeRate Register)
	//PLCLK1 for usart2,3
	//PLCLK2 for USART1

	if (USARTx == USART1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a31      	ldr	r2, [pc, #196]	@ (8000810 <MCAL_UART_INIT+0x160>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d103      	bne.n	8000756 <MCAL_UART_INIT+0xa6>
	{
		pclk = MCAL_RCC_get_PCLK2_FREQUENCY();
 800074e:	f7ff ff9b 	bl	8000688 <MCAL_RCC_get_PCLK2_FREQUENCY>
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	e002      	b.n	800075c <MCAL_UART_INIT+0xac>
	}
	else
	{
		pclk = MCAL_RCC_get_PCLK1_FREQUENCY();
 8000756:	f7ff ff83 	bl	8000660 <MCAL_RCC_get_PCLK1_FREQUENCY>
 800075a:	60f8      	str	r0, [r7, #12]
	}
	BRR = UART_BRR_REGISTER(pclk,UART_Config->BaudeRate);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	fbb2 f3f3 	udiv	r3, r2, r3
 8000768:	0119      	lsls	r1, r3, #4
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	009a      	lsls	r2, r3, #2
 8000774:	441a      	add	r2, r3
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	fbb0 f3f3 	udiv	r3, r0, r3
 800078c:	2064      	movs	r0, #100	@ 0x64
 800078e:	fb00 f303 	mul.w	r3, r0, r3
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <MCAL_UART_INIT+0x170>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	095b      	lsrs	r3, r3, #5
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	430b      	orrs	r3, r1
 80007a4:	60bb      	str	r3, [r7, #8]
	USARTx->USART_BRR = BRR;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	609a      	str	r2, [r3, #8]

	//Enable / disable the interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable != UART_IRQ_ENABLE_NONE)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	7b1b      	ldrb	r3, [r3, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d026      	beq.n	8000802 <MCAL_UART_INIT+0x152>
	{
		USARTx->USART_CR1 |=(UART_Config->IRQ_Enable);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	7b12      	ldrb	r2, [r2, #12]
 80007bc:	431a      	orrs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60da      	str	r2, [r3, #12]
		//Enable NVIC interrupt for USARTx IRQ
		if(USARTx == USART1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MCAL_UART_INIT+0x160>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <MCAL_UART_INIT+0x128>
			NVIC_IRQ37_USART1_Enable;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MCAL_UART_INIT+0x174>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <MCAL_UART_INIT+0x174>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2)
			NVIC_IRQ38_USART2_Enable;
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}
}
 80007d6:	e014      	b.n	8000802 <MCAL_UART_INIT+0x152>
		else if(USARTx == USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a0f      	ldr	r2, [pc, #60]	@ (8000818 <MCAL_UART_INIT+0x168>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <MCAL_UART_INIT+0x13e>
			NVIC_IRQ38_USART2_Enable;
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MCAL_UART_INIT+0x174>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000824 <MCAL_UART_INIT+0x174>)
 80007e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	e009      	b.n	8000802 <MCAL_UART_INIT+0x152>
		else if(USARTx == USART3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <MCAL_UART_INIT+0x16c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d105      	bne.n	8000802 <MCAL_UART_INIT+0x152>
			NVIC_IRQ39_USART3_Enable;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MCAL_UART_INIT+0x174>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <MCAL_UART_INIT+0x174>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000800:	6013      	str	r3, [r2, #0]
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000058 	.word	0x20000058
 8000810:	40013800 	.word	0x40013800
 8000814:	40021000 	.word	0x40021000
 8000818:	40004400 	.word	0x40004400
 800081c:	40004800 	.word	0x40004800
 8000820:	51eb851f 	.word	0x51eb851f
 8000824:	e000e104 	.word	0xe000e104

08000828 <MCAL_UART_SEND_DATA>:
}



void MCAL_UART_SEND_DATA(USART_TypeDef* USARTx,uint16_t* ptxBuffer, enum Polling_mechism PollingEN)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	4613      	mov	r3, r2
 8000834:	71fb      	strb	r3, [r7, #7]
	//wait untill TXE flag is set in the ISR
	if (PollingEN == enable)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d106      	bne.n	800084a <MCAL_UART_SEND_DATA+0x22>
	while(!(USARTx->USART_SR & (1<<7)));
 800083c:	bf00      	nop
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <MCAL_UART_SEND_DATA+0x16>
	{
		USARTx->USART_DR = (*ptxBuffer & (uint16_t)0x01FF);
	}
	else
	{
		USARTx->USART_DR = (*ptxBuffer & (uint8_t)0xFF);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	605a      	str	r2, [r3, #4]
	}
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
	...

08000860 <MCAL_UART_RECIEVE_DATA>:

}


void MCAL_UART_RECIEVE_DATA(USART_TypeDef* USARTx,uint16_t* ptxBuffer, enum Polling_mechism PollingEN)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	4613      	mov	r3, r2
 800086c:	71fb      	strb	r3, [r7, #7]
	//wait until RXNE flag is set in the SR
	if (PollingEN == enable)
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d106      	bne.n	8000882 <MCAL_UART_RECIEVE_DATA+0x22>
	{
		while(!(USARTx->USART_SR & (1 << 5)));
 8000874:	bf00      	nop
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f9      	beq.n	8000876 <MCAL_UART_RECIEVE_DATA+0x16>
			*((uint16_t*)ptxBuffer) = (USARTx->USART_DR & (uint8_t)0xFF);
		}
	}
	else
	{
		if(Global_UART_Config->Parity == UART_Parity_NONE)
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <MCAL_UART_RECIEVE_DATA+0x58>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	7a5b      	ldrb	r3, [r3, #9]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d107      	bne.n	800089c <MCAL_UART_RECIEVE_DATA+0x3c>
		{
			//no parity, all 8bit are data
			*((uint16_t*)ptxBuffer) = (USARTx->USART_DR & (uint8_t)0xFF);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	801a      	strh	r2, [r3, #0]
		else
		{	//7 bit is data, 1 bit is parity
			*((uint16_t*)ptxBuffer) = (USARTx->USART_DR & (uint8_t)0x7F);
		}
	}
}
 800089a:	e007      	b.n	80008ac <MCAL_UART_RECIEVE_DATA+0x4c>
			*((uint16_t*)ptxBuffer) = (USARTx->USART_DR & (uint8_t)0x7F);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	801a      	strh	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000058 	.word	0x20000058

080008bc <MCAL_UART_GPIO_SET_PINS>:


void MCAL_UART_GPIO_SET_PINS(USART_TypeDef* USARTx)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;
	if(USARTx == USART1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <MCAL_UART_GPIO_SET_PINS+0xb4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d117      	bne.n	80008fc <MCAL_UART_GPIO_SET_PINS+0x40>
	{
		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80008cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008d0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008d2:	2306      	movs	r3, #6
 80008d4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4824      	ldr	r0, [pc, #144]	@ (8000974 <MCAL_UART_GPIO_SET_PINS+0xb8>)
 80008e2:	f7ff fe0d 	bl	8000500 <MCAL_GPIO_Init>
		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ea:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80008ec:	2308      	movs	r3, #8
 80008ee:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	481f      	ldr	r0, [pc, #124]	@ (8000974 <MCAL_UART_GPIO_SET_PINS+0xb8>)
 80008f8:	f7ff fe02 	bl	8000500 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}

	if(USARTx == USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000978 <MCAL_UART_GPIO_SET_PINS+0xbc>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d115      	bne.n	8000930 <MCAL_UART_GPIO_SET_PINS+0x74>
	{
		//PA2 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000904:	2304      	movs	r3, #4
 8000906:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000908:	2306      	movs	r3, #6
 800090a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800090c:	2301      	movs	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4817      	ldr	r0, [pc, #92]	@ (8000974 <MCAL_UART_GPIO_SET_PINS+0xb8>)
 8000918:	f7ff fdf2 	bl	8000500 <MCAL_GPIO_Init>
		//PA3 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800091c:	2308      	movs	r3, #8
 800091e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000920:	2308      	movs	r3, #8
 8000922:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4812      	ldr	r0, [pc, #72]	@ (8000974 <MCAL_UART_GPIO_SET_PINS+0xb8>)
 800092c:	f7ff fde8 	bl	8000500 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}

	if(USARTx == USART3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MCAL_UART_GPIO_SET_PINS+0xc0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d117      	bne.n	8000968 <MCAL_UART_GPIO_SET_PINS+0xac>
	{
		//PB10 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800093e:	2306      	movs	r3, #6
 8000940:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MCAL_UART_GPIO_SET_PINS+0xc4>)
 800094e:	f7ff fdd7 	bl	8000500 <MCAL_GPIO_Init>
		//PB11 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000952:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000956:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000958:	2308      	movs	r3, #8
 800095a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4807      	ldr	r0, [pc, #28]	@ (8000980 <MCAL_UART_GPIO_SET_PINS+0xc4>)
 8000964:	f7ff fdcc 	bl	8000500 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}

}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013800 	.word	0x40013800
 8000974:	40010800 	.word	0x40010800
 8000978:	40004400 	.word	0x40004400
 800097c:	40004800 	.word	0x40004800
 8000980:	40010c00 	.word	0x40010c00

08000984 <USART1_IRQHandler>:


//ISR
void USART1_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 8000988:	4b02      	ldr	r3, [pc, #8]	@ (8000994 <USART1_IRQHandler+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	4798      	blx	r3
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000058 	.word	0x20000058

08000998 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 800099c:	4b02      	ldr	r3, [pc, #8]	@ (80009a8 <USART2_IRQHandler+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	4798      	blx	r3
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000058 	.word	0x20000058

080009ac <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 80009b0:	4b02      	ldr	r3, [pc, #8]	@ (80009bc <USART3_IRQHandler+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	4798      	blx	r3
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000058 	.word	0x20000058

080009c0 <main>:


uint8_t ch;

int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

	//Enable the clocks
	RCC_GPIOA_CLK_EN();
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <main+0x74>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <main+0x74>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <main+0x74>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <main+0x74>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <main+0x74>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <main+0x74>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6193      	str	r3, [r2, #24]

	UART_Config UartOUScfg;
	UartOUScfg.BaudeRate = UART_BAUDRATE_115200;
 80009ea:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80009ee:	60bb      	str	r3, [r7, #8]
	UartOUScfg.HW_Flow_ctrl = UART_HW_FLOW_CTRL_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
	UartOUScfg.IRQ_Enable = UART_IRQ_ENABLE_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	743b      	strb	r3, [r7, #16]
	UartOUScfg.P_IRQ_CALLBACK = NULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
	UartOUScfg.Parity = UART_Parity_NONE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	737b      	strb	r3, [r7, #13]
	UartOUScfg.Payload_Length = UART_PAYLOAD_LENGTH_8B;
 8000a00:	2300      	movs	r3, #0
 8000a02:	733b      	strb	r3, [r7, #12]
	UartOUScfg.Stopbits = UART_StopBits_1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73bb      	strb	r3, [r7, #14]
	UartOUScfg.USART_MODE = UART_MODE_TX_RX;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	713b      	strb	r3, [r7, #4]

	MCAL_UART_INIT(USART1, &UartOUScfg);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <main+0x78>)
 8000a12:	f7ff fe4d 	bl	80006b0 <MCAL_UART_INIT>
	MCAL_UART_GPIO_SET_PINS(USART1);
 8000a16:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <main+0x78>)
 8000a18:	f7ff ff50 	bl	80008bc <MCAL_UART_GPIO_SET_PINS>
	while(1)
	{
		MCAL_UART_RECIEVE_DATA(USART1, &ch, enable);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4907      	ldr	r1, [pc, #28]	@ (8000a3c <main+0x7c>)
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <main+0x78>)
 8000a22:	f7ff ff1d 	bl	8000860 <MCAL_UART_RECIEVE_DATA>
		MCAL_UART_SEND_DATA(USART1, &ch, enable);
 8000a26:	2200      	movs	r2, #0
 8000a28:	4904      	ldr	r1, [pc, #16]	@ (8000a3c <main+0x7c>)
 8000a2a:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <main+0x78>)
 8000a2c:	f7ff fefc 	bl	8000828 <MCAL_UART_SEND_DATA>
		MCAL_UART_RECIEVE_DATA(USART1, &ch, enable);
 8000a30:	bf00      	nop
 8000a32:	e7f3      	b.n	8000a1c <main+0x5c>
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40013800 	.word	0x40013800
 8000a3c:	2000005c 	.word	0x2000005c

08000a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a44:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a6e:	f000 f811 	bl	8000a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff ffa5 	bl	80009c0 <main>

08000a76 <LoopForever>:

LoopForever:
  b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a84:	08000b14 	.word	0x08000b14
  ldr r2, =_sbss
 8000a88:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a8c:	20000060 	.word	0x20000060

08000a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_2_IRQHandler>
	...

08000a94 <__libc_init_array>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	2600      	movs	r6, #0
 8000a98:	4d0c      	ldr	r5, [pc, #48]	@ (8000acc <__libc_init_array+0x38>)
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	@ (8000ad0 <__libc_init_array+0x3c>)
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	42a6      	cmp	r6, r4
 8000aa2:	d109      	bne.n	8000ab8 <__libc_init_array+0x24>
 8000aa4:	f000 f81a 	bl	8000adc <_init>
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	4d0a      	ldr	r5, [pc, #40]	@ (8000ad4 <__libc_init_array+0x40>)
 8000aac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad8 <__libc_init_array+0x44>)
 8000aae:	1b64      	subs	r4, r4, r5
 8000ab0:	10a4      	asrs	r4, r4, #2
 8000ab2:	42a6      	cmp	r6, r4
 8000ab4:	d105      	bne.n	8000ac2 <__libc_init_array+0x2e>
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000abc:	4798      	blx	r3
 8000abe:	3601      	adds	r6, #1
 8000ac0:	e7ee      	b.n	8000aa0 <__libc_init_array+0xc>
 8000ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac6:	4798      	blx	r3
 8000ac8:	3601      	adds	r6, #1
 8000aca:	e7f2      	b.n	8000ab2 <__libc_init_array+0x1e>
 8000acc:	08000b0c 	.word	0x08000b0c
 8000ad0:	08000b0c 	.word	0x08000b0c
 8000ad4:	08000b0c 	.word	0x08000b0c
 8000ad8:	08000b10 	.word	0x08000b10

08000adc <_init>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	bf00      	nop
 8000ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae2:	bc08      	pop	{r3}
 8000ae4:	469e      	mov	lr, r3
 8000ae6:	4770      	bx	lr

08000ae8 <_fini>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	bf00      	nop
 8000aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	469e      	mov	lr, r3
 8000af2:	4770      	bx	lr
