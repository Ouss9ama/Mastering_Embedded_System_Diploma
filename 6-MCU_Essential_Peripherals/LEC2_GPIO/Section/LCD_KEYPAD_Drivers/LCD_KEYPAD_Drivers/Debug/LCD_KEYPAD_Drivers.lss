
LCD_KEYPAD_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000003d0  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b96  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a4  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000074c  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000404  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000297a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  7a:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_INIT>:

int Keypad_Row[] = {R0, R1, R2, R3};
int Keypad_Column[] = {C0, C1, C2, C3};

void KEYPAD_INIT(){
	DDR_KEYPAD_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	DDR_KEYPAD_PORT |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <KEYPAD_GETCHAR>:
}

char KEYPAD_GETCHAR(){
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	int i,j; //i to iterate over the column (0-->3) and j to iterate over the row (0-->3) 
	for(i = 0; i < 4; i++){ //activating one column at a time
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	9d c0       	rjmp	.+314    	; 0x1dc <KEYPAD_GETCHAR+0x148>
		KEYPAD_PORT |= ((1 << Keypad_Column[0]) | (1 << Keypad_Column[1]) | (1 << Keypad_Column[2]) | (1 << Keypad_Column[3])); //set all column high
  a2:	32 b3       	in	r19, 0x12	; 18
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	8c 01       	movw	r16, r24
  ae:	00 80       	ld	r0, Z
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <KEYPAD_GETCHAR+0x22>
  b2:	00 0f       	add	r16, r16
  b4:	11 1f       	adc	r17, r17
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <KEYPAD_GETCHAR+0x1e>
  ba:	ec 01       	movw	r28, r24
  bc:	02 80       	ldd	r0, Z+2	; 0x02
  be:	02 c0       	rjmp	.+4      	; 0xc4 <KEYPAD_GETCHAR+0x30>
  c0:	cc 0f       	add	r28, r28
  c2:	dd 1f       	adc	r29, r29
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <KEYPAD_GETCHAR+0x2c>
  c8:	dc 01       	movw	r26, r24
  ca:	04 80       	ldd	r0, Z+4	; 0x04
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <KEYPAD_GETCHAR+0x3e>
  ce:	aa 0f       	add	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <KEYPAD_GETCHAR+0x3a>
  d6:	bc 01       	movw	r22, r24
  d8:	06 80       	ldd	r0, Z+6	; 0x06
  da:	02 c0       	rjmp	.+4      	; 0xe0 <KEYPAD_GETCHAR+0x4c>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <KEYPAD_GETCHAR+0x48>
  e4:	2c 2f       	mov	r18, r28
  e6:	20 2b       	or	r18, r16
  e8:	2a 2b       	or	r18, r26
  ea:	26 2b       	or	r18, r22
  ec:	23 2b       	or	r18, r19
  ee:	22 bb       	out	0x12, r18	; 18
		KEYPAD_PORT &= ~ (1 << Keypad_Column[i]);//pull the current column low
  f0:	22 b3       	in	r18, 0x12	; 18
  f2:	fa 01       	movw	r30, r20
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	00 80       	ld	r0, Z
  fe:	02 c0       	rjmp	.+4      	; 0x104 <KEYPAD_GETCHAR+0x70>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <KEYPAD_GETCHAR+0x6c>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	82 bb       	out	0x12, r24	; 18
		for(j = 0; j < 4; j++){ //iterate over the rows to check which row pulled low 
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	5e c0       	rjmp	.+188    	; 0x1d0 <KEYPAD_GETCHAR+0x13c>
			if(!(KEYPAD_PIN & (1<<Keypad_Row[j]))){ //see which row pulled the target column i, if its pin is low then is it one the one if(!0) == true 
 114:	80 b3       	in	r24, 0x10	; 16
 116:	fb 01       	movw	r30, r22
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	e8 59       	subi	r30, 0x98	; 152
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	20 81       	ld	r18, Z
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <KEYPAD_GETCHAR+0x98>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <KEYPAD_GETCHAR+0x94>
 130:	80 fd       	sbrc	r24, 0
 132:	4c c0       	rjmp	.+152    	; 0x1cc <KEYPAD_GETCHAR+0x138>
				while(!(KEYPAD_PIN & (1<<Keypad_Row[j])));
 134:	80 b3       	in	r24, 0x10	; 16
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <KEYPAD_GETCHAR+0xac>
 13c:	95 95       	asr	r25
 13e:	87 95       	ror	r24
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <KEYPAD_GETCHAR+0xa8>
 144:	80 ff       	sbrs	r24, 0
 146:	f6 cf       	rjmp	.-20     	; 0x134 <KEYPAD_GETCHAR+0xa0>
				switch(i){
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	51 05       	cpc	r21, r1
 14c:	c9 f0       	breq	.+50     	; 0x180 <KEYPAD_GETCHAR+0xec>
 14e:	24 f4       	brge	.+8      	; 0x158 <KEYPAD_GETCHAR+0xc4>
 150:	41 15       	cp	r20, r1
 152:	51 05       	cpc	r21, r1
 154:	41 f0       	breq	.+16     	; 0x166 <KEYPAD_GETCHAR+0xd2>
 156:	3a c0       	rjmp	.+116    	; 0x1cc <KEYPAD_GETCHAR+0x138>
 158:	42 30       	cpi	r20, 0x02	; 2
 15a:	51 05       	cpc	r21, r1
 15c:	f1 f0       	breq	.+60     	; 0x19a <KEYPAD_GETCHAR+0x106>
 15e:	43 30       	cpi	r20, 0x03	; 3
 160:	51 05       	cpc	r21, r1
 162:	41 f1       	breq	.+80     	; 0x1b4 <KEYPAD_GETCHAR+0x120>
 164:	33 c0       	rjmp	.+102    	; 0x1cc <KEYPAD_GETCHAR+0x138>
					case(0):
						if(j == 0) return '7';
 166:	61 15       	cp	r22, r1
 168:	71 05       	cpc	r23, r1
 16a:	f1 f1       	breq	.+124    	; 0x1e8 <KEYPAD_GETCHAR+0x154>
						else if(j == 1) return '4'; 
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	71 05       	cpc	r23, r1
 170:	e9 f1       	breq	.+122    	; 0x1ec <KEYPAD_GETCHAR+0x158>
						else if(j == 2) return '1';
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	71 05       	cpc	r23, r1
 176:	e1 f1       	breq	.+120    	; 0x1f0 <KEYPAD_GETCHAR+0x15c>
						else if(j == 3) return '!';  
 178:	63 30       	cpi	r22, 0x03	; 3
 17a:	71 05       	cpc	r23, r1
 17c:	39 f5       	brne	.+78     	; 0x1cc <KEYPAD_GETCHAR+0x138>
 17e:	3a c0       	rjmp	.+116    	; 0x1f4 <KEYPAD_GETCHAR+0x160>
						break;
					case(1):
						if(j == 0) return '8';
 180:	61 15       	cp	r22, r1
 182:	71 05       	cpc	r23, r1
 184:	c9 f1       	breq	.+114    	; 0x1f8 <KEYPAD_GETCHAR+0x164>
						else if(j == 1) return '5';
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	71 05       	cpc	r23, r1
 18a:	c1 f1       	breq	.+112    	; 0x1fc <KEYPAD_GETCHAR+0x168>
						else if(j == 2) return '2';
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	71 05       	cpc	r23, r1
 190:	b9 f1       	breq	.+110    	; 0x200 <KEYPAD_GETCHAR+0x16c>
						else if(j == 3) return '0';
 192:	63 30       	cpi	r22, 0x03	; 3
 194:	71 05       	cpc	r23, r1
 196:	d1 f4       	brne	.+52     	; 0x1cc <KEYPAD_GETCHAR+0x138>
 198:	35 c0       	rjmp	.+106    	; 0x204 <KEYPAD_GETCHAR+0x170>
						break;
					case(2):
						if(j == 0) return '9';
 19a:	61 15       	cp	r22, r1
 19c:	71 05       	cpc	r23, r1
 19e:	a1 f1       	breq	.+104    	; 0x208 <KEYPAD_GETCHAR+0x174>
						else if(j == 1) return '6';
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	71 05       	cpc	r23, r1
 1a4:	99 f1       	breq	.+102    	; 0x20c <KEYPAD_GETCHAR+0x178>
						else if(j == 2) return '3';
 1a6:	62 30       	cpi	r22, 0x02	; 2
 1a8:	71 05       	cpc	r23, r1
 1aa:	91 f1       	breq	.+100    	; 0x210 <KEYPAD_GETCHAR+0x17c>
						else if(j == 3) return '=';
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	71 05       	cpc	r23, r1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <KEYPAD_GETCHAR+0x138>
 1b2:	30 c0       	rjmp	.+96     	; 0x214 <KEYPAD_GETCHAR+0x180>
						break;
					case(3):
						if(j == 0) return '/';
 1b4:	61 15       	cp	r22, r1
 1b6:	71 05       	cpc	r23, r1
 1b8:	79 f1       	breq	.+94     	; 0x218 <KEYPAD_GETCHAR+0x184>
						else if(j == 1) return '*';
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	71 05       	cpc	r23, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <KEYPAD_GETCHAR+0x188>
						else if(j == 2) return '-';
 1c0:	62 30       	cpi	r22, 0x02	; 2
 1c2:	71 05       	cpc	r23, r1
 1c4:	69 f1       	breq	.+90     	; 0x220 <KEYPAD_GETCHAR+0x18c>
						else if(j == 3) return '+';
 1c6:	63 30       	cpi	r22, 0x03	; 3
 1c8:	71 05       	cpc	r23, r1
 1ca:	61 f1       	breq	.+88     	; 0x224 <KEYPAD_GETCHAR+0x190>
char KEYPAD_GETCHAR(){
	int i,j; //i to iterate over the column (0-->3) and j to iterate over the row (0-->3) 
	for(i = 0; i < 4; i++){ //activating one column at a time
		KEYPAD_PORT |= ((1 << Keypad_Column[0]) | (1 << Keypad_Column[1]) | (1 << Keypad_Column[2]) | (1 << Keypad_Column[3])); //set all column high
		KEYPAD_PORT &= ~ (1 << Keypad_Column[i]);//pull the current column low
		for(j = 0; j < 4; j++){ //iterate over the rows to check which row pulled low 
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	64 30       	cpi	r22, 0x04	; 4
 1d2:	71 05       	cpc	r23, r1
 1d4:	0c f4       	brge	.+2      	; 0x1d8 <KEYPAD_GETCHAR+0x144>
 1d6:	9e cf       	rjmp	.-196    	; 0x114 <KEYPAD_GETCHAR+0x80>
	KEYPAD_PORT = 0xFF;
}

char KEYPAD_GETCHAR(){
	int i,j; //i to iterate over the column (0-->3) and j to iterate over the row (0-->3) 
	for(i = 0; i < 4; i++){ //activating one column at a time
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
 1dc:	44 30       	cpi	r20, 0x04	; 4
 1de:	51 05       	cpc	r21, r1
 1e0:	0c f4       	brge	.+2      	; 0x1e4 <KEYPAD_GETCHAR+0x150>
 1e2:	5f cf       	rjmp	.-322    	; 0xa2 <KEYPAD_GETCHAR+0xe>
						break;
				}
			}
		}
	}
	return 'A';
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	1f c0       	rjmp	.+62     	; 0x226 <KEYPAD_GETCHAR+0x192>
		for(j = 0; j < 4; j++){ //iterate over the rows to check which row pulled low 
			if(!(KEYPAD_PIN & (1<<Keypad_Row[j]))){ //see which row pulled the target column i, if its pin is low then is it one the one if(!0) == true 
				while(!(KEYPAD_PIN & (1<<Keypad_Row[j])));
				switch(i){
					case(0):
						if(j == 0) return '7';
 1e8:	87 e3       	ldi	r24, 0x37	; 55
 1ea:	1d c0       	rjmp	.+58     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 1) return '4'; 
 1ec:	84 e3       	ldi	r24, 0x34	; 52
 1ee:	1b c0       	rjmp	.+54     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 2) return '1';
 1f0:	81 e3       	ldi	r24, 0x31	; 49
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 3) return '!';  
 1f4:	81 e2       	ldi	r24, 0x21	; 33
 1f6:	17 c0       	rjmp	.+46     	; 0x226 <KEYPAD_GETCHAR+0x192>
						break;
					case(1):
						if(j == 0) return '8';
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	15 c0       	rjmp	.+42     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 1) return '5';
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 2) return '2';
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	11 c0       	rjmp	.+34     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 3) return '0';
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	0f c0       	rjmp	.+30     	; 0x226 <KEYPAD_GETCHAR+0x192>
						break;
					case(2):
						if(j == 0) return '9';
 208:	89 e3       	ldi	r24, 0x39	; 57
 20a:	0d c0       	rjmp	.+26     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 1) return '6';
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	0b c0       	rjmp	.+22     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 2) return '3';
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	09 c0       	rjmp	.+18     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 3) return '=';
 214:	8d e3       	ldi	r24, 0x3D	; 61
 216:	07 c0       	rjmp	.+14     	; 0x226 <KEYPAD_GETCHAR+0x192>
						break;
					case(3):
						if(j == 0) return '/';
 218:	8f e2       	ldi	r24, 0x2F	; 47
 21a:	05 c0       	rjmp	.+10     	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 1) return '*';
 21c:	8a e2       	ldi	r24, 0x2A	; 42
 21e:	03 c0       	rjmp	.+6      	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 2) return '-';
 220:	8d e2       	ldi	r24, 0x2D	; 45
 222:	01 c0       	rjmp	.+2      	; 0x226 <KEYPAD_GETCHAR+0x192>
						else if(j == 3) return '+';
 224:	8b e2       	ldi	r24, 0x2B	; 43
				}
			}
		}
	}
	return 'A';
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <LCD_KICK>:
 


void LCD_KICK(){
	// Set EN pin LOW (end of the pulse)
	LCD_CONTROL |= (1<<ENABLE_SWITCH); 
 230:	88 b3       	in	r24, 0x18	; 24
 232:	88 60       	ori	r24, 0x08	; 8
 234:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	83 ed       	ldi	r24, 0xD3	; 211
 238:	90 e3       	ldi	r25, 0x30	; 48
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_KICK+0xa>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_KICK+0x10>
 240:	00 00       	nop
	// Wait for a short time (to ensure the LCD processes the signal)
	_delay_ms(50);
	 // Set EN pin HIGH (start of the pulse)
	LCD_CONTROL &= ~(1<<ENABLE_SWITCH); // ENABLE_SWITCH : PIN3, LCD_CONTROL: PORTB
 242:	88 b3       	in	r24, 0x18	; 24
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	88 bb       	out	0x18, r24	; 24
 248:	08 95       	ret

0000024a <LCD_IS_BUSY>:
}
	
void LCD_IS_BUSY() {
	//a. set the DDRA (DDR_LCD_PORT) to receive data on the micro controller as input
	#ifdef EIGHT_BIT_MODE
	DDR_LCD_PORT = 0x00; //remove the  // if 8_bit mode
 24a:	1a ba       	out	0x1a, r1	; 26
	DDR_LCD_PORT &= ~(0xFF<<DATA_SHIFT);
	 
	#endif
	
	//b. put the LCD in read mode (RW on)
	LCD_CONTROL |= (1<<RW_SWITCH); //MCU reads data from LCD  
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	88 bb       	out	0x18, r24	; 24
	//c. put the LCD in command mode (RS off)
	LCD_CONTROL &= ~(1<<RS_SWITCH);  
 252:	88 b3       	in	r24, 0x18	; 24
 254:	8d 7f       	andi	r24, 0xFD	; 253
 256:	88 bb       	out	0x18, r24	; 24
		LCD_CONTROL &= ~ (1 << ENABLE_SWITCH);
		
		busy_state = (nb & (1<<7)); //extract the status of D7
		
	} while (busy_state); //we repeat untill the flag*/	 
	LCD_KICK();  // Send Enable pulse to read busy flag
 258:	0e 94 18 01 	call	0x230	; 0x230 <LCD_KICK>
	#ifdef EIGHT_BIT_MODE
	DDR_LCD_PORT = 0xFF;// we return the LCD port to output
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	8a bb       	out	0x1a, r24	; 26
	#ifdef FOUR_BIT_MODE
	DDR_LCD_PORT |= (0xFF<<DATA_SHIFT);// we return the LCD port to output
	 
	#endif
	
	LCD_CONTROL &= ~(1<<RW_SWITCH); // set write mode, the MCU writes to the LCD.
 260:	88 b3       	in	r24, 0x18	; 24
 262:	8b 7f       	andi	r24, 0xFB	; 251
 264:	88 bb       	out	0x18, r24	; 24
 266:	08 95       	ret

00000268 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row 
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK); 
}

void LCD_WRITE_COMMAND(unsigned char command){
 268:	cf 93       	push	r28
 26a:	c8 2f       	mov	r28, r24
		 
	#ifdef EIGHT_BIT_MODE
		LCD_IS_BUSY();
 26c:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_IS_BUSY>
		LCD_PORT = command; //we put command to data port A
 270:	cb bb       	out	0x1b, r28	; 27
		LCD_CONTROL &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH)); //we set LCD to Write & command mode
 272:	88 b3       	in	r24, 0x18	; 24
 274:	89 7f       	andi	r24, 0xF9	; 249
 276:	88 bb       	out	0x18, r24	; 24
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_WRITE_COMMAND+0x14>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_WRITE_COMMAND+0x1a>
 282:	00 00       	nop
		_delay_ms(1);
		LCD_KICK(); //send the pulse
 284:	0e 94 18 01 	call	0x230	; 0x230 <LCD_KICK>
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4); // we take half of the command
		LCD_CONTROL &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH)); //we set LCD to Write & command mode
		_delay_ms(1);
		LCD_KICK();
	#endif
}
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LCD_GO_TO_XY>:
	
	}  //The LCD expects the EN pin to transition from low (0) to high (1) and then back to low (0) . This transition is called an Enable pulse .
	   // it tells the LCD to process the data or command that has been sent to it.
	   
void LCD_GO_TO_XY(int line, int pos){ //line:row, column pos 0-15 for the first row, column pos 0-15 for the second row
	if(line == 1){ // we check if the target line is the 1st line
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	91 05       	cpc	r25, r1
 290:	49 f4       	brne	.+18     	; 0x2a4 <LCD_GO_TO_XY+0x18>
		if(pos < 16 && pos >=0){ //ensure the pos is within the range 0-15
 292:	86 2f       	mov	r24, r22
 294:	97 2f       	mov	r25, r23
 296:	40 97       	sbiw	r24, 0x10	; 16
 298:	78 f4       	brcc	.+30     	; 0x2b8 <LCD_GO_TO_XY+0x2c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + pos);//we send command to the cursor to move it to pos 
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	86 0f       	add	r24, r22
 29e:	0e 94 34 01 	call	0x268	; 0x268 <LCD_WRITE_COMMAND>
 2a2:	08 95       	ret
		}
		
	}
	else if(line == 2){// we check if the target line is the 2nd row
 2a4:	02 97       	sbiw	r24, 0x02	; 2
 2a6:	41 f4       	brne	.+16     	; 0x2b8 <LCD_GO_TO_XY+0x2c>
		if(pos < 16 && pos >=0){//ensure the pos is within the range 0-15
 2a8:	86 2f       	mov	r24, r22
 2aa:	97 2f       	mov	r25, r23
 2ac:	40 97       	sbiw	r24, 0x10	; 16
 2ae:	20 f4       	brcc	.+8      	; 0x2b8 <LCD_GO_TO_XY+0x2c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + pos);//we send command to the cursor to move it to pos
 2b0:	80 ec       	ldi	r24, 0xC0	; 192
 2b2:	86 0f       	add	r24, r22
 2b4:	0e 94 34 01 	call	0x268	; 0x268 <LCD_WRITE_COMMAND>
 2b8:	08 95       	ret

000002ba <LCD_clear_screen>:
}
	   
	   
	   
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 34 01 	call	0x268	; 0x268 <LCD_WRITE_COMMAND>
 2c0:	83 ef       	ldi	r24, 0xF3	; 243
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_clear_screen+0xa>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_clear_screen+0x10>
 2ca:	00 00       	nop
 2cc:	08 95       	ret

000002ce <LCD_INIT>:
 2ce:	87 e8       	ldi	r24, 0x87	; 135
 2d0:	93 e1       	ldi	r25, 0x13	; 19
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_INIT+0x4>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_INIT+0xa>
 2d8:	00 00       	nop
	LCD_CONTROL &= ~(1<<RW_SWITCH); // set write mode, the MCU writes to the LCD.
}

void LCD_INIT(){
		_delay_ms(20); //we will wait for LCD to power on 
		LCD_IS_BUSY();
 2da:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_IS_BUSY>
		DDR_LCD_CONTROL |= (1<<ENABLE_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH); //set the control pin (pin of port b as output)
 2de:	87 b3       	in	r24, 0x17	; 23
 2e0:	8e 60       	ori	r24, 0x0E	; 14
 2e2:	87 bb       	out	0x17, r24	; 23
		LCD_CONTROL &= ~((1<<ENABLE_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH)); //clear the control pin connected to LCD 
 2e4:	88 b3       	in	r24, 0x18	; 24
 2e6:	81 7f       	andi	r24, 0xF1	; 241
 2e8:	88 bb       	out	0x18, r24	; 24
		DDR_LCD_PORT = 0xFF;//set data of port A (LCD port as output)
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	8a bb       	out	0x1a, r24	; 26
		LCD_clear_screen(); // we clear the display
 2ee:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 2f2:	88 e3       	ldi	r24, 0x38	; 56
 2f4:	0e 94 34 01 	call	0x268	; 0x268 <LCD_WRITE_COMMAND>
	#ifdef FOUR_BIT_MODE
		 
		LCD_WRITE_COMMAND(0x02); 
		LCD_WRITE_COMMAND(LCD_FUNCT	ION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	0e 94 34 01 	call	0x268	; 0x268 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW); //we set the cursor on to first row 
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	0e 94 34 01 	call	0x268	; 0x268 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK); 
 304:	8f e0       	ldi	r24, 0x0F	; 15
 306:	0e 94 34 01 	call	0x268	; 0x268 <LCD_WRITE_COMMAND>
 30a:	08 95       	ret

0000030c <LCD_WRITE_CHAR>:
		LCD_KICK();
	#endif
}


void LCD_WRITE_CHAR(unsigned char data){
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
	 
	#ifdef EIGHT_BIT_MODE
	LCD_IS_BUSY();
 310:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_IS_BUSY>
	LCD_CONTROL &= ~(1<<RW_SWITCH);//we set the LCD to write mode 
 314:	88 b3       	in	r24, 0x18	; 24
 316:	8b 7f       	andi	r24, 0xFB	; 251
 318:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL |= (1<<RS_SWITCH); // but this time we send data 
 31a:	88 b3       	in	r24, 0x18	; 24
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	88 bb       	out	0x18, r24	; 24
	LCD_PORT = data;
 320:	cb bb       	out	0x1b, r28	; 27
	LCD_KICK(); //send pulse
 322:	0e 94 18 01 	call	0x230	; 0x230 <LCD_KICK>
	 LCD_CONTROL &= ~(1<<RW_SWITCH);//we set the LCD to write mode
	 LCD_CONTROL |= (1<<RS_SWITCH); // but this time we send data
	 _delay_ms(1);
	 LCD_KICK(); //send pulse
	#endif
}
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* data){
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	8c 01       	movw	r16, r24
	int counter = 0; //the counter we used here keeps track of how many characters have been written
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
	while(*data >0)	{ //our loop is on as long as the current character is not '\0' (end of string)
 338:	1c c0       	rjmp	.+56     	; 0x372 <LCD_WRITE_STRING+0x48>
		counter ++;
 33a:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*data++);// write the character and move to the next one
 33c:	0f 5f       	subi	r16, 0xFF	; 255
 33e:	1f 4f       	sbci	r17, 0xFF	; 255
 340:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WRITE_CHAR>
		if(counter == 16){ //if 16 char have been written we move to the second row 
 344:	c0 31       	cpi	r28, 0x10	; 16
 346:	d1 05       	cpc	r29, r1
 348:	39 f4       	brne	.+14     	; 0x358 <LCD_WRITE_STRING+0x2e>
			LCD_GO_TO_XY(2, 0);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_GO_TO_XY>
 356:	0d c0       	rjmp	.+26     	; 0x372 <LCD_WRITE_STRING+0x48>
		}
		else if(counter == 32){//if 32 char have been written we clear the screen and start all over again from the first row
 358:	c0 32       	cpi	r28, 0x20	; 32
 35a:	d1 05       	cpc	r29, r1
 35c:	51 f4       	brne	.+20     	; 0x372 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 35e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_clear_screen>
			LCD_GO_TO_XY(1,0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_GO_TO_XY>
			counter = 0;
 36e:	c0 e0       	ldi	r28, 0x00	; 0
 370:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* data){
	int counter = 0; //the counter we used here keeps track of how many characters have been written
	while(*data >0)	{ //our loop is on as long as the current character is not '\0' (end of string)
 372:	f8 01       	movw	r30, r16
 374:	80 81       	ld	r24, Z
 376:	81 11       	cpse	r24, r1
 378:	e0 cf       	rjmp	.-64     	; 0x33a <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GO_TO_XY(1,0);
			counter = 0;
		}
	}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <main>:
#include "KEYPAD_driver/keypad.h"
 
int main(void)
{
   
	LCD_INIT(); // we initialized the LCD
 384:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_INIT>
	KEYPAD_INIT();
 388:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_INIT>
	LCD_WRITE_STRING("THEY CALL ME OUS");
 38c:	80 e7       	ldi	r24, 0x70	; 112
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_WRITE_STRING>
 394:	2f e3       	ldi	r18, 0x3F	; 63
 396:	8d e0       	ldi	r24, 0x0D	; 13
 398:	93 e0       	ldi	r25, 0x03	; 3
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x16>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x20>
 3a4:	00 00       	nop
	_delay_ms(1000);
	LCD_GO_TO_XY(2, 0);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_GO_TO_XY>
	char Pressed_Key;
	
    while (1) 
    {	
		Pressed_Key = KEYPAD_GETCHAR();	
 3b2:	0e 94 4a 00 	call	0x94	; 0x94 <KEYPAD_GETCHAR>
		switch(Pressed_Key)
 3b6:	81 32       	cpi	r24, 0x21	; 33
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <main+0x3c>
 3ba:	81 34       	cpi	r24, 0x41	; 65
 3bc:	d1 f3       	breq	.-12     	; 0x3b2 <main+0x2e>
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <main+0x42>
		 {
			 case ('!'):
				 LCD_clear_screen();
 3c0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_clear_screen>
				 break;
 3c4:	f6 cf       	rjmp	.-20     	; 0x3b2 <main+0x2e>
			 case ('A'):
				break;
			 default:
				LCD_WRITE_CHAR(Pressed_Key);
 3c6:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WRITE_CHAR>
				break;
 3ca:	f3 cf       	rjmp	.-26     	; 0x3b2 <main+0x2e>

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
