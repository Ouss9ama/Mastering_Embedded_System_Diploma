
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000637  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cd  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
*/
//static unsigned char SegmentNumber[10] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
	
int main(void)
{
	DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	unsigned char i,j;
	while(1)
	{
		for(i=0;i<10;i++)
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	24 c0       	rjmp	.+72     	; 0xbc <main+0x50>
		{
			for(j=0;j<10;j++)
			{
				PORTC = 0b1011 | (i<<4);
  74:	40 e1       	ldi	r20, 0x10	; 16
  76:	94 9f       	mul	r25, r20
  78:	90 01       	movw	r18, r0
  7a:	11 24       	eor	r1, r1
  7c:	2b 60       	ori	r18, 0x0B	; 11
  7e:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	32 e5       	ldi	r19, 0x52	; 82
  84:	47 e0       	ldi	r20, 0x07	; 7
  86:	21 50       	subi	r18, 0x01	; 1
  88:	30 40       	sbci	r19, 0x00	; 0
  8a:	40 40       	sbci	r20, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
				_delay_ms(300);
				PORTC = 0b0111 | (j<<4);
  92:	40 e1       	ldi	r20, 0x10	; 16
  94:	84 9f       	mul	r24, r20
  96:	90 01       	movw	r18, r0
  98:	11 24       	eor	r1, r1
  9a:	27 60       	ori	r18, 0x07	; 7
  9c:	25 bb       	out	0x15, r18	; 21
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	32 e5       	ldi	r19, 0x52	; 82
  a2:	47 e0       	ldi	r20, 0x07	; 7
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	40 40       	sbci	r20, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
	unsigned char i,j;
	while(1)
	{
		for(i=0;i<10;i++)
		{
			for(j=0;j<10;j++)
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x4a>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	8a 30       	cpi	r24, 0x0A	; 10
  b8:	e8 f2       	brcs	.-70     	; 0x74 <main+0x8>
{
	DDRC = 0xff;
	unsigned char i,j;
	while(1)
	{
		for(i=0;i<10;i++)
  ba:	9f 5f       	subi	r25, 0xFF	; 255
  bc:	9a 30       	cpi	r25, 0x0A	; 10
  be:	d0 f3       	brcs	.-12     	; 0xb4 <main+0x48>
  c0:	d7 cf       	rjmp	.-82     	; 0x70 <main+0x4>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
